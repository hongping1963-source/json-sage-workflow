5a8936444caa21683218c5770e63f1b7
"use strict";

/* istanbul ignore next */
function cov_25x20pk3k0() {
  var path = "C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\validator.ts";
  var hash = "75cdaf8a2f9ff0963df4843375f07da373c55ccc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\validator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 31
        }
      },
      "4": {
        start: {
          line: 7,
          column: 14
        },
        end: {
          line: 7,
          column: 45
        }
      },
      "5": {
        start: {
          line: 8,
          column: 22
        },
        end: {
          line: 8,
          column: 61
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "7": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 33
        }
      },
      "8": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "9": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 21,
          column: 11
        }
      },
      "10": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 45
        }
      },
      "11": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 42
        }
      },
      "12": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 49
        }
      },
      "13": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 27,
          column: 36
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 32,
          column: 14
        }
      },
      "16": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 44
        }
      },
      "17": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 35,
          column: 31
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "19": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 65
        }
      },
      "20": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 43,
          column: 10
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 53,
          column: 11
        }
      },
      "22": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "23": {
        start: {
          line: 49,
          column: 28
        },
        end: {
          line: 49,
          column: 45
        }
      },
      "24": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 44
        }
      },
      "25": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 57
        }
      },
      "26": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "27": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 57,
          column: 26
        }
      },
      "28": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 26
        }
      },
      "29": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 33
        }
      },
      "30": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "31": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "32": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 54
        }
      },
      "33": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 34
        }
      },
      "34": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "35": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 70,
          column: 29
        }
      },
      "36": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 29
        }
      },
      "37": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 40
        }
      },
      "38": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "39": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 76
        }
      },
      "40": {
        start: {
          line: 79,
          column: 27
        },
        end: {
          line: 79,
          column: 38
        }
      },
      "41": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "42": {
        start: {
          line: 81,
          column: 25
        },
        end: {
          line: 81,
          column: 70
        }
      },
      "43": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 82,
          column: 60
        }
      },
      "44": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "45": {
        start: {
          line: 84,
          column: 31
        },
        end: {
          line: 84,
          column: 62
        }
      },
      "46": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 67
        }
      },
      "47": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 28
        }
      },
      "48": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "49": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 37
        }
      },
      "50": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 70
        }
      },
      "51": {
        start: {
          line: 96,
          column: 28
        },
        end: {
          line: 96,
          column: 34
        }
      },
      "52": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "53": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 48
        }
      },
      "54": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 100,
          column: 22
        }
      },
      "55": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 22
        }
      },
      "56": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 106
        }
      },
      "57": {
        start: {
          line: 105,
          column: 22
        },
        end: {
          line: 105,
          column: 25
        }
      },
      "58": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "59": {
        start: {
          line: 106,
          column: 21
        },
        end: {
          line: 106,
          column: 22
        }
      },
      "60": {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 107,
          column: 31
        }
      },
      "61": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "62": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 34
        }
      },
      "63": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 35
        }
      },
      "64": {
        start: {
          line: 113,
          column: 24
        },
        end: {
          line: 113,
          column: 45
        }
      },
      "65": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "66": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 56
        }
      },
      "67": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 124,
          column: 12
        }
      },
      "68": {
        start: {
          line: 119,
          column: 36
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "69": {
        start: {
          line: 127,
          column: 0
        },
        end: {
          line: 127,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 27
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 45
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 44
          },
          end: {
            line: 47,
            column: 45
          }
        },
        loc: {
          start: {
            line: 47,
            column: 55
          },
          end: {
            line: 53,
            column: 9
          }
        },
        line: 47
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 55,
            column: 44
          },
          end: {
            line: 55,
            column: 45
          }
        },
        loc: {
          start: {
            line: 55,
            column: 55
          },
          end: {
            line: 59,
            column: 9
          }
        },
        line: 55
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 61,
            column: 45
          },
          end: {
            line: 61,
            column: 46
          }
        },
        loc: {
          start: {
            line: 61,
            column: 56
          },
          end: {
            line: 66,
            column: 9
          }
        },
        line: 61
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 68,
            column: 43
          },
          end: {
            line: 68,
            column: 44
          }
        },
        loc: {
          start: {
            line: 68,
            column: 54
          },
          end: {
            line: 72,
            column: 9
          }
        },
        line: 68
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 74,
            column: 44
          },
          end: {
            line: 74,
            column: 45
          }
        },
        loc: {
          start: {
            line: 74,
            column: 55
          },
          end: {
            line: 76,
            column: 9
          }
        },
        line: 74
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 37
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 78
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 35
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 90
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 41
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 104
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 25
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 118
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 119,
            column: 26
          },
          end: {
            line: 119,
            column: 27
          }
        },
        loc: {
          start: {
            line: 119,
            column: 36
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 119
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 10,
            column: 16
          },
          end: {
            line: 10,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 26
          },
          end: {
            line: 10,
            column: 28
          }
        }],
        line: 10
      },
      "4": {
        loc: {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 16,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 70
          },
          end: {
            line: 16,
            column: 72
          }
        }, {
          start: {
            line: 16,
            column: 75
          },
          end: {
            line: 16,
            column: 80
          }
        }],
        line: 16
      },
      "5": {
        loc: {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 16,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 16,
            column: 50
          }
        }, {
          start: {
            line: 16,
            column: 54
          },
          end: {
            line: 16,
            column: 67
          }
        }],
        line: 16
      },
      "6": {
        loc: {
          start: {
            line: 17,
            column: 25
          },
          end: {
            line: 17,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 80
          },
          end: {
            line: 17,
            column: 82
          }
        }, {
          start: {
            line: 17,
            column: 85
          },
          end: {
            line: 17,
            column: 89
          }
        }],
        line: 17
      },
      "7": {
        loc: {
          start: {
            line: 17,
            column: 25
          },
          end: {
            line: 17,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 25
          },
          end: {
            line: 17,
            column: 60
          }
        }, {
          start: {
            line: 17,
            column: 64
          },
          end: {
            line: 17,
            column: 77
          }
        }],
        line: 17
      },
      "8": {
        loc: {
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 18,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 90
          },
          end: {
            line: 18,
            column: 92
          }
        }, {
          start: {
            line: 18,
            column: 95
          },
          end: {
            line: 18,
            column: 99
          }
        }],
        line: 18
      },
      "9": {
        loc: {
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 18,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 18,
            column: 70
          }
        }, {
          start: {
            line: 18,
            column: 74
          },
          end: {
            line: 18,
            column: 87
          }
        }],
        line: 18
      },
      "10": {
        loc: {
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 19,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 80
          },
          end: {
            line: 19,
            column: 82
          }
        }, {
          start: {
            line: 19,
            column: 85
          },
          end: {
            line: 19,
            column: 89
          }
        }],
        line: 19
      },
      "11": {
        loc: {
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 19,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 19,
            column: 60
          }
        }, {
          start: {
            line: 19,
            column: 64
          },
          end: {
            line: 19,
            column: 77
          }
        }],
        line: 19
      },
      "12": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "13": {
        loc: {
          start: {
            line: 34,
            column: 23
          },
          end: {
            line: 34,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 23
          },
          end: {
            line: 34,
            column: 38
          }
        }, {
          start: {
            line: 34,
            column: 42
          },
          end: {
            line: 34,
            column: 44
          }
        }],
        line: 34
      },
      "14": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "15": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "16": {
        loc: {
          start: {
            line: 50,
            column: 23
          },
          end: {
            line: 50,
            column: 43
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 36
          },
          end: {
            line: 50,
            column: 37
          }
        }, {
          start: {
            line: 50,
            column: 40
          },
          end: {
            line: 50,
            column: 43
          }
        }],
        line: 50
      },
      "17": {
        loc: {
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 52,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 52,
            column: 47
          },
          end: {
            line: 52,
            column: 52
          }
        }, {
          start: {
            line: 52,
            column: 55
          },
          end: {
            line: 52,
            column: 56
          }
        }],
        line: 52
      },
      "18": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 57,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 57,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "19": {
        loc: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 56,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 56,
            column: 30
          }
        }, {
          start: {
            line: 56,
            column: 34
          },
          end: {
            line: 56,
            column: 53
          }
        }],
        line: 56
      },
      "20": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "21": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 70,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 70,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "22": {
        loc: {
          start: {
            line: 71,
            column: 19
          },
          end: {
            line: 71,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 27
          },
          end: {
            line: 71,
            column: 34
          }
        }, {
          start: {
            line: 71,
            column: 37
          },
          end: {
            line: 71,
            column: 39
          }
        }],
        line: 71
      },
      "23": {
        loc: {
          start: {
            line: 75,
            column: 19
          },
          end: {
            line: 75,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 65
          },
          end: {
            line: 75,
            column: 70
          }
        }, {
          start: {
            line: 75,
            column: 73
          },
          end: {
            line: 75,
            column: 75
          }
        }],
        line: 75
      },
      "24": {
        loc: {
          start: {
            line: 75,
            column: 19
          },
          end: {
            line: 75,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 19
          },
          end: {
            line: 75,
            column: 44
          }
        }, {
          start: {
            line: 75,
            column: 48
          },
          end: {
            line: 75,
            column: 62
          }
        }],
        line: 75
      },
      "25": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "26": {
        loc: {
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 83,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 83,
            column: 20
          }
        }, {
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 83,
            column: 55
          }
        }],
        line: 83
      },
      "27": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "28": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 100,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 100,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "29": {
        loc: {
          start: {
            line: 102,
            column: 15
          },
          end: {
            line: 102,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 96
          }
        }, {
          start: {
            line: 102,
            column: 101
          },
          end: {
            line: 102,
            column: 105
          }
        }],
        line: 102
      },
      "30": {
        loc: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 69
          },
          end: {
            line: 102,
            column: 75
          }
        }, {
          start: {
            line: 102,
            column: 78
          },
          end: {
            line: 102,
            column: 96
          }
        }],
        line: 102
      },
      "31": {
        loc: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 38
          }
        }, {
          start: {
            line: 102,
            column: 42
          },
          end: {
            line: 102,
            column: 66
          }
        }],
        line: 102
      },
      "32": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "33": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "34": {
        loc: {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 34
          }
        }, {
          start: {
            line: 121,
            column: 38
          },
          end: {
            line: 121,
            column: 53
          }
        }],
        line: 121
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\validator.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\validator.ts"],
      sourcesContent: ["import Ajv from 'ajv';\r\nimport addFormats from 'ajv-formats';\r\nimport { JSONSchema7 } from 'json-schema';\r\n\r\ninterface ValidationOptions {\r\n    strict?: boolean;\r\n    coerceTypes?: boolean;\r\n    removeAdditional?: boolean;\r\n    useDefaults?: boolean;\r\n    autoRepair?: boolean;\r\n}\r\n\r\nexport class JsonValidator {\r\n    private ajv: Ajv;\r\n    private schemas: Map<string, any> = new Map();\r\n    private repairStrategies: Map<string, (value: any) => any> = new Map();\r\n\r\n    constructor(private options: ValidationOptions = {}) {\r\n        this.ajv = new Ajv({\r\n            strict: options.strict ?? false,\r\n            coerceTypes: options.coerceTypes ?? true,\r\n            removeAdditional: options.removeAdditional ?? true,\r\n            useDefaults: options.useDefaults ?? true,\r\n            allErrors: true\r\n        });\r\n        \r\n        addFormats(this.ajv);\r\n        this.initializeRepairStrategies();\r\n    }\r\n\r\n    validate(data: any, schema: JSONSchema7): ValidationResult {\r\n        const validate = this.ajv.compile(schema);\r\n        const valid = validate(data);\r\n\r\n        if (valid) {\r\n            return {\r\n                valid: true,\r\n                data: data\r\n            };\r\n        }\r\n\r\n        const errors = validate.errors || [];\r\n        let repairedData = data;\r\n\r\n        if (this.options.autoRepair) {\r\n            repairedData = this.repairData(data, errors, schema);\r\n        }\r\n\r\n        return {\r\n            valid: false,\r\n            errors: this.formatErrors(errors),\r\n            repairedData: repairedData\r\n        };\r\n    }\r\n\r\n    private initializeRepairStrategies() {\r\n        // \u6570\u5B57\u4FEE\u590D\u7B56\u7565\r\n        this.repairStrategies.set('number', (value) => {\r\n            if (typeof value === 'string') {\r\n                const num = parseFloat(value);\r\n                return isNaN(num) ? 0 : num;\r\n            }\r\n            return typeof value === 'number' ? value : 0;\r\n        });\r\n\r\n        // \u5B57\u7B26\u4E32\u4FEE\u590D\u7B56\u7565\r\n        this.repairStrategies.set('string', (value) => {\r\n            if (value === null || value === undefined) return '';\r\n            return String(value);\r\n        });\r\n\r\n        // \u5E03\u5C14\u503C\u4FEE\u590D\u7B56\u7565\r\n        this.repairStrategies.set('boolean', (value) => {\r\n            if (typeof value === 'string') {\r\n                return value.toLowerCase() === 'true';\r\n            }\r\n            return Boolean(value);\r\n        });\r\n\r\n        // \u6570\u7EC4\u4FEE\u590D\u7B56\u7565\r\n        this.repairStrategies.set('array', (value) => {\r\n            if (Array.isArray(value)) return value;\r\n            return value ? [value] : [];\r\n        });\r\n\r\n        // \u5BF9\u8C61\u4FEE\u590D\u7B56\u7565\r\n        this.repairStrategies.set('object', (value) => {\r\n            return typeof value === 'object' && value !== null ? value : {};\r\n        });\r\n    }\r\n\r\n    private repairData(data: any, errors: any[], schema: JSONSchema7): any {\r\n        let repairedData = { ...data };\r\n\r\n        for (const error of errors) {\r\n            const path = error.instancePath.split('/').filter(Boolean);\r\n            const type = this.getExpectedType(error, schema);\r\n            \r\n            if (type && this.repairStrategies.has(type)) {\r\n                const repair = this.repairStrategies.get(type)!;\r\n                this.updateValueAtPath(repairedData, path, repair);\r\n            }\r\n        }\r\n\r\n        return repairedData;\r\n    }\r\n\r\n    private getExpectedType(error: any, schema: JSONSchema7): string | null {\r\n        if (error.keyword === 'type') {\r\n            return error.params.type;\r\n        }\r\n\r\n        // \u4ECEschema\u4E2D\u67E5\u627E\u671F\u671B\u7684\u7C7B\u578B\r\n        const schemaPath = error.schemaPath.split('/').filter(Boolean);\r\n        let currentSchema: any = schema;\r\n        \r\n        for (const part of schemaPath) {\r\n            currentSchema = currentSchema[part];\r\n            if (!currentSchema) break;\r\n        }\r\n\r\n        return currentSchema?.type || null;\r\n    }\r\n\r\n    private updateValueAtPath(obj: any, path: string[], repair: (value: any) => any) {\r\n        let current = obj;\r\n        \r\n        for (let i = 0; i < path.length - 1; i++) {\r\n            const key = path[i];\r\n            if (!(key in current)) {\r\n                current[key] = {};\r\n            }\r\n            current = current[key];\r\n        }\r\n\r\n        const lastKey = path[path.length - 1];\r\n        if (lastKey) {\r\n            current[lastKey] = repair(current[lastKey]);\r\n        }\r\n    }\r\n\r\n    private formatErrors(errors: any[]): ValidationError[] {\r\n        return errors.map(error => ({\r\n            path: error.instancePath,\r\n            message: error.message || 'Unknown error',\r\n            keyword: error.keyword,\r\n            params: error.params\r\n        }));\r\n    }\r\n}\r\n\r\nexport interface ValidationResult {\r\n    valid: boolean;\r\n    errors?: ValidationError[];\r\n    repairedData?: any;\r\n    data?: any;\r\n}\r\n\r\nexport interface ValidationError {\r\n    path: string;\r\n    message: string;\r\n    keyword: string;\r\n    params: any;\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "75cdaf8a2f9ff0963df4843375f07da373c55ccc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25x20pk3k0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25x20pk3k0();
var __importDefault =
/* istanbul ignore next */
(cov_25x20pk3k0().s[0]++,
/* istanbul ignore next */
(cov_25x20pk3k0().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_25x20pk3k0().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_25x20pk3k0().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_25x20pk3k0().f[0]++;
  cov_25x20pk3k0().s[1]++;
  return /* istanbul ignore next */(cov_25x20pk3k0().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_25x20pk3k0().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_25x20pk3k0().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_25x20pk3k0().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_25x20pk3k0().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_25x20pk3k0().s[3]++;
exports.JsonValidator = void 0;
const ajv_1 =
/* istanbul ignore next */
(cov_25x20pk3k0().s[4]++, __importDefault(require("ajv")));
const ajv_formats_1 =
/* istanbul ignore next */
(cov_25x20pk3k0().s[5]++, __importDefault(require("ajv-formats")));
class JsonValidator {
  constructor(options =
  /* istanbul ignore next */
  (cov_25x20pk3k0().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_25x20pk3k0().f[1]++;
    var _a, _b, _c, _d;
    /* istanbul ignore next */
    cov_25x20pk3k0().s[6]++;
    this.options = options;
    /* istanbul ignore next */
    cov_25x20pk3k0().s[7]++;
    this.schemas = new Map();
    /* istanbul ignore next */
    cov_25x20pk3k0().s[8]++;
    this.repairStrategies = new Map();
    /* istanbul ignore next */
    cov_25x20pk3k0().s[9]++;
    this.ajv = new ajv_1.default({
      strict:
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[5][0]++, (_a = options.strict) !== null) &&
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[5][1]++, _a !== void 0) ?
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[4][0]++, _a) :
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[4][1]++, false),
      coerceTypes:
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[7][0]++, (_b = options.coerceTypes) !== null) &&
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[7][1]++, _b !== void 0) ?
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[6][0]++, _b) :
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[6][1]++, true),
      removeAdditional:
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[9][0]++, (_c = options.removeAdditional) !== null) &&
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[9][1]++, _c !== void 0) ?
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[8][0]++, _c) :
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[8][1]++, true),
      useDefaults:
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[11][0]++, (_d = options.useDefaults) !== null) &&
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[11][1]++, _d !== void 0) ?
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[10][0]++, _d) :
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[10][1]++, true),
      allErrors: true
    });
    /* istanbul ignore next */
    cov_25x20pk3k0().s[10]++;
    (0, ajv_formats_1.default)(this.ajv);
    /* istanbul ignore next */
    cov_25x20pk3k0().s[11]++;
    this.initializeRepairStrategies();
  }
  validate(data, schema) {
    /* istanbul ignore next */
    cov_25x20pk3k0().f[2]++;
    const validate =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[12]++, this.ajv.compile(schema));
    const valid =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[13]++, validate(data));
    /* istanbul ignore next */
    cov_25x20pk3k0().s[14]++;
    if (valid) {
      /* istanbul ignore next */
      cov_25x20pk3k0().b[12][0]++;
      cov_25x20pk3k0().s[15]++;
      return {
        valid: true,
        data: data
      };
    } else
    /* istanbul ignore next */
    {
      cov_25x20pk3k0().b[12][1]++;
    }
    const errors =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[16]++,
    /* istanbul ignore next */
    (cov_25x20pk3k0().b[13][0]++, validate.errors) ||
    /* istanbul ignore next */
    (cov_25x20pk3k0().b[13][1]++, []));
    let repairedData =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[17]++, data);
    /* istanbul ignore next */
    cov_25x20pk3k0().s[18]++;
    if (this.options.autoRepair) {
      /* istanbul ignore next */
      cov_25x20pk3k0().b[14][0]++;
      cov_25x20pk3k0().s[19]++;
      repairedData = this.repairData(data, errors, schema);
    } else
    /* istanbul ignore next */
    {
      cov_25x20pk3k0().b[14][1]++;
    }
    cov_25x20pk3k0().s[20]++;
    return {
      valid: false,
      errors: this.formatErrors(errors),
      repairedData: repairedData
    };
  }
  initializeRepairStrategies() {
    /* istanbul ignore next */
    cov_25x20pk3k0().f[3]++;
    cov_25x20pk3k0().s[21]++;
    // 数字修复策略
    this.repairStrategies.set('number', value => {
      /* istanbul ignore next */
      cov_25x20pk3k0().f[4]++;
      cov_25x20pk3k0().s[22]++;
      if (typeof value === 'string') {
        /* istanbul ignore next */
        cov_25x20pk3k0().b[15][0]++;
        const num =
        /* istanbul ignore next */
        (cov_25x20pk3k0().s[23]++, parseFloat(value));
        /* istanbul ignore next */
        cov_25x20pk3k0().s[24]++;
        return isNaN(num) ?
        /* istanbul ignore next */
        (cov_25x20pk3k0().b[16][0]++, 0) :
        /* istanbul ignore next */
        (cov_25x20pk3k0().b[16][1]++, num);
      } else
      /* istanbul ignore next */
      {
        cov_25x20pk3k0().b[15][1]++;
      }
      cov_25x20pk3k0().s[25]++;
      return typeof value === 'number' ?
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[17][0]++, value) :
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[17][1]++, 0);
    });
    // 字符串修复策略
    /* istanbul ignore next */
    cov_25x20pk3k0().s[26]++;
    this.repairStrategies.set('string', value => {
      /* istanbul ignore next */
      cov_25x20pk3k0().f[5]++;
      cov_25x20pk3k0().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[19][0]++, value === null) ||
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[19][1]++, value === undefined)) {
        /* istanbul ignore next */
        cov_25x20pk3k0().b[18][0]++;
        cov_25x20pk3k0().s[28]++;
        return '';
      } else
      /* istanbul ignore next */
      {
        cov_25x20pk3k0().b[18][1]++;
      }
      cov_25x20pk3k0().s[29]++;
      return String(value);
    });
    // 布尔值修复策略
    /* istanbul ignore next */
    cov_25x20pk3k0().s[30]++;
    this.repairStrategies.set('boolean', value => {
      /* istanbul ignore next */
      cov_25x20pk3k0().f[6]++;
      cov_25x20pk3k0().s[31]++;
      if (typeof value === 'string') {
        /* istanbul ignore next */
        cov_25x20pk3k0().b[20][0]++;
        cov_25x20pk3k0().s[32]++;
        return value.toLowerCase() === 'true';
      } else
      /* istanbul ignore next */
      {
        cov_25x20pk3k0().b[20][1]++;
      }
      cov_25x20pk3k0().s[33]++;
      return Boolean(value);
    });
    // 数组修复策略
    /* istanbul ignore next */
    cov_25x20pk3k0().s[34]++;
    this.repairStrategies.set('array', value => {
      /* istanbul ignore next */
      cov_25x20pk3k0().f[7]++;
      cov_25x20pk3k0().s[35]++;
      if (Array.isArray(value)) {
        /* istanbul ignore next */
        cov_25x20pk3k0().b[21][0]++;
        cov_25x20pk3k0().s[36]++;
        return value;
      } else
      /* istanbul ignore next */
      {
        cov_25x20pk3k0().b[21][1]++;
      }
      cov_25x20pk3k0().s[37]++;
      return value ?
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[22][0]++, [value]) :
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[22][1]++, []);
    });
    // 对象修复策略
    /* istanbul ignore next */
    cov_25x20pk3k0().s[38]++;
    this.repairStrategies.set('object', value => {
      /* istanbul ignore next */
      cov_25x20pk3k0().f[8]++;
      cov_25x20pk3k0().s[39]++;
      return /* istanbul ignore next */(cov_25x20pk3k0().b[24][0]++, typeof value === 'object') &&
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[24][1]++, value !== null) ?
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[23][0]++, value) :
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[23][1]++, {});
    });
  }
  repairData(data, errors, schema) {
    /* istanbul ignore next */
    cov_25x20pk3k0().f[9]++;
    let repairedData =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[40]++, {
      ...data
    });
    /* istanbul ignore next */
    cov_25x20pk3k0().s[41]++;
    for (const error of errors) {
      const path =
      /* istanbul ignore next */
      (cov_25x20pk3k0().s[42]++, error.instancePath.split('/').filter(Boolean));
      const type =
      /* istanbul ignore next */
      (cov_25x20pk3k0().s[43]++, this.getExpectedType(error, schema));
      /* istanbul ignore next */
      cov_25x20pk3k0().s[44]++;
      if (
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[26][0]++, type) &&
      /* istanbul ignore next */
      (cov_25x20pk3k0().b[26][1]++, this.repairStrategies.has(type))) {
        /* istanbul ignore next */
        cov_25x20pk3k0().b[25][0]++;
        const repair =
        /* istanbul ignore next */
        (cov_25x20pk3k0().s[45]++, this.repairStrategies.get(type));
        /* istanbul ignore next */
        cov_25x20pk3k0().s[46]++;
        this.updateValueAtPath(repairedData, path, repair);
      } else
      /* istanbul ignore next */
      {
        cov_25x20pk3k0().b[25][1]++;
      }
    }
    /* istanbul ignore next */
    cov_25x20pk3k0().s[47]++;
    return repairedData;
  }
  getExpectedType(error, schema) {
    /* istanbul ignore next */
    cov_25x20pk3k0().f[10]++;
    cov_25x20pk3k0().s[48]++;
    if (error.keyword === 'type') {
      /* istanbul ignore next */
      cov_25x20pk3k0().b[27][0]++;
      cov_25x20pk3k0().s[49]++;
      return error.params.type;
    } else
    /* istanbul ignore next */
    {
      cov_25x20pk3k0().b[27][1]++;
    }
    // 从schema中查找期望的类型
    const schemaPath =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[50]++, error.schemaPath.split('/').filter(Boolean));
    let currentSchema =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[51]++, schema);
    /* istanbul ignore next */
    cov_25x20pk3k0().s[52]++;
    for (const part of schemaPath) {
      /* istanbul ignore next */
      cov_25x20pk3k0().s[53]++;
      currentSchema = currentSchema[part];
      /* istanbul ignore next */
      cov_25x20pk3k0().s[54]++;
      if (!currentSchema) {
        /* istanbul ignore next */
        cov_25x20pk3k0().b[28][0]++;
        cov_25x20pk3k0().s[55]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_25x20pk3k0().b[28][1]++;
      }
    }
    /* istanbul ignore next */
    cov_25x20pk3k0().s[56]++;
    return /* istanbul ignore next */(cov_25x20pk3k0().b[29][0]++,
    /* istanbul ignore next */
    (cov_25x20pk3k0().b[31][0]++, currentSchema === null) ||
    /* istanbul ignore next */
    (cov_25x20pk3k0().b[31][1]++, currentSchema === void 0) ?
    /* istanbul ignore next */
    (cov_25x20pk3k0().b[30][0]++, void 0) :
    /* istanbul ignore next */
    (cov_25x20pk3k0().b[30][1]++, currentSchema.type)) ||
    /* istanbul ignore next */
    (cov_25x20pk3k0().b[29][1]++, null);
  }
  updateValueAtPath(obj, path, repair) {
    /* istanbul ignore next */
    cov_25x20pk3k0().f[11]++;
    let current =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[57]++, obj);
    /* istanbul ignore next */
    cov_25x20pk3k0().s[58]++;
    for (let i =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[59]++, 0); i < path.length - 1; i++) {
      const key =
      /* istanbul ignore next */
      (cov_25x20pk3k0().s[60]++, path[i]);
      /* istanbul ignore next */
      cov_25x20pk3k0().s[61]++;
      if (!(key in current)) {
        /* istanbul ignore next */
        cov_25x20pk3k0().b[32][0]++;
        cov_25x20pk3k0().s[62]++;
        current[key] = {};
      } else
      /* istanbul ignore next */
      {
        cov_25x20pk3k0().b[32][1]++;
      }
      cov_25x20pk3k0().s[63]++;
      current = current[key];
    }
    const lastKey =
    /* istanbul ignore next */
    (cov_25x20pk3k0().s[64]++, path[path.length - 1]);
    /* istanbul ignore next */
    cov_25x20pk3k0().s[65]++;
    if (lastKey) {
      /* istanbul ignore next */
      cov_25x20pk3k0().b[33][0]++;
      cov_25x20pk3k0().s[66]++;
      current[lastKey] = repair(current[lastKey]);
    } else
    /* istanbul ignore next */
    {
      cov_25x20pk3k0().b[33][1]++;
    }
  }
  formatErrors(errors) {
    /* istanbul ignore next */
    cov_25x20pk3k0().f[12]++;
    cov_25x20pk3k0().s[67]++;
    return errors.map(error => {
      /* istanbul ignore next */
      cov_25x20pk3k0().f[13]++;
      cov_25x20pk3k0().s[68]++;
      return {
        path: error.instancePath,
        message:
        /* istanbul ignore next */
        (cov_25x20pk3k0().b[34][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_25x20pk3k0().b[34][1]++, 'Unknown error'),
        keyword: error.keyword,
        params: error.params
      };
    });
  }
}
/* istanbul ignore next */
cov_25x20pk3k0().s[69]++;
exports.JsonValidator = JsonValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
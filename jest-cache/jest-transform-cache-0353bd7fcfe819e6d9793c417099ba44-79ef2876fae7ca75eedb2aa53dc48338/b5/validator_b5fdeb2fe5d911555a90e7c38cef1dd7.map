{"version":3,"names":["cov_25x20pk3k0","actualCoverage","ajv_1","s","__importDefault","require","ajv_formats_1","JsonValidator","constructor","options","b","f","schemas","Map","repairStrategies","ajv","default","strict","_a","coerceTypes","_b","removeAdditional","_c","useDefaults","_d","allErrors","initializeRepairStrategies","validate","data","schema","compile","valid","errors","repairedData","autoRepair","repairData","formatErrors","set","value","num","parseFloat","isNaN","undefined","String","toLowerCase","Boolean","Array","isArray","error","path","instancePath","split","filter","type","getExpectedType","has","repair","get","updateValueAtPath","keyword","params","schemaPath","currentSchema","part","obj","current","i","length","key","lastKey","map","message","exports"],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\validator.ts"],"sourcesContent":["import Ajv from 'ajv';\r\nimport addFormats from 'ajv-formats';\r\nimport { JSONSchema7 } from 'json-schema';\r\n\r\ninterface ValidationOptions {\r\n    strict?: boolean;\r\n    coerceTypes?: boolean;\r\n    removeAdditional?: boolean;\r\n    useDefaults?: boolean;\r\n    autoRepair?: boolean;\r\n}\r\n\r\nexport class JsonValidator {\r\n    private ajv: Ajv;\r\n    private schemas: Map<string, any> = new Map();\r\n    private repairStrategies: Map<string, (value: any) => any> = new Map();\r\n\r\n    constructor(private options: ValidationOptions = {}) {\r\n        this.ajv = new Ajv({\r\n            strict: options.strict ?? false,\r\n            coerceTypes: options.coerceTypes ?? true,\r\n            removeAdditional: options.removeAdditional ?? true,\r\n            useDefaults: options.useDefaults ?? true,\r\n            allErrors: true\r\n        });\r\n        \r\n        addFormats(this.ajv);\r\n        this.initializeRepairStrategies();\r\n    }\r\n\r\n    validate(data: any, schema: JSONSchema7): ValidationResult {\r\n        const validate = this.ajv.compile(schema);\r\n        const valid = validate(data);\r\n\r\n        if (valid) {\r\n            return {\r\n                valid: true,\r\n                data: data\r\n            };\r\n        }\r\n\r\n        const errors = validate.errors || [];\r\n        let repairedData = data;\r\n\r\n        if (this.options.autoRepair) {\r\n            repairedData = this.repairData(data, errors, schema);\r\n        }\r\n\r\n        return {\r\n            valid: false,\r\n            errors: this.formatErrors(errors),\r\n            repairedData: repairedData\r\n        };\r\n    }\r\n\r\n    private initializeRepairStrategies() {\r\n        // 数字修复策略\r\n        this.repairStrategies.set('number', (value) => {\r\n            if (typeof value === 'string') {\r\n                const num = parseFloat(value);\r\n                return isNaN(num) ? 0 : num;\r\n            }\r\n            return typeof value === 'number' ? value : 0;\r\n        });\r\n\r\n        // 字符串修复策略\r\n        this.repairStrategies.set('string', (value) => {\r\n            if (value === null || value === undefined) return '';\r\n            return String(value);\r\n        });\r\n\r\n        // 布尔值修复策略\r\n        this.repairStrategies.set('boolean', (value) => {\r\n            if (typeof value === 'string') {\r\n                return value.toLowerCase() === 'true';\r\n            }\r\n            return Boolean(value);\r\n        });\r\n\r\n        // 数组修复策略\r\n        this.repairStrategies.set('array', (value) => {\r\n            if (Array.isArray(value)) return value;\r\n            return value ? [value] : [];\r\n        });\r\n\r\n        // 对象修复策略\r\n        this.repairStrategies.set('object', (value) => {\r\n            return typeof value === 'object' && value !== null ? value : {};\r\n        });\r\n    }\r\n\r\n    private repairData(data: any, errors: any[], schema: JSONSchema7): any {\r\n        let repairedData = { ...data };\r\n\r\n        for (const error of errors) {\r\n            const path = error.instancePath.split('/').filter(Boolean);\r\n            const type = this.getExpectedType(error, schema);\r\n            \r\n            if (type && this.repairStrategies.has(type)) {\r\n                const repair = this.repairStrategies.get(type)!;\r\n                this.updateValueAtPath(repairedData, path, repair);\r\n            }\r\n        }\r\n\r\n        return repairedData;\r\n    }\r\n\r\n    private getExpectedType(error: any, schema: JSONSchema7): string | null {\r\n        if (error.keyword === 'type') {\r\n            return error.params.type;\r\n        }\r\n\r\n        // 从schema中查找期望的类型\r\n        const schemaPath = error.schemaPath.split('/').filter(Boolean);\r\n        let currentSchema: any = schema;\r\n        \r\n        for (const part of schemaPath) {\r\n            currentSchema = currentSchema[part];\r\n            if (!currentSchema) break;\r\n        }\r\n\r\n        return currentSchema?.type || null;\r\n    }\r\n\r\n    private updateValueAtPath(obj: any, path: string[], repair: (value: any) => any) {\r\n        let current = obj;\r\n        \r\n        for (let i = 0; i < path.length - 1; i++) {\r\n            const key = path[i];\r\n            if (!(key in current)) {\r\n                current[key] = {};\r\n            }\r\n            current = current[key];\r\n        }\r\n\r\n        const lastKey = path[path.length - 1];\r\n        if (lastKey) {\r\n            current[lastKey] = repair(current[lastKey]);\r\n        }\r\n    }\r\n\r\n    private formatErrors(errors: any[]): ValidationError[] {\r\n        return errors.map(error => ({\r\n            path: error.instancePath,\r\n            message: error.message || 'Unknown error',\r\n            keyword: error.keyword,\r\n            params: error.params\r\n        }));\r\n    }\r\n}\r\n\r\nexport interface ValidationResult {\r\n    valid: boolean;\r\n    errors?: ValidationError[];\r\n    repairedData?: any;\r\n    data?: any;\r\n}\r\n\r\nexport interface ValidationError {\r\n    path: string;\r\n    message: string;\r\n    keyword: string;\r\n    params: any;\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmBY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EA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","ignoreList":[]}
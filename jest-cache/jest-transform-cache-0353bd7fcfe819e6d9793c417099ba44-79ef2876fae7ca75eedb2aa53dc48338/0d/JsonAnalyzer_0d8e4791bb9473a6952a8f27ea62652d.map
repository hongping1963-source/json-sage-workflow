{"version":3,"names":["cov_977v0k3ar","actualCoverage","s","JsonAnalyzer","analyzeStructure","data","f","insights","b","push","type","message","severity","fieldCount","Object","keys","length","key","value","entries","test","error","details","getFieldInfo","fieldInfo","info","path","isRequired","format","detectFormat","Array","isArray","elementType","calculateMetrics","complexity","calculateComplexity","dataSize","JSON","stringify","values","exports"],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\agent\\JsonAnalyzer.ts"],"sourcesContent":["import { JsonInsight, FieldInfo } from '../types';\n\nexport class JsonAnalyzer {\n    static analyzeStructure(data: any): JsonInsight[] {\n        const insights: JsonInsight[] = [];\n\n        try {\n            // 检查数据类型\n            if (typeof data !== 'object' || data === null) {\n                insights.push({\n                    type: 'data_quality',\n                    message: '输入数据必须是对象类型',\n                    severity: 'error'\n                });\n                return insights;\n            }\n\n            // 检查字段数量\n            const fieldCount = Object.keys(data).length;\n            if (fieldCount === 0) {\n                insights.push({\n                    type: 'data_quality',\n                    message: '输入数据不能为空对象',\n                    severity: 'error'\n                });\n            } else if (fieldCount > 100) {\n                insights.push({\n                    type: 'performance',\n                    message: '字段数量过多可能影响性能',\n                    severity: 'warning'\n                });\n            }\n\n            // 分析字段类型\n            for (const [key, value] of Object.entries(data)) {\n                // 检查字段名格式\n                if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(key)) {\n                    insights.push({\n                        type: 'naming',\n                        message: `字段名 \"${key}\" 不符合命名规范`,\n                        severity: 'warning'\n                    });\n                }\n\n                // 检查字段值类型\n                const type = typeof value;\n                if (type === 'undefined') {\n                    insights.push({\n                        type: 'data_quality',\n                        message: `字段 \"${key}\" 的值不能为undefined`,\n                        severity: 'error'\n                    });\n                }\n            }\n\n            return insights;\n        } catch (error) {\n            insights.push({\n                type: 'system',\n                message: '分析数据结构时发生错误',\n                severity: 'error',\n                details: error\n            });\n            return insights;\n        }\n    }\n\n    static getFieldInfo(data: any): FieldInfo[] {\n        const fieldInfo: FieldInfo[] = [];\n\n        if (typeof data !== 'object' || data === null) {\n            return fieldInfo;\n        }\n\n        for (const [key, value] of Object.entries(data)) {\n            const info: FieldInfo = {\n                path: key,\n                type: typeof value,\n                isRequired: true,\n                format: this.detectFormat(value)\n            };\n\n            if (Array.isArray(value)) {\n                info.type = 'array';\n                const elementType = value.length > 0 ? typeof value[0] : 'any';\n                info.format = `array<${elementType}>`;\n            }\n\n            fieldInfo.push(info);\n        }\n\n        return fieldInfo;\n    }\n\n    static calculateMetrics(data: any): any {\n        return {\n            fieldCount: Object.keys(data).length,\n            complexity: this.calculateComplexity(data),\n            dataSize: JSON.stringify(data).length\n        };\n    }\n\n    private static calculateComplexity(data: any): number {\n        let complexity = 1;\n\n        if (typeof data !== 'object' || data === null) {\n            return complexity;\n        }\n\n        for (const value of Object.values(data)) {\n            if (typeof value === 'object' && value !== null) {\n                complexity += this.calculateComplexity(value);\n            }\n        }\n\n        return complexity;\n    }\n\n    private static detectFormat(value: any): string {\n        if (typeof value === 'string') {\n            if (/^\\d{4}-\\d{2}-\\d{2}$/.test(value)) {\n                return 'date';\n            }\n            if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) {\n                return 'datetime';\n            }\n            if (/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(value)) {\n                return 'email';\n            }\n            if (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(value)) {\n                return 'uuid';\n            }\n        }\n        return '';\n    }\n}\n"],"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","ignoreList":[]}
{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\deepseek\\integration.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\deepseek\\integration.test.ts"],"sourcesContent":["import { json } from '../../index';\r\nimport { SchemaGenerator } from '../../core/SchemaGenerator';\r\nimport { DeepSeekService } from '../../core/DeepSeekService';\r\n\r\ndescribe('DeepSeek AI Integration', () => {\r\n    const mockConfig = {\r\n        apiKey: process.env.JSONSAGE_DEEPSEEK_API_KEY || 'test-api-key'\r\n    };\r\n\r\n    const mockJsonData = {\r\n        user: {\r\n            name: 'John Doe',\r\n            age: 30,\r\n            email: 'john@example.com',\r\n            preferences: {\r\n                theme: 'dark',\r\n                notifications: true\r\n            }\r\n        },\r\n        settings: {\r\n            language: 'en',\r\n            timezone: 'UTC-5'\r\n        }\r\n    };\r\n\r\n    describe('End-to-End Schema Generation', () => {\r\n        it('should generate schema with AI when enabled', async () => {\r\n            const workflow = json.createWorkflow({\r\n                schema: {\r\n                    useAI: true,\r\n                    deepseek: mockConfig\r\n                }\r\n            });\r\n\r\n            const schema = await workflow.generateSchema(mockJsonData, {\r\n                format: 'draft-07',\r\n                includeExamples: true,\r\n                includeDescriptions: true\r\n            });\r\n\r\n            expect(schema).toBeDefined();\r\n            const parsedSchema = JSON.parse(schema);\r\n            expect(parsedSchema.$schema).toBe('http://json-schema.org/draft-07/schema#');\r\n            expect(parsedSchema.properties).toBeDefined();\r\n            expect(parsedSchema.properties.user).toBeDefined();\r\n            expect(parsedSchema.properties.settings).toBeDefined();\r\n        });\r\n\r\n        it('should fall back to traditional generation when AI is disabled', async () => {\r\n            const workflow = json.createWorkflow({\r\n                schema: {\r\n                    useAI: false\r\n                }\r\n            });\r\n\r\n            const schema = await workflow.generateSchema(mockJsonData);\r\n            \r\n            expect(schema).toBeDefined();\r\n            const parsedSchema = JSON.parse(schema);\r\n            expect(parsedSchema.type).toBe('object');\r\n            expect(parsedSchema.properties).toBeDefined();\r\n        });\r\n    });\r\n\r\n    describe('Schema Generator Features', () => {\r\n        let generator: SchemaGenerator;\r\n\r\n        beforeEach(() => {\r\n            generator = json.createSchemaGenerator({\r\n                useAI: true,\r\n                deepseek: mockConfig\r\n            });\r\n        });\r\n\r\n        it('should generate schema with examples', async () => {\r\n            const schema = await generator.generateSchema(mockJsonData, {\r\n                includeExamples: true\r\n            });\r\n\r\n            const parsedSchema = JSON.parse(schema);\r\n            expect(parsedSchema.examples).toBeDefined();\r\n            // 验证示例值的结构\r\n            if (parsedSchema.examples && parsedSchema.examples.length > 0) {\r\n                const example = parsedSchema.examples[0];\r\n                expect(example.user).toBeDefined();\r\n                expect(example.settings).toBeDefined();\r\n            }\r\n        });\r\n\r\n        it('should generate schema with descriptions', async () => {\r\n            const schema = await generator.generateSchema(mockJsonData, {\r\n                includeDescriptions: true\r\n            });\r\n\r\n            const parsedSchema = JSON.parse(schema);\r\n            // 验证描述字段\r\n            expect(parsedSchema.properties.user.description).toBeDefined();\r\n            expect(parsedSchema.properties.settings.description).toBeDefined();\r\n        });\r\n\r\n        it('should handle complex nested objects', async () => {\r\n            const complexData = {\r\n                data: {\r\n                    items: [\r\n                        { id: 1, value: 'test' },\r\n                        { id: 2, value: 'test2' }\r\n                    ],\r\n                    metadata: {\r\n                        created: '2025-01-16T14:34:08+08:00',\r\n                        tags: ['tag1', 'tag2']\r\n                    }\r\n                }\r\n            };\r\n\r\n            const schema = await generator.generateSchema(complexData);\r\n            const parsedSchema = JSON.parse(schema);\r\n            \r\n            expect(parsedSchema.properties.data).toBeDefined();\r\n            expect(parsedSchema.properties.data.properties.items).toBeDefined();\r\n            expect(parsedSchema.properties.data.properties.metadata).toBeDefined();\r\n        });\r\n    });\r\n\r\n    describe('DeepSeek Service Integration', () => {\r\n        let service: DeepSeekService;\r\n\r\n        beforeEach(() => {\r\n            service = new DeepSeekService(mockConfig);\r\n        });\r\n\r\n        it('should generate field descriptions', async () => {\r\n            const descriptions = await service.generateFieldDescriptions(mockJsonData);\r\n            expect(descriptions).toBeDefined();\r\n            expect(descriptions['user.name']).toBeDefined();\r\n            expect(descriptions['user.email']).toBeDefined();\r\n        });\r\n\r\n        it('should generate examples', async () => {\r\n            const schema = await service.generateSchema(mockJsonData);\r\n            const examples = await service.generateExamples(schema);\r\n            \r\n            expect(examples).toBeDefined();\r\n            expect(examples.user).toBeDefined();\r\n            expect(examples.settings).toBeDefined();\r\n        });\r\n\r\n        it('should handle errors gracefully', async () => {\r\n            const invalidJson = '{invalid json}';\r\n            await expect(service.generateSchema(invalidJson))\r\n                .rejects.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('Caching Behavior', () => {\r\n        it('should cache schema generation results', async () => {\r\n            const generator = json.createSchemaGenerator({\r\n                useAI: true,\r\n                deepseek: mockConfig,\r\n                caching: true\r\n            });\r\n\r\n            // 第一次生成\r\n            const schema1 = await generator.generateSchema(mockJsonData);\r\n            \r\n            // 第二次生成（应该使用缓存）\r\n            const schema2 = await generator.generateSchema(mockJsonData);\r\n\r\n            expect(schema1).toBe(schema2);\r\n        });\r\n\r\n        it('should respect cache settings', async () => {\r\n            const generator = json.createSchemaGenerator({\r\n                useAI: true,\r\n                deepseek: mockConfig,\r\n                caching: false\r\n            });\r\n\r\n            // 禁用缓存时，每次生成的 Schema 可能略有不同\r\n            const schema1 = await generator.generateSchema(mockJsonData);\r\n            const schema2 = await generator.generateSchema(mockJsonData);\r\n\r\n            // 由于 AI 生成的内容可能略有差异，我们只比较基本结构\r\n            const parsed1 = JSON.parse(schema1);\r\n            const parsed2 = JSON.parse(schema2);\r\n            expect(parsed1.$schema).toBe(parsed2.$schema);\r\n            expect(Object.keys(parsed1.properties)).toEqual(\r\n                Object.keys(parsed2.properties)\r\n            );\r\n        });\r\n    });\r\n});\r\n"],"version":3}
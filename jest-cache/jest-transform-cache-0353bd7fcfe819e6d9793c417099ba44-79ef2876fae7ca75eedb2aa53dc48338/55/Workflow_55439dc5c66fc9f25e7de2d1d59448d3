e61b79461f07944e0790c3ebce104ebc
"use strict";

/* istanbul ignore next */
function cov_1a31t1lzli() {
  var path = "C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\Workflow.ts";
  var hash = "b312be9a4840f5b7c63899a603b27516a169284b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\Workflow.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 48
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "4": {
        start: {
          line: 6,
          column: 31
        },
        end: {
          line: 6,
          column: 64
        }
      },
      "5": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "6": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 42
        }
      },
      "7": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 34
        }
      },
      "8": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 54
        }
      },
      "9": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 49
        }
      },
      "10": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 57
        }
      },
      "11": {
        start: {
          line: 13,
          column: 26
        },
        end: {
          line: 13,
          column: 54
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 31
        }
      },
      "13": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 31
        }
      },
      "14": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 31
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 37
        }
      },
      "16": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 32
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 106
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 64
        }
      },
      "19": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 75
        }
      },
      "20": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 61
        }
      },
      "21": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 77
        }
      },
      "22": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 46
        }
      },
      "23": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "24": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 84
        }
      },
      "25": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 26
        }
      },
      "26": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "27": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 91
        }
      },
      "28": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 23
        }
      },
      "29": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "30": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 35
        }
      },
      "31": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 33
        }
      },
      "32": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 41
        }
      },
      "33": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 20
        }
      },
      "34": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "35": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 39
        }
      },
      "36": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 20
        }
      },
      "37": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "38": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 87
        }
      },
      "39": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "40": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 85
        }
      },
      "41": {
        start: {
          line: 88,
          column: 22
        },
        end: {
          line: 88,
          column: 48
        }
      },
      "42": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 23
        }
      },
      "43": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 36
        }
      },
      "44": {
        start: {
          line: 92,
          column: 23
        },
        end: {
          line: 92,
          column: 109
        }
      },
      "45": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "46": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 111
        }
      },
      "47": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 20
        }
      },
      "48": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 41
        }
      },
      "49": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 20
        }
      },
      "50": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 63
        }
      },
      "51": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 40
        }
      },
      "52": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "53": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 36
        }
      },
      "54": {
        start: {
          line: 118,
          column: 35
        },
        end: {
          line: 118,
          column: 110
        }
      },
      "55": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "56": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 121,
          column: 51
        }
      },
      "57": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 123,
          column: 29
        }
      },
      "58": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 29
        }
      },
      "59": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 129,
          column: 17
        }
      },
      "60": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 125,
          column: 48
        }
      },
      "61": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 71
        }
      },
      "62": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 45
        }
      },
      "63": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 59
        }
      },
      "64": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 24
        }
      },
      "65": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "66": {
        start: {
          line: 141,
          column: 32
        },
        end: {
          line: 141,
          column: 68
        }
      },
      "67": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "68": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 76
        }
      },
      "69": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "70": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 59
        }
      },
      "71": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 72
        }
      },
      "72": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 93
        }
      },
      "73": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 91
        }
      },
      "74": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 85
        }
      },
      "75": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 65
        }
      },
      "76": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 103
        }
      },
      "77": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "78": {
        start: {
          line: 167,
          column: 32
        },
        end: {
          line: 167,
          column: 105
        }
      },
      "79": {
        start: {
          line: 167,
          column: 80
        },
        end: {
          line: 167,
          column: 104
        }
      },
      "80": {
        start: {
          line: 168,
          column: 32
        },
        end: {
          line: 168,
          column: 54
        }
      },
      "81": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "82": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 105
        }
      },
      "83": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "84": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "85": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 110
        }
      },
      "86": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "87": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 181,
          column: 17
        }
      },
      "88": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 112
        }
      },
      "89": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 63
        }
      },
      "90": {
        start: {
          line: 194,
          column: 21
        },
        end: {
          line: 194,
          column: 43
        }
      },
      "91": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "92": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "93": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 55
        }
      },
      "94": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 23
        }
      },
      "95": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 90
        }
      },
      "96": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "97": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "98": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 46
        }
      },
      "99": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 23
        }
      },
      "100": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 80
        }
      },
      "101": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 219,
          column: 11
        }
      },
      "102": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 52
        }
      },
      "103": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "104": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "105": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 46
        }
      },
      "106": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 23
        }
      },
      "107": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 80
        }
      },
      "108": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 95
        }
      },
      "109": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "110": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 244,
          column: 47
        }
      },
      "111": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 246,
          column: 30
        }
      },
      "112": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 30
        }
      },
      "113": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "114": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 54
        }
      },
      "115": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 38
        }
      },
      "116": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "117": {
        start: {
          line: 258,
          column: 27
        },
        end: {
          line: 258,
          column: 70
        }
      },
      "118": {
        start: {
          line: 259,
          column: 37
        },
        end: {
          line: 259,
          column: 76
        }
      },
      "119": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "120": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 55
        }
      },
      "121": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 55
        }
      },
      "122": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "123": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 41
        }
      },
      "124": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 22
        }
      },
      "125": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "126": {
        start: {
          line: 275,
          column: 29
        },
        end: {
          line: 275,
          column: 49
        }
      },
      "127": {
        start: {
          line: 276,
          column: 27
        },
        end: {
          line: 276,
          column: 51
        }
      },
      "128": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 278,
          column: 30
        }
      },
      "129": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 30
        }
      },
      "130": {
        start: {
          line: 280,
          column: 21
        },
        end: {
          line: 280,
          column: 60
        }
      },
      "131": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "132": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 52
        }
      },
      "133": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "134": {
        start: {
          line: 287,
          column: 29
        },
        end: {
          line: 287,
          column: 49
        }
      },
      "135": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 45
        }
      },
      "136": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 22
        }
      },
      "137": {
        start: {
          line: 294,
          column: 32
        },
        end: {
          line: 294,
          column: 69
        }
      },
      "138": {
        start: {
          line: 295,
          column: 27
        },
        end: {
          line: 295,
          column: 48
        }
      },
      "139": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 303,
          column: 10
        }
      },
      "140": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "141": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 125
        }
      },
      "142": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "143": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 317,
          column: 13
        }
      },
      "144": {
        start: {
          line: 313,
          column: 33
        },
        end: {
          line: 313,
          column: 49
        }
      },
      "145": {
        start: {
          line: 314,
          column: 31
        },
        end: {
          line: 314,
          column: 55
        }
      },
      "146": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 316,
          column: 34
        }
      },
      "147": {
        start: {
          line: 316,
          column: 20
        },
        end: {
          line: 316,
          column: 34
        }
      },
      "148": {
        start: {
          line: 318,
          column: 27
        },
        end: {
          line: 318,
          column: 76
        }
      },
      "149": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 323,
          column: 13
        }
      },
      "150": {
        start: {
          line: 321,
          column: 33
        },
        end: {
          line: 321,
          column: 49
        }
      },
      "151": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 49
        }
      },
      "152": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 26
        }
      },
      "153": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 75
        }
      },
      "154": {
        start: {
          line: 331,
          column: 0
        },
        end: {
          line: 331,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 7
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 29
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 26
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 54
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 19
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 70
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 22
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 81
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 21
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 102
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 25
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 111
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 23
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 138
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 23
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 164
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 167,
            column: 69
          },
          end: {
            line: 167,
            column: 70
          }
        },
        loc: {
          start: {
            line: 167,
            column: 80
          },
          end: {
            line: 167,
            column: 104
          }
        },
        line: 167
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 50
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 191
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 46
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 226
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 241
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 20
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 272
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 33
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 293
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        loc: {
          start: {
            line: 306,
            column: 45
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 306
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "5": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "6": {
        loc: {
          start: {
            line: 88,
            column: 22
          },
          end: {
            line: 88,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 22
          },
          end: {
            line: 88,
            column: 42
          }
        }, {
          start: {
            line: 88,
            column: 46
          },
          end: {
            line: 88,
            column: 48
          }
        }],
        line: 88
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 123,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 123,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "9": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "10": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "11": {
        loc: {
          start: {
            line: 151,
            column: 42
          },
          end: {
            line: 151,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 69
          },
          end: {
            line: 151,
            column: 78
          }
        }, {
          start: {
            line: 151,
            column: 81
          },
          end: {
            line: 151,
            column: 91
          }
        }],
        line: 151
      },
      "12": {
        loc: {
          start: {
            line: 152,
            column: 41
          },
          end: {
            line: 152,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 67
          },
          end: {
            line: 152,
            column: 76
          }
        }, {
          start: {
            line: 152,
            column: 79
          },
          end: {
            line: 152,
            column: 89
          }
        }],
        line: 152
      },
      "13": {
        loc: {
          start: {
            line: 153,
            column: 38
          },
          end: {
            line: 153,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 153,
            column: 61
          },
          end: {
            line: 153,
            column: 70
          }
        }, {
          start: {
            line: 153,
            column: 73
          },
          end: {
            line: 153,
            column: 83
          }
        }],
        line: 153
      },
      "14": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "15": {
        loc: {
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 169,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 169,
            column: 28
          }
        }, {
          start: {
            line: 169,
            column: 32
          },
          end: {
            line: 169,
            column: 44
          }
        }],
        line: 169
      },
      "16": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "17": {
        loc: {
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "18": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "19": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "20": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 246,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 246,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "21": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        }, {
          start: {
            line: 253,
            column: 13
          },
          end: {
            line: 255,
            column: 9
          }
        }],
        line: 250
      },
      "22": {
        loc: {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "23": {
        loc: {
          start: {
            line: 258,
            column: 27
          },
          end: {
            line: 258,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 27
          },
          end: {
            line: 258,
            column: 64
          }
        }, {
          start: {
            line: 258,
            column: 68
          },
          end: {
            line: 258,
            column: 70
          }
        }],
        line: 258
      },
      "24": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "25": {
        loc: {
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 260,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 260,
            column: 39
          }
        }, {
          start: {
            line: 260,
            column: 43
          },
          end: {
            line: 260,
            column: 72
          }
        }],
        line: 260
      },
      "26": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "27": {
        loc: {
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "28": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 278,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 278,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "29": {
        loc: {
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "30": {
        loc: {
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "31": {
        loc: {
          start: {
            line: 299,
            column: 25
          },
          end: {
            line: 302,
            column: 34
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 299,
            column: 52
          },
          end: {
            line: 302,
            column: 13
          }
        }, {
          start: {
            line: 302,
            column: 16
          },
          end: {
            line: 302,
            column: 34
          }
        }],
        line: 299
      },
      "32": {
        loc: {
          start: {
            line: 306,
            column: 31
          },
          end: {
            line: 306,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 306,
            column: 41
          },
          end: {
            line: 306,
            column: 43
          }
        }],
        line: 306
      },
      "33": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "34": {
        loc: {
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "35": {
        loc: {
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 316,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 316,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "36": {
        loc: {
          start: {
            line: 320,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\Workflow.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\Workflow.ts"],
      sourcesContent: ["import { JsonSageAutoDetector } from './AutoDetector';\r\nimport { ProjectAnalyzer } from './ProjectAnalyzer';\r\nimport { PerformanceOptimizer } from './PerformanceOptimizer';\r\nimport { JsonCompressor } from './compression';\r\nimport { JsonValidator } from './validator';\r\nimport { SmartCache } from './cache';\r\nimport { DeepSeekService, DeepSeekConfig, SchemaGenerationOptions } from './DeepSeekService';\r\nimport { DependencyUtils } from '../utils/NodeUtils';\r\nimport { WorkflowError } from './errors/WorkflowError';\r\nimport { BaseNode } from './BaseNode';\r\nimport { WorkflowContext } from './WorkflowContext';\r\n\r\ninterface WorkflowOptions {\r\n    watch: boolean;\r\n    autoProcess: boolean;\r\n    generateTypes: boolean;\r\n    autoOptimize: boolean;\r\n    compression?: boolean;\r\n    validation?: boolean;\r\n    caching?: boolean;\r\n    deepseek?: DeepSeekConfig;\r\n    /**\r\n     * Maximum execution time for the workflow in milliseconds\r\n     */\r\n    timeout?: number;\r\n    /**\r\n     * Maximum number of retries for failed nodes\r\n     */\r\n    maxRetries?: number;\r\n    /**\r\n     * Delay between retries in milliseconds\r\n     */\r\n    retryDelay?: number;\r\n}\r\n\r\n/**\r\n * Represents a JSON processing workflow with advanced features\r\n */\r\nexport class JsonSageWorkflow {\r\n    private detector: JsonSageAutoDetector;\r\n    private analyzer: ProjectAnalyzer;\r\n    private optimizer: PerformanceOptimizer;\r\n    private compressor: JsonCompressor;\r\n    private validator: JsonValidator;\r\n    private cache: SmartCache<any>;\r\n    private deepseek?: DeepSeekService;\r\n    \r\n    // Node management\r\n    private nodes: Map<string, BaseNode> = new Map();\r\n    private edges: Map<string, string[]> = new Map();\r\n    private nodeConfigs: Map<string, any> = new Map();\r\n    \r\n    // Error handling\r\n    private errorHandlers: Array<(error: Error, context: WorkflowContext) => Promise<void>> = [];\r\n\r\n    constructor(private options: WorkflowOptions = {\r\n        watch: true,\r\n        autoProcess: true,\r\n        generateTypes: true,\r\n        autoOptimize: true,\r\n        compression: true,\r\n        validation: true,\r\n        caching: true,\r\n        timeout: 30000,\r\n        maxRetries: 3,\r\n        retryDelay: 1000\r\n    }) {\r\n        this.detector = new JsonSageAutoDetector({ generateTypes: options.generateTypes });\r\n        this.analyzer = new ProjectAnalyzer();\r\n        this.optimizer = new PerformanceOptimizer();\r\n        this.compressor = new JsonCompressor();\r\n        this.validator = new JsonValidator({ autoRepair: true });\r\n        this.cache = new SmartCache();\r\n        \r\n        if (options.deepseek) {\r\n            this.deepseek = new DeepSeekService(options.deepseek);\r\n        }\r\n        \r\n        this.initialize();\r\n    }\r\n\r\n    /**\r\n     * Adds a single node to the workflow\r\n     * @param id - Node identifier\r\n     * @param node - Node instance\r\n     * @param config - Node configuration\r\n     */\r\n    use(id: string, node: BaseNode, config?: any): this {\r\n        if (this.nodes.has(id)) {\r\n            throw new WorkflowError(`Node with ID '${id}' already exists`);\r\n        }\r\n        \r\n        node.setId(id);\r\n        if (config) {\r\n            node.setConfig(config);\r\n        }\r\n        \r\n        this.nodes.set(id, node);\r\n        this.nodeConfigs.set(id, config);\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds multiple nodes to the workflow\r\n     * @param nodes - Array of node configurations\r\n     */\r\n    useMany(nodes: Array<{ id: string; node: BaseNode; config?: any }>): this {\r\n        for (const { id, node, config } of nodes) {\r\n            this.use(id, node, config);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a connection between nodes\r\n     * @param from - Source node ID\r\n     * @param to - Target node ID\r\n     */\r\n    connect(from: string, to: string): this {\r\n        if (!this.nodes.has(from)) {\r\n            throw new WorkflowError(`Source node '${from}' not found`);\r\n        }\r\n        if (!this.nodes.has(to)) {\r\n            throw new WorkflowError(`Target node '${to}' not found`);\r\n        }\r\n        \r\n        const edges = this.edges.get(from) || [];\r\n        edges.push(to);\r\n        this.edges.set(from, edges);\r\n        \r\n        // Check for circular dependencies\r\n        const cycles = DependencyUtils.detectCircularDependencies(Object.fromEntries(this.edges));\r\n        if (cycles.length > 0) {\r\n            throw new WorkflowError(`Circular dependency detected: ${cycles[0].join(' -> ')}`);\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a global error handler\r\n     * @param handler - Error handler function\r\n     */\r\n    onError(handler: (error: Error, context: WorkflowContext) => Promise<void>): this {\r\n        this.errorHandlers.push(handler);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Executes the workflow\r\n     * @param input - Input data\r\n     * @returns Processing result\r\n     */\r\n    async execute(input: any): Promise<any> {\r\n        const context = new WorkflowContext();\r\n        context.setData('input', input);\r\n        \r\n        try {\r\n            // Validate workflow structure\r\n            this.validateWorkflow();\r\n            \r\n            // Get execution order\r\n            const executionOrder = DependencyUtils.topologicalSort(\r\n                Object.fromEntries(this.edges)\r\n            );\r\n            \r\n            // Execute nodes in order\r\n            for (const nodeId of executionOrder) {\r\n                const node = this.nodes.get(nodeId);\r\n                if (!node) continue;\r\n                \r\n                try {\r\n                    await node.execute(context);\r\n                } catch (error) {\r\n                    await this.handleNodeError(error as Error, nodeId, context);\r\n                }\r\n            }\r\n            \r\n            return context.getData('output');\r\n        } catch (error) {\r\n            await this.handleWorkflowError(error as Error, context);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async initialize() {\r\n        try {\r\n            // \u5206\u6790\u9879\u76EE\u7ED3\u6784\r\n            const projectInfo = await this.analyzer.analyzeProject();\r\n            \r\n            // \u8BBE\u7F6E\u81EA\u52A8\u76D1\u63A7\r\n            if (this.options.watch) {\r\n                this.detector.watchDirectories(projectInfo.jsonDirectories);\r\n            }\r\n\r\n            // \u6027\u80FD\u4F18\u5316\r\n            if (this.options.autoOptimize) {\r\n                await this.optimizer.optimize(projectInfo);\r\n            }\r\n\r\n            console.log('JsonSage initialized with advanced features:');\r\n            console.log('- Compression:', this.options.compression ? 'enabled' : 'disabled');\r\n            console.log('- Validation:', this.options.validation ? 'enabled' : 'disabled');\r\n            console.log('- Caching:', this.options.caching ? 'enabled' : 'disabled');\r\n        } catch (error) {\r\n            console.error('Error initializing JsonSage:', error);\r\n            throw new WorkflowError('Failed to initialize workflow', { cause: error });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates workflow configuration\r\n     * @throws {WorkflowError} If validation fails\r\n     */\r\n    private validateWorkflow(): void {\r\n        // Check for isolated nodes\r\n        for (const [nodeId] of this.nodes) {\r\n            const hasIncoming = Array.from(this.edges.values()).some(\r\n                targets => targets.includes(nodeId)\r\n            );\r\n            const hasOutgoing = this.edges.has(nodeId);\r\n            \r\n            if (!hasIncoming && !hasOutgoing) {\r\n                throw new WorkflowError(`Node '${nodeId}' is isolated (no connections)`);\r\n            }\r\n        }\r\n        \r\n        // Check for missing nodes in edges\r\n        for (const [from, targets] of this.edges) {\r\n            if (!this.nodes.has(from)) {\r\n                throw new WorkflowError(`Edge references non-existent source node '${from}'`);\r\n            }\r\n            \r\n            for (const to of targets) {\r\n                if (!this.nodes.has(to)) {\r\n                    throw new WorkflowError(`Edge references non-existent target node '${to}'`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles node execution errors\r\n     * @param error - Error that occurred\r\n     * @param nodeId - ID of the failed node\r\n     * @param context - Workflow context\r\n     */\r\n    private async handleNodeError(\r\n        error: Error,\r\n        nodeId: string,\r\n        context: WorkflowContext\r\n    ): Promise<void> {\r\n        context.log.error(`Error in node '${nodeId}':`, error);\r\n        \r\n        // Try node-specific error handler\r\n        const node = this.nodes.get(nodeId);\r\n        if (node) {\r\n            try {\r\n                await node.handleError(error, context);\r\n                return;\r\n            } catch (handlerError) {\r\n                // Node error handler failed, continue with global handlers\r\n                context.log.error(\r\n                    `Node '${nodeId}' error handler failed:`,\r\n                    handlerError\r\n                );\r\n            }\r\n        }\r\n        \r\n        // Try global error handlers\r\n        for (const handler of this.errorHandlers) {\r\n            try {\r\n                await handler(error, context);\r\n                return;\r\n            } catch (handlerError) {\r\n                context.log.error('Global error handler failed:', handlerError);\r\n            }\r\n        }\r\n        \r\n        // If all handlers fail, throw the error\r\n        throw new WorkflowError(`Node '${nodeId}' execution failed`, {\r\n            cause: error,\r\n            nodeId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles workflow-level errors\r\n     * @param error - Error that occurred\r\n     * @param context - Workflow context\r\n     */\r\n    private async handleWorkflowError(\r\n        error: Error,\r\n        context: WorkflowContext\r\n    ): Promise<void> {\r\n        context.log.error('Workflow error:', error);\r\n        \r\n        // Try global error handlers\r\n        for (const handler of this.errorHandlers) {\r\n            try {\r\n                await handler(error, context);\r\n                return;\r\n            } catch (handlerError) {\r\n                context.log.error('Global error handler failed:', handlerError);\r\n            }\r\n        }\r\n        \r\n        // If all handlers fail, throw the error\r\n        throw new WorkflowError('Workflow execution failed', { cause: error });\r\n    }\r\n\r\n    parse(data: string) {\r\n        // \u68C0\u67E5\u7F13\u5B58\r\n        if (this.options.caching) {\r\n            const cached = this.cache.get(data);\r\n            if (cached) return cached;\r\n        }\r\n\r\n        let result;\r\n        \r\n        // \u89E3\u538B\u7F29\uFF08\u5982\u679C\u9700\u8981\uFF09\r\n        if (this.options.compression) {\r\n            result = this.compressor.decompress(data);\r\n        } else {\r\n            result = JSON.parse(data);\r\n        }\r\n\r\n        // \u9A8C\u8BC1\u6570\u636E\r\n        if (this.options.validation) {\r\n            const schema = this.detector.getTypeDefinition(data) || {};\r\n            const validationResult = this.validator.validate(result, schema);\r\n            \r\n            if (!validationResult.valid && validationResult.repairedData) {\r\n                result = validationResult.repairedData;\r\n            }\r\n        }\r\n\r\n        // \u4F18\u5316\u5904\u7406\r\n        result = this.optimizer.optimizedParse(result);\r\n\r\n        // \u7F13\u5B58\u7ED3\u679C\r\n        if (this.options.caching) {\r\n            this.cache.set(data, result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    stringify(data: any) {\r\n        // \u68C0\u67E5\u7F13\u5B58\r\n        if (this.options.caching) {\r\n            const cacheKey = JSON.stringify(data);\r\n            const cached = this.cache.get(cacheKey);\r\n            if (cached) return cached;\r\n        }\r\n\r\n        let result = this.optimizer.optimizedStringify(data);\r\n\r\n        // \u538B\u7F29\uFF08\u5982\u679C\u9700\u8981\uFF09\r\n        if (this.options.compression) {\r\n            result = this.compressor.compress(data);\r\n        }\r\n\r\n        // \u7F13\u5B58\u7ED3\u679C\r\n        if (this.options.caching) {\r\n            const cacheKey = JSON.stringify(data);\r\n            this.cache.set(cacheKey, result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // \u83B7\u53D6\u6027\u80FD\u62A5\u544A\r\n    async getPerformanceReport() {\r\n        const optimizerReport = await this.optimizer.generateReport();\r\n        const cacheStats = this.cache.getStats();\r\n        \r\n        return {\r\n            ...optimizerReport,\r\n            cache: cacheStats,\r\n            compression: this.options.compression ? {\r\n                enabled: true,\r\n                analysis: this.compressor.analyzeCompression(optimizerReport)\r\n            } : { enabled: false }\r\n        };\r\n    }\r\n\r\n    // \u65B0\u589E\uFF1A\u4F7F\u7528 DeepSeek AI \u751F\u6210 JSON Schema\r\n    async generateSchema(json: string, options: SchemaGenerationOptions = {}): Promise<string> {\r\n        if (!this.deepseek) {\r\n            throw new Error('DeepSeek service is not configured. Please provide DeepSeek configuration in the constructor.');\r\n        }\r\n\r\n        try {\r\n            // \u68C0\u67E5\u7F13\u5B58\r\n            if (this.options.caching) {\r\n                const cacheKey = `schema:${json}`;\r\n                const cached = this.cache.get(cacheKey);\r\n                if (cached) return cached;\r\n            }\r\n\r\n            const schema = await this.deepseek.generateSchema(json, options);\r\n\r\n            // \u7F13\u5B58\u7ED3\u679C\r\n            if (this.options.caching) {\r\n                const cacheKey = `schema:${json}`;\r\n                this.cache.set(cacheKey, schema);\r\n            }\r\n\r\n            return schema;\r\n        } catch (error) {\r\n            throw new Error(`Failed to generate schema: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b312be9a4840f5b7c63899a603b27516a169284b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1a31t1lzli = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1a31t1lzli();
cov_1a31t1lzli().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1a31t1lzli().s[1]++;
exports.JsonSageWorkflow = void 0;
const AutoDetector_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[2]++, require("./AutoDetector"));
const ProjectAnalyzer_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[3]++, require("./ProjectAnalyzer"));
const PerformanceOptimizer_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[4]++, require("./PerformanceOptimizer"));
const compression_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[5]++, require("./compression"));
const validator_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[6]++, require("./validator"));
const cache_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[7]++, require("./cache"));
const DeepSeekService_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[8]++, require("./DeepSeekService"));
const NodeUtils_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[9]++, require("../utils/NodeUtils"));
const WorkflowError_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[10]++, require("./errors/WorkflowError"));
const WorkflowContext_1 =
/* istanbul ignore next */
(cov_1a31t1lzli().s[11]++, require("./WorkflowContext"));
/**
 * Represents a JSON processing workflow with advanced features
 */
class JsonSageWorkflow {
  constructor(options =
  /* istanbul ignore next */
  (cov_1a31t1lzli().b[0][0]++, {
    watch: true,
    autoProcess: true,
    generateTypes: true,
    autoOptimize: true,
    compression: true,
    validation: true,
    caching: true,
    timeout: 30000,
    maxRetries: 3,
    retryDelay: 1000
  })) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[0]++;
    cov_1a31t1lzli().s[12]++;
    this.options = options;
    // Node management
    /* istanbul ignore next */
    cov_1a31t1lzli().s[13]++;
    this.nodes = new Map();
    /* istanbul ignore next */
    cov_1a31t1lzli().s[14]++;
    this.edges = new Map();
    /* istanbul ignore next */
    cov_1a31t1lzli().s[15]++;
    this.nodeConfigs = new Map();
    // Error handling
    /* istanbul ignore next */
    cov_1a31t1lzli().s[16]++;
    this.errorHandlers = [];
    /* istanbul ignore next */
    cov_1a31t1lzli().s[17]++;
    this.detector = new AutoDetector_1.JsonSageAutoDetector({
      generateTypes: options.generateTypes
    });
    /* istanbul ignore next */
    cov_1a31t1lzli().s[18]++;
    this.analyzer = new ProjectAnalyzer_1.ProjectAnalyzer();
    /* istanbul ignore next */
    cov_1a31t1lzli().s[19]++;
    this.optimizer = new PerformanceOptimizer_1.PerformanceOptimizer();
    /* istanbul ignore next */
    cov_1a31t1lzli().s[20]++;
    this.compressor = new compression_1.JsonCompressor();
    /* istanbul ignore next */
    cov_1a31t1lzli().s[21]++;
    this.validator = new validator_1.JsonValidator({
      autoRepair: true
    });
    /* istanbul ignore next */
    cov_1a31t1lzli().s[22]++;
    this.cache = new cache_1.SmartCache();
    /* istanbul ignore next */
    cov_1a31t1lzli().s[23]++;
    if (options.deepseek) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[1][0]++;
      cov_1a31t1lzli().s[24]++;
      this.deepseek = new DeepSeekService_1.DeepSeekService(options.deepseek);
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[1][1]++;
    }
    cov_1a31t1lzli().s[25]++;
    this.initialize();
  }
  /**
   * Adds a single node to the workflow
   * @param id - Node identifier
   * @param node - Node instance
   * @param config - Node configuration
   */
  use(id, node, config) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[1]++;
    cov_1a31t1lzli().s[26]++;
    if (this.nodes.has(id)) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[2][0]++;
      cov_1a31t1lzli().s[27]++;
      throw new WorkflowError_1.WorkflowError(`Node with ID '${id}' already exists`);
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[2][1]++;
    }
    cov_1a31t1lzli().s[28]++;
    node.setId(id);
    /* istanbul ignore next */
    cov_1a31t1lzli().s[29]++;
    if (config) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[3][0]++;
      cov_1a31t1lzli().s[30]++;
      node.setConfig(config);
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[3][1]++;
    }
    cov_1a31t1lzli().s[31]++;
    this.nodes.set(id, node);
    /* istanbul ignore next */
    cov_1a31t1lzli().s[32]++;
    this.nodeConfigs.set(id, config);
    /* istanbul ignore next */
    cov_1a31t1lzli().s[33]++;
    return this;
  }
  /**
   * Adds multiple nodes to the workflow
   * @param nodes - Array of node configurations
   */
  useMany(nodes) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[2]++;
    cov_1a31t1lzli().s[34]++;
    for (const {
      id,
      node,
      config
    } of nodes) {
      /* istanbul ignore next */
      cov_1a31t1lzli().s[35]++;
      this.use(id, node, config);
    }
    /* istanbul ignore next */
    cov_1a31t1lzli().s[36]++;
    return this;
  }
  /**
   * Adds a connection between nodes
   * @param from - Source node ID
   * @param to - Target node ID
   */
  connect(from, to) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[3]++;
    cov_1a31t1lzli().s[37]++;
    if (!this.nodes.has(from)) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[4][0]++;
      cov_1a31t1lzli().s[38]++;
      throw new WorkflowError_1.WorkflowError(`Source node '${from}' not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[4][1]++;
    }
    cov_1a31t1lzli().s[39]++;
    if (!this.nodes.has(to)) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[5][0]++;
      cov_1a31t1lzli().s[40]++;
      throw new WorkflowError_1.WorkflowError(`Target node '${to}' not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[5][1]++;
    }
    const edges =
    /* istanbul ignore next */
    (cov_1a31t1lzli().s[41]++,
    /* istanbul ignore next */
    (cov_1a31t1lzli().b[6][0]++, this.edges.get(from)) ||
    /* istanbul ignore next */
    (cov_1a31t1lzli().b[6][1]++, []));
    /* istanbul ignore next */
    cov_1a31t1lzli().s[42]++;
    edges.push(to);
    /* istanbul ignore next */
    cov_1a31t1lzli().s[43]++;
    this.edges.set(from, edges);
    // Check for circular dependencies
    const cycles =
    /* istanbul ignore next */
    (cov_1a31t1lzli().s[44]++, NodeUtils_1.DependencyUtils.detectCircularDependencies(Object.fromEntries(this.edges)));
    /* istanbul ignore next */
    cov_1a31t1lzli().s[45]++;
    if (cycles.length > 0) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[7][0]++;
      cov_1a31t1lzli().s[46]++;
      throw new WorkflowError_1.WorkflowError(`Circular dependency detected: ${cycles[0].join(' -> ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[7][1]++;
    }
    cov_1a31t1lzli().s[47]++;
    return this;
  }
  /**
   * Adds a global error handler
   * @param handler - Error handler function
   */
  onError(handler) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[4]++;
    cov_1a31t1lzli().s[48]++;
    this.errorHandlers.push(handler);
    /* istanbul ignore next */
    cov_1a31t1lzli().s[49]++;
    return this;
  }
  /**
   * Executes the workflow
   * @param input - Input data
   * @returns Processing result
   */
  async execute(input) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[5]++;
    const context =
    /* istanbul ignore next */
    (cov_1a31t1lzli().s[50]++, new WorkflowContext_1.WorkflowContext());
    /* istanbul ignore next */
    cov_1a31t1lzli().s[51]++;
    context.setData('input', input);
    /* istanbul ignore next */
    cov_1a31t1lzli().s[52]++;
    try {
      /* istanbul ignore next */
      cov_1a31t1lzli().s[53]++;
      // Validate workflow structure
      this.validateWorkflow();
      // Get execution order
      const executionOrder =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[54]++, NodeUtils_1.DependencyUtils.topologicalSort(Object.fromEntries(this.edges)));
      // Execute nodes in order
      /* istanbul ignore next */
      cov_1a31t1lzli().s[55]++;
      for (const nodeId of executionOrder) {
        const node =
        /* istanbul ignore next */
        (cov_1a31t1lzli().s[56]++, this.nodes.get(nodeId));
        /* istanbul ignore next */
        cov_1a31t1lzli().s[57]++;
        if (!node) {
          /* istanbul ignore next */
          cov_1a31t1lzli().b[8][0]++;
          cov_1a31t1lzli().s[58]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1a31t1lzli().b[8][1]++;
        }
        cov_1a31t1lzli().s[59]++;
        try {
          /* istanbul ignore next */
          cov_1a31t1lzli().s[60]++;
          await node.execute(context);
        } catch (error) {
          /* istanbul ignore next */
          cov_1a31t1lzli().s[61]++;
          await this.handleNodeError(error, nodeId, context);
        }
      }
      /* istanbul ignore next */
      cov_1a31t1lzli().s[62]++;
      return context.getData('output');
    } catch (error) {
      /* istanbul ignore next */
      cov_1a31t1lzli().s[63]++;
      await this.handleWorkflowError(error, context);
      /* istanbul ignore next */
      cov_1a31t1lzli().s[64]++;
      throw error;
    }
  }
  async initialize() {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[6]++;
    cov_1a31t1lzli().s[65]++;
    try {
      // 分析项目结构
      const projectInfo =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[66]++, await this.analyzer.analyzeProject());
      // 设置自动监控
      /* istanbul ignore next */
      cov_1a31t1lzli().s[67]++;
      if (this.options.watch) {
        /* istanbul ignore next */
        cov_1a31t1lzli().b[9][0]++;
        cov_1a31t1lzli().s[68]++;
        this.detector.watchDirectories(projectInfo.jsonDirectories);
      } else
      /* istanbul ignore next */
      {
        cov_1a31t1lzli().b[9][1]++;
      }
      // 性能优化
      cov_1a31t1lzli().s[69]++;
      if (this.options.autoOptimize) {
        /* istanbul ignore next */
        cov_1a31t1lzli().b[10][0]++;
        cov_1a31t1lzli().s[70]++;
        await this.optimizer.optimize(projectInfo);
      } else
      /* istanbul ignore next */
      {
        cov_1a31t1lzli().b[10][1]++;
      }
      cov_1a31t1lzli().s[71]++;
      console.log('JsonSage initialized with advanced features:');
      /* istanbul ignore next */
      cov_1a31t1lzli().s[72]++;
      console.log('- Compression:', this.options.compression ?
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[11][0]++, 'enabled') :
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[11][1]++, 'disabled'));
      /* istanbul ignore next */
      cov_1a31t1lzli().s[73]++;
      console.log('- Validation:', this.options.validation ?
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[12][0]++, 'enabled') :
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[12][1]++, 'disabled'));
      /* istanbul ignore next */
      cov_1a31t1lzli().s[74]++;
      console.log('- Caching:', this.options.caching ?
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[13][0]++, 'enabled') :
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[13][1]++, 'disabled'));
    } catch (error) {
      /* istanbul ignore next */
      cov_1a31t1lzli().s[75]++;
      console.error('Error initializing JsonSage:', error);
      /* istanbul ignore next */
      cov_1a31t1lzli().s[76]++;
      throw new WorkflowError_1.WorkflowError('Failed to initialize workflow', {
        cause: error
      });
    }
  }
  /**
   * Validates workflow configuration
   * @throws {WorkflowError} If validation fails
   */
  validateWorkflow() {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[7]++;
    cov_1a31t1lzli().s[77]++;
    // Check for isolated nodes
    for (const [nodeId] of this.nodes) {
      const hasIncoming =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[78]++, Array.from(this.edges.values()).some(targets => {
        /* istanbul ignore next */
        cov_1a31t1lzli().f[8]++;
        cov_1a31t1lzli().s[79]++;
        return targets.includes(nodeId);
      }));
      const hasOutgoing =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[80]++, this.edges.has(nodeId));
      /* istanbul ignore next */
      cov_1a31t1lzli().s[81]++;
      if (
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[15][0]++, !hasIncoming) &&
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[15][1]++, !hasOutgoing)) {
        /* istanbul ignore next */
        cov_1a31t1lzli().b[14][0]++;
        cov_1a31t1lzli().s[82]++;
        throw new WorkflowError_1.WorkflowError(`Node '${nodeId}' is isolated (no connections)`);
      } else
      /* istanbul ignore next */
      {
        cov_1a31t1lzli().b[14][1]++;
      }
    }
    // Check for missing nodes in edges
    /* istanbul ignore next */
    cov_1a31t1lzli().s[83]++;
    for (const [from, targets] of this.edges) {
      /* istanbul ignore next */
      cov_1a31t1lzli().s[84]++;
      if (!this.nodes.has(from)) {
        /* istanbul ignore next */
        cov_1a31t1lzli().b[16][0]++;
        cov_1a31t1lzli().s[85]++;
        throw new WorkflowError_1.WorkflowError(`Edge references non-existent source node '${from}'`);
      } else
      /* istanbul ignore next */
      {
        cov_1a31t1lzli().b[16][1]++;
      }
      cov_1a31t1lzli().s[86]++;
      for (const to of targets) {
        /* istanbul ignore next */
        cov_1a31t1lzli().s[87]++;
        if (!this.nodes.has(to)) {
          /* istanbul ignore next */
          cov_1a31t1lzli().b[17][0]++;
          cov_1a31t1lzli().s[88]++;
          throw new WorkflowError_1.WorkflowError(`Edge references non-existent target node '${to}'`);
        } else
        /* istanbul ignore next */
        {
          cov_1a31t1lzli().b[17][1]++;
        }
      }
    }
  }
  /**
   * Handles node execution errors
   * @param error - Error that occurred
   * @param nodeId - ID of the failed node
   * @param context - Workflow context
   */
  async handleNodeError(error, nodeId, context) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[9]++;
    cov_1a31t1lzli().s[89]++;
    context.log.error(`Error in node '${nodeId}':`, error);
    // Try node-specific error handler
    const node =
    /* istanbul ignore next */
    (cov_1a31t1lzli().s[90]++, this.nodes.get(nodeId));
    /* istanbul ignore next */
    cov_1a31t1lzli().s[91]++;
    if (node) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[18][0]++;
      cov_1a31t1lzli().s[92]++;
      try {
        /* istanbul ignore next */
        cov_1a31t1lzli().s[93]++;
        await node.handleError(error, context);
        /* istanbul ignore next */
        cov_1a31t1lzli().s[94]++;
        return;
      } catch (handlerError) {
        /* istanbul ignore next */
        cov_1a31t1lzli().s[95]++;
        // Node error handler failed, continue with global handlers
        context.log.error(`Node '${nodeId}' error handler failed:`, handlerError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[18][1]++;
    }
    // Try global error handlers
    cov_1a31t1lzli().s[96]++;
    for (const handler of this.errorHandlers) {
      /* istanbul ignore next */
      cov_1a31t1lzli().s[97]++;
      try {
        /* istanbul ignore next */
        cov_1a31t1lzli().s[98]++;
        await handler(error, context);
        /* istanbul ignore next */
        cov_1a31t1lzli().s[99]++;
        return;
      } catch (handlerError) {
        /* istanbul ignore next */
        cov_1a31t1lzli().s[100]++;
        context.log.error('Global error handler failed:', handlerError);
      }
    }
    // If all handlers fail, throw the error
    /* istanbul ignore next */
    cov_1a31t1lzli().s[101]++;
    throw new WorkflowError_1.WorkflowError(`Node '${nodeId}' execution failed`, {
      cause: error,
      nodeId
    });
  }
  /**
   * Handles workflow-level errors
   * @param error - Error that occurred
   * @param context - Workflow context
   */
  async handleWorkflowError(error, context) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[10]++;
    cov_1a31t1lzli().s[102]++;
    context.log.error('Workflow error:', error);
    // Try global error handlers
    /* istanbul ignore next */
    cov_1a31t1lzli().s[103]++;
    for (const handler of this.errorHandlers) {
      /* istanbul ignore next */
      cov_1a31t1lzli().s[104]++;
      try {
        /* istanbul ignore next */
        cov_1a31t1lzli().s[105]++;
        await handler(error, context);
        /* istanbul ignore next */
        cov_1a31t1lzli().s[106]++;
        return;
      } catch (handlerError) {
        /* istanbul ignore next */
        cov_1a31t1lzli().s[107]++;
        context.log.error('Global error handler failed:', handlerError);
      }
    }
    // If all handlers fail, throw the error
    /* istanbul ignore next */
    cov_1a31t1lzli().s[108]++;
    throw new WorkflowError_1.WorkflowError('Workflow execution failed', {
      cause: error
    });
  }
  parse(data) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[11]++;
    cov_1a31t1lzli().s[109]++;
    // 检查缓存
    if (this.options.caching) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[19][0]++;
      const cached =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[110]++, this.cache.get(data));
      /* istanbul ignore next */
      cov_1a31t1lzli().s[111]++;
      if (cached) {
        /* istanbul ignore next */
        cov_1a31t1lzli().b[20][0]++;
        cov_1a31t1lzli().s[112]++;
        return cached;
      } else
      /* istanbul ignore next */
      {
        cov_1a31t1lzli().b[20][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[19][1]++;
    }
    let result;
    // 解压缩（如果需要）
    /* istanbul ignore next */
    cov_1a31t1lzli().s[113]++;
    if (this.options.compression) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[21][0]++;
      cov_1a31t1lzli().s[114]++;
      result = this.compressor.decompress(data);
    } else {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[21][1]++;
      cov_1a31t1lzli().s[115]++;
      result = JSON.parse(data);
    }
    // 验证数据
    /* istanbul ignore next */
    cov_1a31t1lzli().s[116]++;
    if (this.options.validation) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[22][0]++;
      const schema =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[117]++,
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[23][0]++, this.detector.getTypeDefinition(data)) ||
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[23][1]++, {}));
      const validationResult =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[118]++, this.validator.validate(result, schema));
      /* istanbul ignore next */
      cov_1a31t1lzli().s[119]++;
      if (
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[25][0]++, !validationResult.valid) &&
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[25][1]++, validationResult.repairedData)) {
        /* istanbul ignore next */
        cov_1a31t1lzli().b[24][0]++;
        cov_1a31t1lzli().s[120]++;
        result = validationResult.repairedData;
      } else
      /* istanbul ignore next */
      {
        cov_1a31t1lzli().b[24][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[22][1]++;
    }
    // 优化处理
    cov_1a31t1lzli().s[121]++;
    result = this.optimizer.optimizedParse(result);
    // 缓存结果
    /* istanbul ignore next */
    cov_1a31t1lzli().s[122]++;
    if (this.options.caching) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[26][0]++;
      cov_1a31t1lzli().s[123]++;
      this.cache.set(data, result);
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[26][1]++;
    }
    cov_1a31t1lzli().s[124]++;
    return result;
  }
  stringify(data) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[12]++;
    cov_1a31t1lzli().s[125]++;
    // 检查缓存
    if (this.options.caching) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[27][0]++;
      const cacheKey =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[126]++, JSON.stringify(data));
      const cached =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[127]++, this.cache.get(cacheKey));
      /* istanbul ignore next */
      cov_1a31t1lzli().s[128]++;
      if (cached) {
        /* istanbul ignore next */
        cov_1a31t1lzli().b[28][0]++;
        cov_1a31t1lzli().s[129]++;
        return cached;
      } else
      /* istanbul ignore next */
      {
        cov_1a31t1lzli().b[28][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[27][1]++;
    }
    let result =
    /* istanbul ignore next */
    (cov_1a31t1lzli().s[130]++, this.optimizer.optimizedStringify(data));
    // 压缩（如果需要）
    /* istanbul ignore next */
    cov_1a31t1lzli().s[131]++;
    if (this.options.compression) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[29][0]++;
      cov_1a31t1lzli().s[132]++;
      result = this.compressor.compress(data);
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[29][1]++;
    }
    // 缓存结果
    cov_1a31t1lzli().s[133]++;
    if (this.options.caching) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[30][0]++;
      const cacheKey =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[134]++, JSON.stringify(data));
      /* istanbul ignore next */
      cov_1a31t1lzli().s[135]++;
      this.cache.set(cacheKey, result);
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[30][1]++;
    }
    cov_1a31t1lzli().s[136]++;
    return result;
  }
  // 获取性能报告
  async getPerformanceReport() {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[13]++;
    const optimizerReport =
    /* istanbul ignore next */
    (cov_1a31t1lzli().s[137]++, await this.optimizer.generateReport());
    const cacheStats =
    /* istanbul ignore next */
    (cov_1a31t1lzli().s[138]++, this.cache.getStats());
    /* istanbul ignore next */
    cov_1a31t1lzli().s[139]++;
    return {
      ...optimizerReport,
      cache: cacheStats,
      compression: this.options.compression ?
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[31][0]++, {
        enabled: true,
        analysis: this.compressor.analyzeCompression(optimizerReport)
      }) :
      /* istanbul ignore next */
      (cov_1a31t1lzli().b[31][1]++, {
        enabled: false
      })
    };
  }
  // 新增：使用 DeepSeek AI 生成 JSON Schema
  async generateSchema(json, options =
  /* istanbul ignore next */
  (cov_1a31t1lzli().b[32][0]++, {})) {
    /* istanbul ignore next */
    cov_1a31t1lzli().f[14]++;
    cov_1a31t1lzli().s[140]++;
    if (!this.deepseek) {
      /* istanbul ignore next */
      cov_1a31t1lzli().b[33][0]++;
      cov_1a31t1lzli().s[141]++;
      throw new Error('DeepSeek service is not configured. Please provide DeepSeek configuration in the constructor.');
    } else
    /* istanbul ignore next */
    {
      cov_1a31t1lzli().b[33][1]++;
    }
    cov_1a31t1lzli().s[142]++;
    try {
      /* istanbul ignore next */
      cov_1a31t1lzli().s[143]++;
      // 检查缓存
      if (this.options.caching) {
        /* istanbul ignore next */
        cov_1a31t1lzli().b[34][0]++;
        const cacheKey =
        /* istanbul ignore next */
        (cov_1a31t1lzli().s[144]++, `schema:${json}`);
        const cached =
        /* istanbul ignore next */
        (cov_1a31t1lzli().s[145]++, this.cache.get(cacheKey));
        /* istanbul ignore next */
        cov_1a31t1lzli().s[146]++;
        if (cached) {
          /* istanbul ignore next */
          cov_1a31t1lzli().b[35][0]++;
          cov_1a31t1lzli().s[147]++;
          return cached;
        } else
        /* istanbul ignore next */
        {
          cov_1a31t1lzli().b[35][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1a31t1lzli().b[34][1]++;
      }
      const schema =
      /* istanbul ignore next */
      (cov_1a31t1lzli().s[148]++, await this.deepseek.generateSchema(json, options));
      // 缓存结果
      /* istanbul ignore next */
      cov_1a31t1lzli().s[149]++;
      if (this.options.caching) {
        /* istanbul ignore next */
        cov_1a31t1lzli().b[36][0]++;
        const cacheKey =
        /* istanbul ignore next */
        (cov_1a31t1lzli().s[150]++, `schema:${json}`);
        /* istanbul ignore next */
        cov_1a31t1lzli().s[151]++;
        this.cache.set(cacheKey, schema);
      } else
      /* istanbul ignore next */
      {
        cov_1a31t1lzli().b[36][1]++;
      }
      cov_1a31t1lzli().s[152]++;
      return schema;
    } catch (error) {
      /* istanbul ignore next */
      cov_1a31t1lzli().s[153]++;
      throw new Error(`Failed to generate schema: ${error.message}`);
    }
  }
}
/* istanbul ignore next */
cov_1a31t1lzli().s[154]++;
exports.JsonSageWorkflow = JsonSageWorkflow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
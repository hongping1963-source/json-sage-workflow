{"version":3,"names":["cov_6ft3r4d70","actualCoverage","s","promises_1","require","JsonAnalyzer","constructor","options","b","maxDepth","sampleSize","inferTypes","f","analyzeJsonStructure","filePath","content","readFile","data","JSON","parse","generateSchema","error","console","depth","type","analyzeString","analyzeNumber","Array","isArray","analyzeArray","analyzeObject","value","test","format","Number","isInteger","arr","length","items","Math","min","samples","slice","itemSchemas","map","item","mergedSchema","mergeSchemas","obj","properties","required","key","Object","entries","undefined","push","schemas","types","Set","size","mergeObjectSchemas","mergeArraySchemas","anyOf","allProperties","forEach","schema","keys","add","prop","propSchemas","filter","every","includes","exports","analyzer"],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\analyzer.ts"],"sourcesContent":["import { readFile } from 'fs/promises';\r\nimport { JSONSchema7 } from 'json-schema';\r\n\r\ninterface AnalyzerOptions {\r\n    maxDepth?: number;\r\n    sampleSize?: number;\r\n    inferTypes?: boolean;\r\n}\r\n\r\nexport class JsonAnalyzer {\r\n    constructor(private options: AnalyzerOptions = {\r\n        maxDepth: 10,\r\n        sampleSize: 100,\r\n        inferTypes: true\r\n    }) {}\r\n\r\n    async analyzeJsonStructure(filePath: string): Promise<JSONSchema7> {\r\n        try {\r\n            const content = await readFile(filePath, 'utf-8');\r\n            const data = JSON.parse(content);\r\n            return this.generateSchema(data);\r\n        } catch (error) {\r\n            console.error(`Error analyzing JSON file ${filePath}:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private generateSchema(data: any, depth: number = 0): JSONSchema7 {\r\n        if (depth > (this.options.maxDepth || 10)) {\r\n            return { type: 'any' };\r\n        }\r\n\r\n        if (data === null) {\r\n            return { type: 'null' };\r\n        }\r\n\r\n        switch (typeof data) {\r\n            case 'string':\r\n                return this.analyzeString(data);\r\n            case 'number':\r\n                return this.analyzeNumber(data);\r\n            case 'boolean':\r\n                return { type: 'boolean' };\r\n            case 'object':\r\n                if (Array.isArray(data)) {\r\n                    return this.analyzeArray(data, depth);\r\n                }\r\n                return this.analyzeObject(data, depth);\r\n            default:\r\n                return { type: 'any' };\r\n        }\r\n    }\r\n\r\n    private analyzeString(value: string): JSONSchema7 {\r\n        // 检测日期格式\r\n        if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) {\r\n            return {\r\n                type: 'string',\r\n                format: 'date-time'\r\n            };\r\n        }\r\n\r\n        // 检测邮箱格式\r\n        if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\r\n            return {\r\n                type: 'string',\r\n                format: 'email'\r\n            };\r\n        }\r\n\r\n        // 检测URL格式\r\n        if (/^https?:\\/\\//.test(value)) {\r\n            return {\r\n                type: 'string',\r\n                format: 'uri'\r\n            };\r\n        }\r\n\r\n        return { type: 'string' };\r\n    }\r\n\r\n    private analyzeNumber(value: number): JSONSchema7 {\r\n        return {\r\n            type: Number.isInteger(value) ? 'integer' : 'number'\r\n        };\r\n    }\r\n\r\n    private analyzeArray(arr: any[], depth: number): JSONSchema7 {\r\n        if (arr.length === 0) {\r\n            return {\r\n                type: 'array',\r\n                items: { type: 'any' }\r\n            };\r\n        }\r\n\r\n        // 分析数组元素类型\r\n        const sampleSize = Math.min(arr.length, this.options.sampleSize || 100);\r\n        const samples = arr.slice(0, sampleSize);\r\n        const itemSchemas = samples.map(item => this.generateSchema(item, depth + 1));\r\n\r\n        // 合并相似的模式\r\n        const mergedSchema = this.mergeSchemas(itemSchemas);\r\n\r\n        return {\r\n            type: 'array',\r\n            items: mergedSchema\r\n        };\r\n    }\r\n\r\n    private analyzeObject(obj: Record<string, any>, depth: number): JSONSchema7 {\r\n        const properties: Record<string, JSONSchema7> = {};\r\n        const required: string[] = [];\r\n\r\n        for (const [key, value] of Object.entries(obj)) {\r\n            properties[key] = this.generateSchema(value, depth + 1);\r\n            if (value !== undefined && value !== null) {\r\n                required.push(key);\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: 'object',\r\n            properties,\r\n            required: required.length > 0 ? required : undefined\r\n        };\r\n    }\r\n\r\n    private mergeSchemas(schemas: JSONSchema7[]): JSONSchema7 {\r\n        if (schemas.length === 0) return { type: 'any' };\r\n        if (schemas.length === 1) return schemas[0];\r\n\r\n        // 如果所有模式类型相同，合并它们\r\n        const types = new Set(schemas.map(s => s.type));\r\n        if (types.size === 1) {\r\n            const type = schemas[0].type;\r\n            if (type === 'object') {\r\n                return this.mergeObjectSchemas(schemas as JSONSchema7[]);\r\n            }\r\n            if (type === 'array') {\r\n                return this.mergeArraySchemas(schemas as JSONSchema7[]);\r\n            }\r\n        }\r\n\r\n        // 如果类型不同，使用联合类型\r\n        return {\r\n            anyOf: schemas\r\n        };\r\n    }\r\n\r\n    private mergeObjectSchemas(schemas: JSONSchema7[]): JSONSchema7 {\r\n        const allProperties = new Set<string>();\r\n        schemas.forEach(schema => {\r\n            if (schema.properties) {\r\n                Object.keys(schema.properties).forEach(key => allProperties.add(key));\r\n            }\r\n        });\r\n\r\n        const properties: Record<string, JSONSchema7> = {};\r\n        const required: string[] = [];\r\n\r\n        allProperties.forEach(prop => {\r\n            const propSchemas = schemas\r\n                .filter(s => s.properties && s.properties[prop])\r\n                .map(s => s.properties![prop]);\r\n            \r\n            properties[prop] = this.mergeSchemas(propSchemas);\r\n            \r\n            // 如果所有模式都将此属性标记为必需\r\n            if (schemas.every(s => s.required && s.required.includes(prop))) {\r\n                required.push(prop);\r\n            }\r\n        });\r\n\r\n        return {\r\n            type: 'object',\r\n            properties,\r\n            required: required.length > 0 ? required : undefined\r\n        };\r\n    }\r\n\r\n    private mergeArraySchemas(schemas: JSONSchema7[]): JSONSchema7 {\r\n        const itemSchemas = schemas\r\n            .filter(s => s.items)\r\n            .map(s => s.items as JSONSchema7);\r\n\r\n        return {\r\n            type: 'array',\r\n            items: this.mergeSchemas(itemSchemas)\r\n        };\r\n    }\r\n}\r\n\r\nexport const analyzeJsonStructure = async (\r\n    filePath: string,\r\n    options?: AnalyzerOptions\r\n): Promise<JSONSchema7> => {\r\n    const analyzer = new JsonAnalyzer(options);\r\n    return analyzer.analyzeJsonStructure(filePath);\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmBY;IAAAA,aAAA,YAAAA,CAAA;MA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","ignoreList":[]}
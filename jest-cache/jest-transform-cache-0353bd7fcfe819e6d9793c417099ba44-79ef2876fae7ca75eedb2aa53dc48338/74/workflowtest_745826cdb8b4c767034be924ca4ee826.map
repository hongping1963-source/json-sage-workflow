{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\workflow.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\workflow.test.ts"],"sourcesContent":["import { JsonSageWorkflow } from '../core/Workflow';\r\n\r\ndescribe('JsonSageWorkflow', () => {\r\n    let workflow: JsonSageWorkflow;\r\n\r\n    describe('Basic Functionality', () => {\r\n        beforeEach(() => {\r\n            workflow = new JsonSageWorkflow({\r\n                watch: false,\r\n                autoProcess: false,\r\n                generateTypes: false,\r\n                autoOptimize: false,\r\n                compression: false,\r\n                validation: false,\r\n                caching: false\r\n            });\r\n        });\r\n\r\n        it('should parse JSON string', () => {\r\n            const testData = { test: 'value' };\r\n            const jsonString = JSON.stringify(testData);\r\n            expect(workflow.parse(jsonString)).toEqual(testData);\r\n        });\r\n\r\n        it('should stringify data', () => {\r\n            const testData = { test: 'value' };\r\n            const result = workflow.stringify(testData);\r\n            expect(JSON.parse(result)).toEqual(testData);\r\n        });\r\n    });\r\n\r\n    describe('Advanced Features', () => {\r\n        beforeEach(() => {\r\n            workflow = new JsonSageWorkflow({\r\n                watch: true,\r\n                autoProcess: true,\r\n                generateTypes: true,\r\n                autoOptimize: true,\r\n                compression: true,\r\n                validation: true,\r\n                caching: true\r\n            });\r\n        });\r\n\r\n        it('should use cache for parsing', async () => {\r\n            const testData = { test: 'value' };\r\n            const jsonString = JSON.stringify(testData);\r\n            \r\n            // First parse should cache\r\n            const firstResult = workflow.parse(jsonString);\r\n            expect(firstResult).toEqual(testData);\r\n            \r\n            // Second parse should use cache\r\n            const secondResult = workflow.parse(jsonString);\r\n            expect(secondResult).toEqual(testData);\r\n        });\r\n\r\n        it('should use cache for stringifying', () => {\r\n            const testData = { test: 'value' };\r\n            \r\n            // First stringify should cache\r\n            const firstResult = workflow.stringify(testData);\r\n            \r\n            // Second stringify should use cache\r\n            const secondResult = workflow.stringify(testData);\r\n            expect(firstResult).toBe(secondResult);\r\n        });\r\n\r\n        it('should handle compression', () => {\r\n            const testData = { test: 'value'.repeat(100) }; // Large enough to trigger compression\r\n            const jsonString = workflow.stringify(testData);\r\n            const parsed = workflow.parse(jsonString);\r\n            expect(parsed).toEqual(testData);\r\n        });\r\n\r\n        it('should validate and repair data', () => {\r\n            const testData = { number: '123' }; // Number as string\r\n            const jsonString = JSON.stringify(testData);\r\n            const result = workflow.parse(jsonString);\r\n            expect(result.number).toBe(123); // Should be converted to number\r\n        });\r\n    });\r\n\r\n    describe('Error Handling', () => {\r\n        beforeEach(() => {\r\n            workflow = new JsonSageWorkflow();\r\n        });\r\n\r\n        it('should handle invalid JSON', () => {\r\n            expect(() => workflow.parse('invalid json')).toThrow();\r\n        });\r\n\r\n        it('should handle circular references', () => {\r\n            const circular: any = { name: 'test' };\r\n            circular.self = circular;\r\n            expect(() => workflow.stringify(circular)).toThrow();\r\n        });\r\n\r\n        it('should handle initialization errors', async () => {\r\n            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\r\n            const badWorkflow = new JsonSageWorkflow({\r\n                watch: true,\r\n                autoProcess: true,\r\n                generateTypes: true,\r\n                autoOptimize: true\r\n            });\r\n            \r\n            // Wait for initialization to complete\r\n            await new Promise(resolve => setTimeout(resolve, 100));\r\n            \r\n            expect(consoleSpy).toHaveBeenCalled();\r\n            consoleSpy.mockRestore();\r\n        });\r\n    });\r\n\r\n    describe('Performance Reporting', () => {\r\n        beforeEach(() => {\r\n            workflow = new JsonSageWorkflow({\r\n                compression: true,\r\n                caching: true\r\n            });\r\n        });\r\n\r\n        it('should generate performance report', async () => {\r\n            const report = await workflow.getPerformanceReport();\r\n            \r\n            expect(report).toHaveProperty('cache');\r\n            expect(report).toHaveProperty('compression');\r\n            expect(report.compression).toHaveProperty('enabled', true);\r\n            expect(report.compression).toHaveProperty('analysis');\r\n        });\r\n\r\n        it('should include cache statistics', async () => {\r\n            const testData = { test: 'value' };\r\n            workflow.parse(JSON.stringify(testData)); // Add something to cache\r\n            \r\n            const report = await workflow.getPerformanceReport();\r\n            expect(report.cache).toHaveProperty('itemCount');\r\n            expect(report.cache.itemCount).toBeGreaterThan(0);\r\n        });\r\n    });\r\n});\r\n"],"version":3}
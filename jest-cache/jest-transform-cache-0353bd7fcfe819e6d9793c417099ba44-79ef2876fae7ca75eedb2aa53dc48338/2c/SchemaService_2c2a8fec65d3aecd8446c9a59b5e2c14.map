{"version":3,"names":["cov_2kjbc4xbu4","actualCoverage","s","DeepSeekClient_1","require","SchemaService","constructor","config","f","client","DeepSeekClient","generateSchema","json","options","b","jsonString","JSON","stringify","messages","role","content","generateSystemPrompt","format","generateUserPrompt","response","createChatCompletion","temperature","max_tokens","maxTokens","schemaString","_b","_a","choices","message","Error","schema","parse","error","generateFieldDescriptions","descriptionsString","generateExamples","examplesString","exports"],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\deepseek\\SchemaService.ts"],"sourcesContent":["import { DeepSeekClient, ChatMessage } from './DeepSeekClient';\r\nimport { DeepSeekConfig } from '../config/ConfigManager';\r\n\r\nexport interface SchemaGenerationOptions {\r\n    format?: 'draft-07' | 'draft-06' | 'draft-04';\r\n    includeExamples?: boolean;\r\n    includeDescriptions?: boolean;\r\n    temperature?: number;\r\n    maxTokens?: number;\r\n}\r\n\r\nexport class SchemaService {\r\n    private client: DeepSeekClient;\r\n\r\n    constructor(config: DeepSeekConfig) {\r\n        this.client = new DeepSeekClient(config);\r\n    }\r\n\r\n    /**\r\n     * 生成 JSON Schema\r\n     */\r\n    public async generateSchema(\r\n        json: string | object,\r\n        options: SchemaGenerationOptions = {}\r\n    ): Promise<string> {\r\n        const jsonString = typeof json === 'string' ? json : JSON.stringify(json, null, 2);\r\n        \r\n        try {\r\n            // 准备消息\r\n            const messages: ChatMessage[] = [\r\n                {\r\n                    role: 'system',\r\n                    content: DeepSeekClient.generateSystemPrompt(options.format || 'draft-07')\r\n                },\r\n                {\r\n                    role: 'user',\r\n                    content: DeepSeekClient.generateUserPrompt(jsonString)\r\n                }\r\n            ];\r\n\r\n            // 调用 API\r\n            const response = await this.client.createChatCompletion({\r\n                messages,\r\n                temperature: options.temperature,\r\n                max_tokens: options.maxTokens\r\n            });\r\n\r\n            // 提取并验证 Schema\r\n            const schemaString = response.choices[0]?.message?.content;\r\n            if (!schemaString) {\r\n                throw new Error('Failed to generate schema: Empty response from API');\r\n            }\r\n\r\n            try {\r\n                // 验证生成的 Schema 是否为有效的 JSON\r\n                const schema = JSON.parse(schemaString);\r\n                return JSON.stringify(schema, null, 2);\r\n            } catch (error) {\r\n                throw new Error('Generated schema is not valid JSON');\r\n            }\r\n        } catch (error) {\r\n            throw new Error(`Schema generation failed: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成字段描述\r\n     */\r\n    public async generateFieldDescriptions(\r\n        json: string | object\r\n    ): Promise<Record<string, string>> {\r\n        const jsonString = typeof json === 'string' ? json : JSON.stringify(json, null, 2);\r\n        \r\n        try {\r\n            const messages: ChatMessage[] = [\r\n                {\r\n                    role: 'system',\r\n                    content: 'You are a JSON documentation expert. Your task is to analyze JSON data and provide clear, concise descriptions for each field.'\r\n                },\r\n                {\r\n                    role: 'user',\r\n                    content: `Please provide descriptions for each field in the following JSON. Return only a JSON object where keys are field paths and values are descriptions:\r\n\r\n${jsonString}`\r\n                }\r\n            ];\r\n\r\n            const response = await this.client.createChatCompletion({\r\n                messages,\r\n                temperature: 0.3 // 使用较低的温度以获得更一致的描述\r\n            });\r\n\r\n            const descriptionsString = response.choices[0]?.message?.content;\r\n            if (!descriptionsString) {\r\n                throw new Error('Failed to generate descriptions: Empty response from API');\r\n            }\r\n\r\n            try {\r\n                return JSON.parse(descriptionsString);\r\n            } catch (error) {\r\n                throw new Error('Generated descriptions are not valid JSON');\r\n            }\r\n        } catch (error) {\r\n            throw new Error(`Field description generation failed: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成示例值\r\n     */\r\n    public async generateExamples(\r\n        schema: string | object\r\n    ): Promise<Record<string, any>> {\r\n        const schemaString = typeof schema === 'string' ? schema : JSON.stringify(schema, null, 2);\r\n        \r\n        try {\r\n            const messages: ChatMessage[] = [\r\n                {\r\n                    role: 'system',\r\n                    content: 'You are a JSON Schema expert. Your task is to generate realistic example values that conform to the given JSON Schema.'\r\n                },\r\n                {\r\n                    role: 'user',\r\n                    content: `Please generate example values for the following JSON Schema. Return only a JSON object with example values:\r\n\r\n${schemaString}`\r\n                }\r\n            ];\r\n\r\n            const response = await this.client.createChatCompletion({\r\n                messages,\r\n                temperature: 0.5 // 使用中等温度以获得合理但多样的示例\r\n            });\r\n\r\n            const examplesString = response.choices[0]?.message?.content;\r\n            if (!examplesString) {\r\n                throw new Error('Failed to generate examples: Empty response from API');\r\n            }\r\n\r\n            try {\r\n                return JSON.parse(examplesString);\r\n            } catch (error) {\r\n                throw new Error('Generated examples are not valid JSON');\r\n            }\r\n        } catch (error) {\r\n            throw new Error(`Example generation failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AA5BZ,MAAAC,gBAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAWA,MAAaC,aAAa;EAGtBC,YAAYC,MAAsB;IAAA;IAAAP,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IAC9B,IAAI,CAACO,MAAM,GAAG,IAAIN,gBAAA,CAAAO,cAAc,CAACH,MAAM,CAAC;EAC5C;EAEA;;;EAGO,MAAMI,cAAcA,CACvBC,IAAqB,EACrBC,OAAA;EAAA;EAAA,CAAAb,cAAA,GAAAc,CAAA,UAAmC,EAAE;IAAA;IAAAd,cAAA,GAAAQ,CAAA;;IAErC,MAAMO,UAAU;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,OAAG,OAAOU,IAAI,KAAK,QAAQ;IAAA;IAAA,CAAAZ,cAAA,GAAAc,CAAA,UAAGF,IAAI;IAAA;IAAA,CAAAZ,cAAA,GAAAc,CAAA,UAAGE,IAAI,CAACC,SAAS,CAACL,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAAC;IAAAZ,cAAA,GAAAE,CAAA;IAEnF,IAAI;MACA;MACA,MAAMgB,QAAQ;MAAA;MAAA,CAAAlB,cAAA,GAAAE,CAAA,OAAkB,CAC5B;QACIiB,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAEjB,gBAAA,CAAAO,cAAc,CAACW,oBAAoB;QAAC;QAAA,CAAArB,cAAA,GAAAc,CAAA,UAAAD,OAAO,CAACS,MAAM;QAAA;QAAA,CAAAtB,cAAA,GAAAc,CAAA,UAAI,UAAU;OAC5E,EACD;QACIK,IAAI,EAAE,MAAM;QACZC,OAAO,EAAEjB,gBAAA,CAAAO,cAAc,CAACa,kBAAkB,CAACR,UAAU;OACxD,CACJ;MAED;MACA,MAAMS,QAAQ;MAAA;MAAA,CAAAxB,cAAA,GAAAE,CAAA,OAAG,MAAM,IAAI,CAACO,MAAM,CAACgB,oBAAoB,CAAC;QACpDP,QAAQ;QACRQ,WAAW,EAAEb,OAAO,CAACa,WAAW;QAChCC,UAAU,EAAEd,OAAO,CAACe;OACvB,CAAC;MAEF;MACA,MAAMC,YAAY;MAAA;MAAA,CAAA7B,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAc,CAAA,WAAAgB,EAAA;MAAA;MAAA,CAAA9B,cAAA,GAAAc,CAAA,WAAAiB,EAAA,GAAAP,QAAQ,CAACQ,OAAO,CAAC,CAAC,CAAC;MAAA;MAAA,CAAAhC,cAAA,GAAAc,CAAA,UAAAiB,EAAA;MAAA;MAAA,CAAA/B,cAAA,GAAAc,CAAA;MAAA;MAAA,CAAAd,cAAA,GAAAc,CAAA,UAAAiB,EAAA,CAAEE,OAAO;MAAA;MAAA,CAAAjC,cAAA,GAAAc,CAAA,UAAAgB,EAAA;MAAA;MAAA,CAAA9B,cAAA,GAAAc,CAAA;MAAA;MAAA,CAAAd,cAAA,GAAAc,CAAA,UAAAgB,EAAA,CAAEV,OAAO;MAAC;MAAApB,cAAA,GAAAE,CAAA;MAC3D,IAAI,CAAC2B,YAAY,EAAE;QAAA;QAAA7B,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAE,CAAA;QACf,MAAM,IAAIgC,KAAK,CAAC,oDAAoD,CAAC;OACxE;MAAA;MAAA;QAAAlC,cAAA,GAAAc,CAAA;MAAA;MAAAd,cAAA,GAAAE,CAAA;MAED,IAAI;QACA;QACA,MAAMiC,MAAM;QAAA;QAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAGc,IAAI,CAACoB,KAAK,CAACP,YAAY,CAAC;QAAC;QAAA7B,cAAA,GAAAE,CAAA;QACxC,OAAOc,IAAI,CAACC,SAAS,CAACkB,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;OACzC,CAAC,OAAOE,KAAK,EAAE;QAAA;QAAArC,cAAA,GAAAE,CAAA;QACZ,MAAM,IAAIgC,KAAK,CAAC,oCAAoC,CAAC;;KAE5D,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAArC,cAAA,GAAAE,CAAA;MACZ,MAAM,IAAIgC,KAAK,CAAC,6BAA6BG,KAAK,CAACJ,OAAO,EAAE,CAAC;;EAErE;EAEA;;;EAGO,MAAMK,yBAAyBA,CAClC1B,IAAqB;IAAA;IAAAZ,cAAA,GAAAQ,CAAA;;IAErB,MAAMO,UAAU;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAAG,OAAOU,IAAI,KAAK,QAAQ;IAAA;IAAA,CAAAZ,cAAA,GAAAc,CAAA,UAAGF,IAAI;IAAA;IAAA,CAAAZ,cAAA,GAAAc,CAAA,UAAGE,IAAI,CAACC,SAAS,CAACL,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAAC;IAAAZ,cAAA,GAAAE,CAAA;IAEnF,IAAI;MACA,MAAMgB,QAAQ;MAAA;MAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAkB,CAC5B;QACIiB,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE;OACZ,EACD;QACID,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;;EAE3BL,UAAU;OACK,CACJ;MAED,MAAMS,QAAQ;MAAA;MAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACO,MAAM,CAACgB,oBAAoB,CAAC;QACpDP,QAAQ;QACRQ,WAAW,EAAE,GAAG,CAAC;OACpB,CAAC;MAEF,MAAMa,kBAAkB;MAAA;MAAA,CAAAvC,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAc,CAAA,YAAAgB,EAAA;MAAA;MAAA,CAAA9B,cAAA,GAAAc,CAAA,YAAAiB,EAAA,GAAAP,QAAQ,CAACQ,OAAO,CAAC,CAAC,CAAC;MAAA;MAAA,CAAAhC,cAAA,GAAAc,CAAA,WAAAiB,EAAA;MAAA;MAAA,CAAA/B,cAAA,GAAAc,CAAA;MAAA;MAAA,CAAAd,cAAA,GAAAc,CAAA,WAAAiB,EAAA,CAAEE,OAAO;MAAA;MAAA,CAAAjC,cAAA,GAAAc,CAAA,WAAAgB,EAAA;MAAA;MAAA,CAAA9B,cAAA,GAAAc,CAAA;MAAA;MAAA,CAAAd,cAAA,GAAAc,CAAA,UAAAgB,EAAA,CAAEV,OAAO;MAAC;MAAApB,cAAA,GAAAE,CAAA;MACjE,IAAI,CAACqC,kBAAkB,EAAE;QAAA;QAAAvC,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAE,CAAA;QACrB,MAAM,IAAIgC,KAAK,CAAC,0DAA0D,CAAC;OAC9E;MAAA;MAAA;QAAAlC,cAAA,GAAAc,CAAA;MAAA;MAAAd,cAAA,GAAAE,CAAA;MAED,IAAI;QAAA;QAAAF,cAAA,GAAAE,CAAA;QACA,OAAOc,IAAI,CAACoB,KAAK,CAACG,kBAAkB,CAAC;OACxC,CAAC,OAAOF,KAAK,EAAE;QAAA;QAAArC,cAAA,GAAAE,CAAA;QACZ,MAAM,IAAIgC,KAAK,CAAC,2CAA2C,CAAC;;KAEnE,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAArC,cAAA,GAAAE,CAAA;MACZ,MAAM,IAAIgC,KAAK,CAAC,wCAAwCG,KAAK,CAACJ,OAAO,EAAE,CAAC;;EAEhF;EAEA;;;EAGO,MAAMO,gBAAgBA,CACzBL,MAAuB;IAAA;IAAAnC,cAAA,GAAAQ,CAAA;;IAEvB,MAAMqB,YAAY;IAAA;IAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,OAAOiC,MAAM,KAAK,QAAQ;IAAA;IAAA,CAAAnC,cAAA,GAAAc,CAAA,WAAGqB,MAAM;IAAA;IAAA,CAAAnC,cAAA,GAAAc,CAAA,WAAGE,IAAI,CAACC,SAAS,CAACkB,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAAC;IAAAnC,cAAA,GAAAE,CAAA;IAE3F,IAAI;MACA,MAAMgB,QAAQ;MAAA;MAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAkB,CAC5B;QACIiB,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE;OACZ,EACD;QACID,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;;EAE3BS,YAAY;OACG,CACJ;MAED,MAAML,QAAQ;MAAA;MAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACO,MAAM,CAACgB,oBAAoB,CAAC;QACpDP,QAAQ;QACRQ,WAAW,EAAE,GAAG,CAAC;OACpB,CAAC;MAEF,MAAMe,cAAc;MAAA;MAAA,CAAAzC,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAc,CAAA,YAAAgB,EAAA;MAAA;MAAA,CAAA9B,cAAA,GAAAc,CAAA,YAAAiB,EAAA,GAAAP,QAAQ,CAACQ,OAAO,CAAC,CAAC,CAAC;MAAA;MAAA,CAAAhC,cAAA,GAAAc,CAAA,WAAAiB,EAAA;MAAA;MAAA,CAAA/B,cAAA,GAAAc,CAAA;MAAA;MAAA,CAAAd,cAAA,GAAAc,CAAA,WAAAiB,EAAA,CAAEE,OAAO;MAAA;MAAA,CAAAjC,cAAA,GAAAc,CAAA,WAAAgB,EAAA;MAAA;MAAA,CAAA9B,cAAA,GAAAc,CAAA;MAAA;MAAA,CAAAd,cAAA,GAAAc,CAAA,WAAAgB,EAAA,CAAEV,OAAO;MAAC;MAAApB,cAAA,GAAAE,CAAA;MAC7D,IAAI,CAACuC,cAAc,EAAE;QAAA;QAAAzC,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAE,CAAA;QACjB,MAAM,IAAIgC,KAAK,CAAC,sDAAsD,CAAC;OAC1E;MAAA;MAAA;QAAAlC,cAAA,GAAAc,CAAA;MAAA;MAAAd,cAAA,GAAAE,CAAA;MAED,IAAI;QAAA;QAAAF,cAAA,GAAAE,CAAA;QACA,OAAOc,IAAI,CAACoB,KAAK,CAACK,cAAc,CAAC;OACpC,CAAC,OAAOJ,KAAK,EAAE;QAAA;QAAArC,cAAA,GAAAE,CAAA;QACZ,MAAM,IAAIgC,KAAK,CAAC,uCAAuC,CAAC;;KAE/D,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAArC,cAAA,GAAAE,CAAA;MACZ,MAAM,IAAIgC,KAAK,CAAC,8BAA8BG,KAAK,CAACJ,OAAO,EAAE,CAAC;;EAEtE;;AACH;AAAAjC,cAAA,GAAAE,CAAA;AAzIDwC,OAAA,CAAArC,aAAA,GAAAA,aAAA","ignoreList":[]}
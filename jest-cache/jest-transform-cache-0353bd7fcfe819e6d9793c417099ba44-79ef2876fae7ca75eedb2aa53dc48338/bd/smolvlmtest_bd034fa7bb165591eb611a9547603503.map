{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\test\\vision\\smolvlm.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAA2D;AAC3D,gDAAkC;AAClC,2CAA6B;AAE7B,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,SAA0B,CAAC;IAE/B,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,SAAS,GAAG,IAAI,yBAAe,CAAC;YAC9B,UAAU,EAAE,KAAK;YACjB,SAAS,EAAE,GAAG;SACf,CAAC,CAAC;QACH,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,SAAS;QACT,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC;QACrE,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAEjD,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QAEzD,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,YAAY,GAAG;YACnB,WAAW,EAAE,cAAc;YAC3B,OAAO,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;YAC/B,UAAU,EAAE;gBACV,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,OAAO;aACd;SACF,CAAC;QAEF,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAElE,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9D,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\test\\vision\\smolvlm.test.ts"],"sourcesContent":["import { VisionProcessor } from '../../src/vision/smolvlm';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\n\ndescribe('VisionProcessor', () => {\n  let processor: VisionProcessor;\n\n  beforeAll(async () => {\n    processor = new VisionProcessor({\n      deviceType: 'cpu',\n      maxTokens: 256\n    });\n    await processor.initialize();\n  });\n\n  it('should analyze simple image', async () => {\n    // 读取测试图片\n    const imagePath = path.join(__dirname, '../fixtures/test-image.jpg');\n    const imageBuffer = await fs.readFile(imagePath);\n\n    const result = await processor.analyzeImage(imageBuffer);\n\n    expect(result).toHaveProperty('description');\n    expect(result).toHaveProperty('objects');\n    expect(result).toHaveProperty('attributes');\n  });\n\n  it('should generate JSON mapping', async () => {\n    const mockAnalysis = {\n      description: 'A test image',\n      objects: ['object1', 'object2'],\n      attributes: {\n        color: 'blue',\n        size: 'large'\n      }\n    };\n\n    const mapping = await processor.generateJsonMapping(mockAnalysis);\n\n    expect(mapping).toHaveProperty('imageContent');\n    expect(mapping).toHaveProperty('metadata');\n    expect(mapping.imageContent.description).toBe('A test image');\n    expect(mapping.imageContent.detectedObjects).toHaveLength(2);\n  });\n});\n"],"version":3}
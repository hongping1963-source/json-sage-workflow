7158897823e8866af6dd75452f9c5535
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock json-sage-workflow
jest.mock('@zhanghongping/json-sage-workflow', () => ({
    json: {
        createWorkflow: jest.fn()
    }
}));
const src_1 = require("../src");
const json_sage_workflow_1 = require("@zhanghongping/json-sage-workflow");
describe('JsonSageAI Integration Tests', () => {
    let ai;
    let mockWorkflow;
    beforeEach(() => {
        // Clear all mocks
        jest.clearAllMocks();
        // Setup mock workflow
        mockWorkflow = {
            generateSchema: jest.fn(),
            deepseek: {
                generateFieldDescriptions: jest.fn(),
                generateExamples: jest.fn()
            }
        };
        json_sage_workflow_1.json.createWorkflow.mockReturnValue(mockWorkflow);
        // Create new instance
        ai = src_1.JsonSageAI.create({
            deepseekApiKey: 'test-api-key',
            model: 'test-model',
            temperature: 0.7
        });
    });
    describe('generateSchema', () => {
        it('should generate complete schema with descriptions and examples', async () => {
            const testData = {
                user: {
                    name: "张三",
                    age: 25,
                    email: "zhangsan@example.com"
                }
            };
            const mockSchema = {
                type: 'object',
                properties: {
                    user: {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            age: { type: 'number' },
                            email: { type: 'string', format: 'email' }
                        }
                    }
                }
            };
            const mockDescriptions = {
                'user.name': '用户的姓名',
                'user.age': '用户的年龄',
                'user.email': '用户的电子邮件地址'
            };
            const mockExamples = {
                user: {
                    name: "李四",
                    age: 30,
                    email: "lisi@example.com"
                }
            };
            mockWorkflow.generateSchema.mockResolvedValueOnce(mockSchema);
            mockWorkflow.deepseek.generateFieldDescriptions.mockResolvedValueOnce(mockDescriptions);
            mockWorkflow.deepseek.generateExamples.mockResolvedValueOnce(mockExamples);
            const result = await ai.generateSchema({
                jsonData: testData,
                options: {
                    includeDescriptions: true,
                    includeExamples: true
                }
            });
            expect(result.schema).toEqual(mockSchema);
            expect(result.descriptions).toEqual(mockDescriptions);
            expect(result.examples).toEqual(mockExamples);
            expect(result.metadata.steps).toContain('Generating Schema');
        });
        it('should skip descriptions when not requested', async () => {
            const testData = { test: 'data' };
            const mockSchema = {
                type: 'object',
                properties: {
                    test: { type: 'string' }
                }
            };
            mockWorkflow.generateSchema.mockResolvedValueOnce(mockSchema);
            const result = await ai.generateSchema({
                jsonData: testData,
                options: {
                    includeDescriptions: false,
                    includeExamples: false
                }
            });
            expect(result.schema).toEqual(mockSchema);
            expect(result.descriptions).toBeUndefined();
            expect(result.examples).toBeUndefined();
            expect(mockWorkflow.deepseek.generateFieldDescriptions).not.toHaveBeenCalled();
            expect(mockWorkflow.deepseek.generateExamples).not.toHaveBeenCalled();
        });
        it('should handle complex nested objects', async () => {
            const testData = {
                order: {
                    id: "ORD001",
                    customer: {
                        id: "CUST001",
                        details: {
                            name: "张三",
                            contact: {
                                email: "zhangsan@example.com",
                                phone: "13800138000"
                            }
                        }
                    },
                    items: [
                        {
                            id: "ITEM001",
                            name: "商品1",
                            price: 99.99
                        }
                    ]
                }
            };
            const mockSchema = {
                type: 'object',
                properties: {
                    order: {
                        type: 'object',
                        properties: {
                            id: { type: 'string' },
                            customer: {
                                type: 'object',
                                properties: {
                                    id: { type: 'string' },
                                    details: {
                                        type: 'object',
                                        properties: {
                                            name: { type: 'string' },
                                            contact: {
                                                type: 'object',
                                                properties: {
                                                    email: { type: 'string', format: 'email' },
                                                    phone: { type: 'string' }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            items: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        id: { type: 'string' },
                                        name: { type: 'string' },
                                        price: { type: 'number' }
                                    }
                                }
                            }
                        }
                    }
                }
            };
            mockWorkflow.generateSchema.mockResolvedValueOnce(mockSchema);
            const result = await ai.generateSchema({
                jsonData: testData,
                options: {}
            });
            expect(result.schema).toEqual(mockSchema);
            expect(mockWorkflow.generateSchema).toHaveBeenCalledWith(testData, expect.any(Object));
        });
        it('should handle errors in schema generation', async () => {
            const testData = { test: 'data' };
            const errorMessage = 'Schema generation failed';
            mockWorkflow.generateSchema.mockRejectedValueOnce(new Error(errorMessage));
            await expect(ai.generateSchema({
                jsonData: testData,
                options: {}
            })).rejects.toThrow(`Schema generation failed: ${errorMessage}`);
        });
        it('should handle errors in description generation', async () => {
            const testData = { test: 'data' };
            const mockSchema = {
                type: 'object',
                properties: {
                    test: { type: 'string' }
                }
            };
            const errorMessage = 'Description generation failed';
            mockWorkflow.generateSchema.mockResolvedValueOnce(mockSchema);
            mockWorkflow.deepseek.generateFieldDescriptions.mockRejectedValueOnce(new Error(errorMessage));
            const result = await ai.generateSchema({
                jsonData: testData,
                options: {
                    includeDescriptions: true,
                    includeExamples: false
                }
            });
            expect(result.schema).toEqual(mockSchema);
            expect(result.descriptions).toBeUndefined();
            expect(result.metadata.errors).toContain(`Description generation failed: ${errorMessage}`);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
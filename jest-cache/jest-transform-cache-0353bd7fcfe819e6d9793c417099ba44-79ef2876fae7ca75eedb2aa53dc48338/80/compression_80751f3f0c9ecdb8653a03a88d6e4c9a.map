{"version":3,"names":["cov_1dnac2qxs6","actualCoverage","s","pako_1","require","JsonCompressor","constructor","options","b","f","threshold","level","memoryLimit","compress","data","jsonString","JSON","stringify","length","compressed","deflate","memLevel","calculateMemLevel","error","console","warn","decompress","parse","decompressed","inflate","to","totalMemory","process","memoryUsage","heapTotal","memoryLimitBytes","analyzeCompression","originalString","originalSize","compressedSize","compressionRatio","compressionSavings","exports"],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\compression.ts"],"sourcesContent":["import { deflate, inflate } from 'pako';\r\n\r\ninterface CompressionOptions {\r\n    threshold?: number;  // 触发压缩的大小阈值（字节）\r\n    level?: number;     // 压缩级别 (1-9)\r\n    memoryLimit?: number; // 内存使用限制（MB）\r\n}\r\n\r\nexport class JsonCompressor {\r\n    private options: CompressionOptions;\r\n\r\n    constructor(options: CompressionOptions = {}) {\r\n        this.options = {\r\n            threshold: 1024,  // 1KB\r\n            level: 6,\r\n            memoryLimit: 100, // 100MB\r\n            ...options\r\n        };\r\n    }\r\n\r\n    compress(data: any): string | Uint8Array {\r\n        const jsonString = JSON.stringify(data);\r\n        \r\n        // 如果数据小于阈值，直接返回\r\n        if (jsonString.length < this.options.threshold!) {\r\n            return jsonString;\r\n        }\r\n\r\n        try {\r\n            // 压缩数据\r\n            const compressed = deflate(jsonString, {\r\n                level: this.options.level,\r\n                memLevel: this.calculateMemLevel()\r\n            });\r\n\r\n            // 如果压缩后更大，返回原始数据\r\n            return compressed.length < jsonString.length ? compressed : jsonString;\r\n        } catch (error) {\r\n            console.warn('Compression failed, returning original data:', error);\r\n            return jsonString;\r\n        }\r\n    }\r\n\r\n    decompress(data: string | Uint8Array): any {\r\n        try {\r\n            // 如果是字符串且看起来不像压缩数据，直接解析\r\n            if (typeof data === 'string') {\r\n                return JSON.parse(data);\r\n            }\r\n\r\n            // 解压数据\r\n            const decompressed = inflate(data, { to: 'string' });\r\n            return JSON.parse(decompressed);\r\n        } catch (error) {\r\n            console.error('Decompression failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private calculateMemLevel(): number {\r\n        const totalMemory = process.memoryUsage().heapTotal;\r\n        const memoryLimitBytes = this.options.memoryLimit! * 1024 * 1024;\r\n        \r\n        // 根据可用内存动态调整压缩级别\r\n        if (totalMemory < memoryLimitBytes) {\r\n            return 9; // 最高压缩级别\r\n        } else if (totalMemory < memoryLimitBytes * 2) {\r\n            return 7;\r\n        } else {\r\n            return 4; // 节省内存\r\n        }\r\n    }\r\n\r\n    // 分析压缩效果\r\n    analyzeCompression(data: any): CompressionAnalysis {\r\n        const originalString = JSON.stringify(data);\r\n        const compressed = this.compress(data);\r\n        \r\n        return {\r\n            originalSize: originalString.length,\r\n            compressedSize: compressed.length,\r\n            compressionRatio: compressed.length / originalString.length,\r\n            compressionSavings: 1 - (compressed.length / originalString.length)\r\n        };\r\n    }\r\n}\r\n\r\nexport interface CompressionAnalysis {\r\n    originalSize: number;\r\n    compressedSize: number;\r\n    compressionRatio: number;\r\n    compressionSavings: number;\r\n}\r\n"],"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","ignoreList":[]}
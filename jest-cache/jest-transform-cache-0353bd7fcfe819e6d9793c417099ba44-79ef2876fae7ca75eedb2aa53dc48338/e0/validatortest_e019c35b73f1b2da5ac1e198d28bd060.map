{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\validator.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\validator.test.ts"],"sourcesContent":["import { JsonValidator } from '../core/validator';\r\nimport { JSONSchema7 } from 'json-schema';\r\n\r\ndescribe('JsonValidator', () => {\r\n    let validator: JsonValidator;\r\n\r\n    beforeEach(() => {\r\n        validator = new JsonValidator({\r\n            strict: true,\r\n            coerceTypes: true,\r\n            autoRepair: true\r\n        });\r\n    });\r\n\r\n    describe('Basic Validation', () => {\r\n        it('should validate correct data', () => {\r\n            const schema: JSONSchema7 = {\r\n                type: 'object',\r\n                properties: {\r\n                    name: { type: 'string' },\r\n                    age: { type: 'number' }\r\n                },\r\n                required: ['name']\r\n            };\r\n\r\n            const data = {\r\n                name: 'John',\r\n                age: 30\r\n            };\r\n\r\n            const result = validator.validate(data, schema);\r\n            expect(result.valid).toBe(true);\r\n            expect(result.data).toEqual(data);\r\n        });\r\n\r\n        it('should detect invalid data', () => {\r\n            const schema: JSONSchema7 = {\r\n                type: 'object',\r\n                properties: {\r\n                    name: { type: 'string' },\r\n                    age: { type: 'number' }\r\n                },\r\n                required: ['name', 'age']\r\n            };\r\n\r\n            const data = {\r\n                name: 'John'\r\n                // missing required age field\r\n            };\r\n\r\n            const result = validator.validate(data, schema);\r\n            expect(result.valid).toBe(false);\r\n            expect(result.errors).toBeDefined();\r\n            expect(result.errors?.length).toBeGreaterThan(0);\r\n        });\r\n    });\r\n\r\n    describe('Type Coercion', () => {\r\n        it('should coerce string to number', () => {\r\n            const schema: JSONSchema7 = {\r\n                type: 'object',\r\n                properties: {\r\n                    age: { type: 'number' }\r\n                }\r\n            };\r\n\r\n            const data = {\r\n                age: '30'\r\n            };\r\n\r\n            const result = validator.validate(data, schema);\r\n            expect(result.valid).toBe(true);\r\n            expect(result.data?.age).toBe(30);\r\n        });\r\n\r\n        it('should coerce number to string', () => {\r\n            const schema: JSONSchema7 = {\r\n                type: 'object',\r\n                properties: {\r\n                    id: { type: 'string' }\r\n                }\r\n            };\r\n\r\n            const data = {\r\n                id: 123\r\n            };\r\n\r\n            const result = validator.validate(data, schema);\r\n            expect(result.valid).toBe(true);\r\n            expect(result.data?.id).toBe('123');\r\n        });\r\n    });\r\n\r\n    describe('Auto Repair', () => {\r\n        it('should repair invalid types', () => {\r\n            const schema: JSONSchema7 = {\r\n                type: 'object',\r\n                properties: {\r\n                    name: { type: 'string' },\r\n                    age: { type: 'number' },\r\n                    active: { type: 'boolean' }\r\n                }\r\n            };\r\n\r\n            const data = {\r\n                name: 123,\r\n                age: '30',\r\n                active: 1\r\n            };\r\n\r\n            const result = validator.validate(data, schema);\r\n            expect(result.repairedData).toEqual({\r\n                name: '123',\r\n                age: 30,\r\n                active: true\r\n            });\r\n        });\r\n\r\n        it('should repair missing required fields', () => {\r\n            const schema: JSONSchema7 = {\r\n                type: 'object',\r\n                properties: {\r\n                    name: { type: 'string' },\r\n                    age: { type: 'number' }\r\n                },\r\n                required: ['name', 'age']\r\n            };\r\n\r\n            const data = {\r\n                name: 'John'\r\n            };\r\n\r\n            const result = validator.validate(data, schema);\r\n            expect(result.repairedData).toHaveProperty('age');\r\n            expect(typeof result.repairedData?.age).toBe('number');\r\n        });\r\n    });\r\n\r\n    describe('Complex Validations', () => {\r\n        it('should validate nested objects', () => {\r\n            const schema: JSONSchema7 = {\r\n                type: 'object',\r\n                properties: {\r\n                    user: {\r\n                        type: 'object',\r\n                        properties: {\r\n                            name: { type: 'string' },\r\n                            address: {\r\n                                type: 'object',\r\n                                properties: {\r\n                                    street: { type: 'string' },\r\n                                    city: { type: 'string' }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            const data = {\r\n                user: {\r\n                    name: 'John',\r\n                    address: {\r\n                        street: 123,  // should be string\r\n                        city: true    // should be string\r\n                    }\r\n                }\r\n            };\r\n\r\n            const result = validator.validate(data, schema);\r\n            expect(result.repairedData?.user.address.street).toBe('123');\r\n            expect(result.repairedData?.user.address.city).toBe('true');\r\n        });\r\n\r\n        it('should validate arrays', () => {\r\n            const schema: JSONSchema7 = {\r\n                type: 'object',\r\n                properties: {\r\n                    tags: {\r\n                        type: 'array',\r\n                        items: { type: 'string' }\r\n                    }\r\n                }\r\n            };\r\n\r\n            const data = {\r\n                tags: [123, true, 'test']\r\n            };\r\n\r\n            const result = validator.validate(data, schema);\r\n            expect(result.repairedData?.tags).toEqual(['123', 'true', 'test']);\r\n        });\r\n    });\r\n});\r\n"],"version":3}
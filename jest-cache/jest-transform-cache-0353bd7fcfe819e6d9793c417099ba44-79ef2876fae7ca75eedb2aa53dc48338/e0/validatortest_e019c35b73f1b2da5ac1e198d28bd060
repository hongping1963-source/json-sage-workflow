bbb81083f5eb9efe74ac45f58df28292
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const validator_1 = require("../core/validator");
describe('JsonValidator', () => {
    let validator;
    beforeEach(() => {
        validator = new validator_1.JsonValidator({
            strict: true,
            coerceTypes: true,
            autoRepair: true
        });
    });
    describe('Basic Validation', () => {
        it('should validate correct data', () => {
            const schema = {
                type: 'object',
                properties: {
                    name: { type: 'string' },
                    age: { type: 'number' }
                },
                required: ['name']
            };
            const data = {
                name: 'John',
                age: 30
            };
            const result = validator.validate(data, schema);
            expect(result.valid).toBe(true);
            expect(result.data).toEqual(data);
        });
        it('should detect invalid data', () => {
            var _a;
            const schema = {
                type: 'object',
                properties: {
                    name: { type: 'string' },
                    age: { type: 'number' }
                },
                required: ['name', 'age']
            };
            const data = {
                name: 'John'
                // missing required age field
            };
            const result = validator.validate(data, schema);
            expect(result.valid).toBe(false);
            expect(result.errors).toBeDefined();
            expect((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length).toBeGreaterThan(0);
        });
    });
    describe('Type Coercion', () => {
        it('should coerce string to number', () => {
            var _a;
            const schema = {
                type: 'object',
                properties: {
                    age: { type: 'number' }
                }
            };
            const data = {
                age: '30'
            };
            const result = validator.validate(data, schema);
            expect(result.valid).toBe(true);
            expect((_a = result.data) === null || _a === void 0 ? void 0 : _a.age).toBe(30);
        });
        it('should coerce number to string', () => {
            var _a;
            const schema = {
                type: 'object',
                properties: {
                    id: { type: 'string' }
                }
            };
            const data = {
                id: 123
            };
            const result = validator.validate(data, schema);
            expect(result.valid).toBe(true);
            expect((_a = result.data) === null || _a === void 0 ? void 0 : _a.id).toBe('123');
        });
    });
    describe('Auto Repair', () => {
        it('should repair invalid types', () => {
            const schema = {
                type: 'object',
                properties: {
                    name: { type: 'string' },
                    age: { type: 'number' },
                    active: { type: 'boolean' }
                }
            };
            const data = {
                name: 123,
                age: '30',
                active: 1
            };
            const result = validator.validate(data, schema);
            expect(result.repairedData).toEqual({
                name: '123',
                age: 30,
                active: true
            });
        });
        it('should repair missing required fields', () => {
            var _a;
            const schema = {
                type: 'object',
                properties: {
                    name: { type: 'string' },
                    age: { type: 'number' }
                },
                required: ['name', 'age']
            };
            const data = {
                name: 'John'
            };
            const result = validator.validate(data, schema);
            expect(result.repairedData).toHaveProperty('age');
            expect(typeof ((_a = result.repairedData) === null || _a === void 0 ? void 0 : _a.age)).toBe('number');
        });
    });
    describe('Complex Validations', () => {
        it('should validate nested objects', () => {
            var _a, _b;
            const schema = {
                type: 'object',
                properties: {
                    user: {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            address: {
                                type: 'object',
                                properties: {
                                    street: { type: 'string' },
                                    city: { type: 'string' }
                                }
                            }
                        }
                    }
                }
            };
            const data = {
                user: {
                    name: 'John',
                    address: {
                        street: 123,
                        city: true // should be string
                    }
                }
            };
            const result = validator.validate(data, schema);
            expect((_a = result.repairedData) === null || _a === void 0 ? void 0 : _a.user.address.street).toBe('123');
            expect((_b = result.repairedData) === null || _b === void 0 ? void 0 : _b.user.address.city).toBe('true');
        });
        it('should validate arrays', () => {
            var _a;
            const schema = {
                type: 'object',
                properties: {
                    tags: {
                        type: 'array',
                        items: { type: 'string' }
                    }
                }
            };
            const data = {
                tags: [123, true, 'test']
            };
            const result = validator.validate(data, schema);
            expect((_a = result.repairedData) === null || _a === void 0 ? void 0 : _a.tags).toEqual(['123', 'true', 'test']);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
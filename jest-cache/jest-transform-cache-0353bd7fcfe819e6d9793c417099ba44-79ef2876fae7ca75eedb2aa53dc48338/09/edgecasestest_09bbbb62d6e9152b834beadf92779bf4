7fe846216b2c857d7e57b22643c4075a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../index");
const DeepSeekService_1 = require("../../core/DeepSeekService");
describe('DeepSeek AI Edge Cases', () => {
    const mockConfig = {
        apiKey: process.env.JSONSAGE_DEEPSEEK_API_KEY || 'test-api-key'
    };
    describe('Special Data Types', () => {
        let generator;
        beforeEach(() => {
            generator = index_1.json.createSchemaGenerator({
                useAI: true,
                deepseek: mockConfig
            });
        });
        it('should handle empty objects and arrays', async () => {
            const testData = {
                emptyObject: {},
                emptyArray: [],
                nullValue: null,
                undefinedValue: undefined
            };
            const schema = await generator.generateSchema(testData);
            const parsedSchema = JSON.parse(schema);
            expect(parsedSchema.properties.emptyObject.type).toBe('object');
            expect(parsedSchema.properties.emptyArray.type).toBe('array');
            expect(parsedSchema.properties.nullValue.type).toBe('null');
            expect(parsedSchema.properties.undefinedValue).toBeUndefined();
        });
        it('should handle special characters in field names', async () => {
            const testData = {
                '@special': 'value',
                'field.with.dots': 123,
                'field-with-dashes': true,
                'field with spaces': 'test',
                '123numeric': 456,
                '$special&chars#': 'test'
            };
            const schema = await generator.generateSchema(testData);
            const parsedSchema = JSON.parse(schema);
            Object.keys(testData).forEach(key => {
                expect(parsedSchema.properties[key]).toBeDefined();
            });
        });
        it('should handle circular references', async () => {
            const circular = {
                name: 'test'
            };
            circular.self = circular;
            await expect(generator.generateSchema(circular))
                .rejects.toThrow(/circular/i);
        });
        it('should handle very long field names and values', async () => {
            const longString = 'a'.repeat(1000);
            const testData = {
                [longString]: longString,
                normalField: 'value'
            };
            const schema = await generator.generateSchema(testData);
            const parsedSchema = JSON.parse(schema);
            expect(parsedSchema.properties[longString]).toBeDefined();
            expect(parsedSchema.properties[longString].type).toBe('string');
        });
    });
    describe('Data Format Edge Cases', () => {
        let service;
        beforeEach(() => {
            service = new DeepSeekService_1.DeepSeekService(mockConfig);
        });
        it('should handle various date formats', async () => {
            const testData = {
                iso: '2025-01-16T14:36:07+08:00',
                shortDate: '2025-01-16',
                timestamp: 1705387767000,
                invalidDate: 'not-a-date'
            };
            const schema = await service.generateSchema(testData);
            const parsedSchema = JSON.parse(schema);
            expect(parsedSchema.properties.iso.format).toBe('date-time');
            expect(parsedSchema.properties.shortDate.format).toBe('date');
            expect(parsedSchema.properties.timestamp.type).toBe('integer');
            expect(parsedSchema.properties.invalidDate.type).toBe('string');
        });
        it('should handle various number formats', async () => {
            const testData = {
                integer: 42,
                float: 3.14,
                scientific: 1.23e-4,
                infinity: Infinity,
                nan: NaN,
                negZero: -0
            };
            const schema = await service.generateSchema(testData);
            const parsedSchema = JSON.parse(schema);
            expect(parsedSchema.properties.integer.type).toBe('integer');
            expect(parsedSchema.properties.float.type).toBe('number');
            expect(parsedSchema.properties.scientific.type).toBe('number');
        });
        it('should handle binary and buffer data', async () => {
            const testData = {
                buffer: Buffer.from('test'),
                base64: 'SGVsbG8gV29ybGQ=',
                binary: '0b1010'
            };
            const schema = await service.generateSchema(testData);
            const parsedSchema = JSON.parse(schema);
            expect(parsedSchema.properties.buffer).toBeDefined();
            expect(parsedSchema.properties.base64.format).toBe('byte');
            expect(parsedSchema.properties.binary.type).toBe('string');
        });
    });
    describe('Error Handling Edge Cases', () => {
        let service;
        beforeEach(() => {
            service = new DeepSeekService_1.DeepSeekService(mockConfig);
        });
        it('should handle malformed JSON input', async () => {
            const malformedJson = '{name: "test",}'; // 无效的 JSON
            await expect(service.generateSchema(malformedJson))
                .rejects.toThrow(/invalid json/i);
        });
        it('should handle extremely nested structures', async () => {
            let deeplyNested = { value: 1 };
            for (let i = 0; i < 100; i++) {
                deeplyNested = { nested: deeplyNested };
            }
            await expect(service.generateSchema(deeplyNested))
                .rejects.toThrow(/maximum depth exceeded/i);
        });
        it('should handle invalid API responses', async () => {
            // 模拟 API 返回无效响应
            const mockData = {
                test: 'data'
            };
            // 注入错误响应
            jest.spyOn(service, 'client').mockImplementationOnce(() => ({
                createChatCompletion: async () => ({
                    choices: [{
                            message: {
                                content: 'not a valid schema'
                            }
                        }]
                })
            }));
            await expect(service.generateSchema(mockData))
                .rejects.toThrow(/invalid schema/i);
        });
    });
    describe('Schema Validation Edge Cases', () => {
        let generator;
        beforeEach(() => {
            generator = index_1.json.createSchemaGenerator({
                useAI: true,
                deepseek: mockConfig
            });
        });
        it('should handle custom formats', async () => {
            const testData = {
                email: 'test@example.com',
                uri: 'https://example.com',
                uuid: '123e4567-e89b-12d3-a456-426614174000',
                hostname: 'example.com'
            };
            const schema = await generator.generateSchema(testData);
            const parsedSchema = JSON.parse(schema);
            expect(parsedSchema.properties.email.format).toBe('email');
            expect(parsedSchema.properties.uri.format).toBe('uri');
            expect(parsedSchema.properties.uuid.format).toBe('uuid');
            expect(parsedSchema.properties.hostname.format).toBe('hostname');
        });
        it('should handle regex patterns', async () => {
            const testData = {
                phone: '123-456-7890',
                zipCode: '12345',
                custom: 'ABC123'
            };
            const schema = await generator.generateSchema(testData, {
                patterns: {
                    phone: '^\\d{3}-\\d{3}-\\d{4}$',
                    zipCode: '^\\d{5}$',
                    custom: '^[A-Z]{3}\\d{3}$'
                }
            });
            const parsedSchema = JSON.parse(schema);
            expect(parsedSchema.properties.phone.pattern).toBeDefined();
            expect(parsedSchema.properties.zipCode.pattern).toBeDefined();
            expect(parsedSchema.properties.custom.pattern).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxob25ncGluZ1xcQ2FzY2FkZVByb2plY3RzXFxqc29uLXNhZ2UtYWktYWdlbnRcXHNyY1xcX190ZXN0c19fXFxkZWVwc2Vla1xcZWRnZS1jYXNlcy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQW1DO0FBRW5DLGdFQUE2RDtBQUU3RCxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLE1BQU0sVUFBVSxHQUFHO1FBQ2YsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLElBQUksY0FBYztLQUNsRSxDQUFDO0lBRUYsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtRQUNoQyxJQUFJLFNBQTBCLENBQUM7UUFFL0IsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNaLFNBQVMsR0FBRyxZQUFJLENBQUMscUJBQXFCLENBQUM7Z0JBQ25DLEtBQUssRUFBRSxJQUFJO2dCQUNYLFFBQVEsRUFBRSxVQUFVO2FBQ3ZCLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3BELE1BQU0sUUFBUSxHQUFHO2dCQUNiLFdBQVcsRUFBRSxFQUFFO2dCQUNmLFVBQVUsRUFBRSxFQUFFO2dCQUNkLFNBQVMsRUFBRSxJQUFJO2dCQUNmLGNBQWMsRUFBRSxTQUFTO2FBQzVCLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUV4QyxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJ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SUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzFDLE1BQU0sUUFBUSxHQUFHO2dCQUNiLEtBQUssRUFBRSxjQUFjO2dCQUNyQixPQUFPLEVBQUUsT0FBTztnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDbkIsQ0FBQztZQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sU0FBUyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3BELFFBQVEsRUFBRTtvQkFDTixLQUFLLEVBQUUsd0JBQXdCO29CQUMvQixPQUFPLEVBQUUsVUFBVTtvQkFDbkIsTUFBTSxFQUFFLGtCQUFrQjtpQkFDN0I7YUFDSixDQUFDLENBQUM7WUFFSCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM1RCxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDOUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGhvbmdwaW5nXFxDYXNjYWRlUHJvamVjdHNcXGpzb24tc2FnZS1haS1hZ2VudFxcc3JjXFxfX3Rlc3RzX19cXGRlZXBzZWVrXFxlZGdlLWNhc2VzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganNvbiB9IGZyb20gJy4uLy4uL2luZGV4JztcclxuaW1wb3J0IHsgU2NoZW1hR2VuZXJhdG9yIH0gZnJvbSAnLi4vLi4vY29yZS9TY2hlbWFHZW5lcmF0b3InO1xyXG5pbXBvcnQgeyBEZWVwU2Vla1NlcnZpY2UgfSBmcm9tICcuLi8uLi9jb3JlL0RlZXBTZWVrU2VydmljZSc7XHJcblxyXG5kZXNjcmliZSgnRGVlcFNlZWsgQUkgRWRnZSBDYXNlcycsICgpID0+IHtcclxuICAgIGNvbnN0IG1vY2tDb25maWcgPSB7XHJcbiAgICAgICAgYXBpS2V5OiBwcm9jZXNzLmVudi5KU09OU0FHRV9ERUVQU0VFS19BUElfS0VZIHx8ICd0ZXN0LWFwaS1rZXknXHJcbiAgICB9O1xyXG5cclxuICAgIGRlc2NyaWJlKCdTcGVjaWFsIERhdGEgVHlwZXMnLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGdlbmVyYXRvcjogU2NoZW1hR2VuZXJhdG9yO1xyXG5cclxuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICAgICAgZ2VuZXJhdG9yID0ganNvbi5jcmVhdGVTY2hlbWFHZW5lcmF0b3Ioe1xyXG4gICAgICAgICAgICAgICAgdXNlQUk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkZWVwc2VlazogbW9ja0NvbmZpZ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgb2JqZWN0cyBhbmQgYXJyYXlzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGVtcHR5T2JqZWN0OiB7fSxcclxuICAgICAgICAgICAgICAgIGVtcHR5QXJyYXk6IFtdLFxyXG4gICAgICAgICAgICAgICAgbnVsbFZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkVmFsdWU6IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0gYXdhaXQgZ2VuZXJhdG9yLmdlbmVyYXRlU2NoZW1hKHRlc3REYXRhKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VkU2NoZW1hID0gSlNPTi5wYXJzZShzY2hlbWEpO1xyXG5cclxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlZFNjaGVtYS5wcm9wZXJ0aWVzLmVtcHR5T2JqZWN0LnR5cGUpLnRvQmUoJ29iamVjdCcpO1xyXG4gICAgICAgICAgICBleHBlY3QocGFyc2VkU2NoZW1hLnByb3BlcnRpZXMuZW1wdHlBcnJheS50eXBlKS50b0JlKCdhcnJheScpO1xyXG4gICAgICAgICAgICBleHBlY3QocGFyc2VkU2NoZW1hLnByb3BlcnRpZXMubnVsbFZhbHVlLnR5cGUpLnRvQmUoJ251bGwnKTtcclxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlZFNjaGVtYS5wcm9wZXJ0aWVzLnVuZGVmaW5lZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgaGFuZGxlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBmaWVsZCBuYW1lcycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGVzdERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAnQHNwZWNpYWwnOiAndmFsdWUnLFxyXG4gICAgICAgICAgICAgICAgJ2ZpZWxkLndpdGguZG90cyc6IDEyMyxcclxuICAgICAgICAgICAgICAgICdmaWVsZC13aXRoLWRhc2hlcyc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAnZmllbGQgd2l0aCBzcGFjZXMnOiAndGVzdCcsXHJcbiAgICAgICAgICAgICAgICAnMTIzbnVtZXJpYyc6IDQ1NixcclxuICAgICAgICAgICAgICAgICckc3BlY2lhbCZjaGFycyMnOiAndGVzdCdcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IGF3YWl0IGdlbmVyYXRvci5nZW5lcmF0ZVNjaGVtYSh0ZXN0RGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFNjaGVtYSA9IEpTT04ucGFyc2Uoc2NoZW1hKTtcclxuXHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRlc3REYXRhKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICBleHBlY3QocGFyc2VkU2NoZW1hLnByb3BlcnRpZXNba2V5XSkudG9CZURlZmluZWQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgaGFuZGxlIGNpcmN1bGFyIHJlZmVyZW5jZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNpcmN1bGFyOiBhbnkgPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAndGVzdCdcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2lyY3VsYXIuc2VsZiA9IGNpcmN1bGFyO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgZXhwZWN0KGdlbmVyYXRvci5nZW5lcmF0ZVNjaGVtYShjaXJjdWxhcikpXHJcbiAgICAgICAgICAgICAgICAucmVqZWN0cy50b1Rocm93KC9jaXJjdWxhci9pKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgdmVyeSBsb25nIGZpZWxkIG5hbWVzIGFuZCB2YWx1ZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvbmdTdHJpbmcgPSAnYScucmVwZWF0KDEwMDApO1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIFtsb25nU3RyaW5nXTogbG9uZ1N0cmluZyxcclxuICAgICAgICAgICAgICAgIG5vcm1hbEZpZWxkOiAndmFsdWUnXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzY2hlbWEgPSBhd2FpdCBnZW5lcmF0b3IuZ2VuZXJhdGVTY2hlbWEodGVzdERhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJzZWRTY2hlbWEgPSBKU09OLnBhcnNlKHNjaGVtYSk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocGFyc2VkU2NoZW1hLnByb3BlcnRpZXNbbG9uZ1N0cmluZ10pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChwYXJzZWRTY2hlbWEucHJvcGVydGllc1tsb25nU3RyaW5nXS50eXBlKS50b0JlKCdzdHJpbmcnKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdEYXRhIEZvcm1hdCBFZGdlIENhc2VzJywgKCkgPT4ge1xyXG4gICAgICAgIGxldCBzZXJ2aWNlOiBEZWVwU2Vla1NlcnZpY2U7XHJcblxyXG4gICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXJ2aWNlID0gbmV3IERlZXBTZWVrU2VydmljZShtb2NrQ29uZmlnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgdmFyaW91cyBkYXRlIGZvcm1hdHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlc3REYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgaXNvOiAnMjAyNS0wMS0xNlQxNDozNjowNyswODowMCcsXHJcbiAgICAgICAgICAgICAgICBzaG9ydERhdGU6ICcyMDI1LTAxLTE2JyxcclxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogMTcwNTM4Nzc2NzAwMCxcclxuICAgICAgICAgICAgICAgIGludmFsaWREYXRlOiAnbm90LWEtZGF0ZSdcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IGF3YWl0IHNlcnZpY2UuZ2VuZXJhdGVTY2hlbWEodGVzdERhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJzZWRTY2hlbWEgPSBKU09OLnBhcnNlKHNjaGVtYSk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocGFyc2VkU2NoZW1hLnByb3BlcnRpZXMuaXNvLmZvcm1hdCkudG9CZSgnZGF0ZS10aW1lJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChwYXJzZWRTY2hlbWEucHJvcGVydGllcy5zaG9ydERhdGUuZm9ybWF0KS50b0JlKCdkYXRlJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChwYXJzZWRTY2hlbWEucHJvcGVydGllcy50aW1lc3RhbXAudHlwZSkudG9CZSgnaW50ZWdlcicpO1xyXG4gICAgICAgICAgICBleHBlY3QocGFyc2VkU2NoZW1hLnByb3BlcnRpZXMuaW52YWxpZERhdGUudHlwZSkudG9CZSgnc3RyaW5nJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgaGFuZGxlIHZhcmlvdXMgbnVtYmVyIGZvcm1hdHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlc3REYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgaW50ZWdlcjogNDIsXHJcbiAgICAgICAgICAgICAgICBmbG9hdDogMy4xNCxcclxuICAgICAgICAgICAgICAgIHNjaWVudGlmaWM6IDEuMjNlLTQsXHJcbiAgICAgICAgICAgICAgICBpbmZpbml0eTogSW5maW5pdHksXHJcbiAgICAgICAgICAgICAgICBuYW46IE5hTixcclxuICAgICAgICAgICAgICAgIG5lZ1plcm86IC0wXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzY2hlbWEgPSBhd2FpdCBzZXJ2aWNlLmdlbmVyYXRlU2NoZW1hKHRlc3REYXRhKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VkU2NoZW1hID0gSlNPTi5wYXJzZShzY2hlbWEpO1xyXG5cclxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlZFNjaGVtYS5wcm9wZXJ0aWVzLmludGVnZXIudHlwZSkudG9CZSgnaW50ZWdlcicpO1xyXG4gICAgICAgICAgICBleHBlY3QocGFyc2VkU2NoZW1hLnByb3BlcnRpZXMuZmxvYXQudHlwZSkudG9CZSgnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChwYXJzZWRTY2hlbWEucHJvcGVydGllcy5zY2llbnRpZmljLnR5cGUpLnRvQmUoJ251bWJlcicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSBiaW5hcnkgYW5kIGJ1ZmZlciBkYXRhJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcjogQnVmZmVyLmZyb20oJ3Rlc3QnKSxcclxuICAgICAgICAgICAgICAgIGJhc2U2NDogJ1NHVnNiRzhnVjI5eWJHUT0nLFxyXG4gICAgICAgICAgICAgICAgYmluYXJ5OiAnMGIxMDEwJ1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0gYXdhaXQgc2VydmljZS5nZW5lcmF0ZVNjaGVtYSh0ZXN0RGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFNjaGVtYSA9IEpTT04ucGFyc2Uoc2NoZW1hKTtcclxuXHJcbiAgICAgICAgICAgIGV4cGVjdChwYXJzZWRTY2hlbWEucHJvcGVydGllcy5idWZmZXIpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChwYXJzZWRTY2hlbWEucHJvcGVydGllcy5iYXNlNjQuZm9ybWF0KS50b0JlKCdieXRlJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChwYXJzZWRTY2hlbWEucHJvcGVydGllcy5iaW5hcnkudHlwZSkudG9CZSgnc3RyaW5nJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZSgnRXJyb3IgSGFuZGxpbmcgRWRnZSBDYXNlcycsICgpID0+IHtcclxuICAgICAgICBsZXQgc2VydmljZTogRGVlcFNlZWtTZXJ2aWNlO1xyXG5cclxuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICAgICAgc2VydmljZSA9IG5ldyBEZWVwU2Vla1NlcnZpY2UobW9ja0NvbmZpZyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgaGFuZGxlIG1hbGZvcm1lZCBKU09OIGlucHV0JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtYWxmb3JtZWRKc29uID0gJ3tuYW1lOiBcInRlc3RcIix9JzsgIC8vIOaXoOaViOeahCBKU09OXHJcbiAgICAgICAgICAgIGF3YWl0IGV4cGVjdChzZXJ2aWNlLmdlbmVyYXRlU2NoZW1hKG1hbGZvcm1lZEpzb24pKVxyXG4gICAgICAgICAgICAgICAgLnJlamVjdHMudG9UaHJvdygvaW52YWxpZCBqc29uL2kpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSBleHRyZW1lbHkgbmVzdGVkIHN0cnVjdHVyZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBkZWVwbHlOZXN0ZWQ6IGFueSA9IHsgdmFsdWU6IDEgfTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZGVlcGx5TmVzdGVkID0geyBuZXN0ZWQ6IGRlZXBseU5lc3RlZCB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBleHBlY3Qoc2VydmljZS5nZW5lcmF0ZVNjaGVtYShkZWVwbHlOZXN0ZWQpKVxyXG4gICAgICAgICAgICAgICAgLnJlamVjdHMudG9UaHJvdygvbWF4aW11bSBkZXB0aCBleGNlZWRlZC9pKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgaW52YWxpZCBBUEkgcmVzcG9uc2VzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDmqKHmi58gQVBJIOi/lOWbnuaXoOaViOWTjeW6lFxyXG4gICAgICAgICAgICBjb25zdCBtb2NrRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIHRlc3Q6ICdkYXRhJ1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8g5rOo5YWl6ZSZ6K+v5ZON5bqUXHJcbiAgICAgICAgICAgIGplc3Quc3B5T24oc2VydmljZSBhcyBhbnksICdjbGllbnQnKS5tb2NrSW1wbGVtZW50YXRpb25PbmNlKCgpID0+ICh7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGVDaGF0Q29tcGxldGlvbjogYXN5bmMgKCkgPT4gKHtcclxuICAgICAgICAgICAgICAgICAgICBjaG9pY2VzOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnbm90IGEgdmFsaWQgc2NoZW1hJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IGV4cGVjdChzZXJ2aWNlLmdlbmVyYXRlU2NoZW1hKG1vY2tEYXRhKSlcclxuICAgICAgICAgICAgICAgIC5yZWplY3RzLnRvVGhyb3coL2ludmFsaWQgc2NoZW1hL2kpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoJ1NjaGVtYSBWYWxpZGF0aW9uIEVkZ2UgQ2FzZXMnLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGdlbmVyYXRvcjogU2NoZW1hR2VuZXJhdG9yO1xyXG5cclxuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICAgICAgZ2VuZXJhdG9yID0ganNvbi5jcmVhdGVTY2hlbWFHZW5lcmF0b3Ioe1xyXG4gICAgICAgICAgICAgICAgdXNlQUk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkZWVwc2VlazogbW9ja0NvbmZpZ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgY3VzdG9tIGZvcm1hdHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlc3REYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcclxuICAgICAgICAgICAgICAgIHVyaTogJ2h0dHBzOi8vZXhhbXBsZS5jb20nLFxyXG4gICAgICAgICAgICAgICAgdXVpZDogJzEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMCcsXHJcbiAgICAgICAgICAgICAgICBob3N0bmFtZTogJ2V4YW1wbGUuY29tJ1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0gYXdhaXQgZ2VuZXJhdG9yLmdlbmVyYXRlU2NoZW1hKHRlc3REYXRhKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VkU2NoZW1hID0gSlNPTi5wYXJzZShzY2hlbWEpO1xyXG5cclxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlZFNjaGVtYS5wcm9wZXJ0aWVzLmVtYWlsLmZvcm1hdCkudG9CZSgnZW1haWwnKTtcclxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlZFNjaGVtYS5wcm9wZXJ0aWVzLnVyaS5mb3JtYXQpLnRvQmUoJ3VyaScpO1xyXG4gICAgICAgICAgICBleHBlY3QocGFyc2VkU2NoZW1hLnByb3BlcnRpZXMudXVpZC5mb3JtYXQpLnRvQmUoJ3V1aWQnKTtcclxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlZFNjaGVtYS5wcm9wZXJ0aWVzLmhvc3RuYW1lLmZvcm1hdCkudG9CZSgnaG9zdG5hbWUnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgcmVnZXggcGF0dGVybnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlc3REYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgcGhvbmU6ICcxMjMtNDU2LTc4OTAnLFxyXG4gICAgICAgICAgICAgICAgemlwQ29kZTogJzEyMzQ1JyxcclxuICAgICAgICAgICAgICAgIGN1c3RvbTogJ0FCQzEyMydcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IGF3YWl0IGdlbmVyYXRvci5nZW5lcmF0ZVNjaGVtYSh0ZXN0RGF0YSwge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBwaG9uZTogJ15cXFxcZHszfS1cXFxcZHszfS1cXFxcZHs0fSQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHppcENvZGU6ICdeXFxcXGR7NX0kJyxcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b206ICdeW0EtWl17M31cXFxcZHszfSQnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGFyc2VkU2NoZW1hID0gSlNPTi5wYXJzZShzY2hlbWEpO1xyXG4gICAgICAgICAgICBleHBlY3QocGFyc2VkU2NoZW1hLnByb3BlcnRpZXMucGhvbmUucGF0dGVybikudG9CZURlZmluZWQoKTtcclxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlZFNjaGVtYS5wcm9wZXJ0aWVzLnppcENvZGUucGF0dGVybikudG9CZURlZmluZWQoKTtcclxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlZFNjaGVtYS5wcm9wZXJ0aWVzLmN1c3RvbS5wYXR0ZXJuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=
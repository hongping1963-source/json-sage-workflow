{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\deepseek\\edge-cases.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\deepseek\\edge-cases.test.ts"],"sourcesContent":["import { json } from '../../index';\r\nimport { SchemaGenerator } from '../../core/SchemaGenerator';\r\nimport { DeepSeekService } from '../../core/DeepSeekService';\r\n\r\ndescribe('DeepSeek AI Edge Cases', () => {\r\n    const mockConfig = {\r\n        apiKey: process.env.JSONSAGE_DEEPSEEK_API_KEY || 'test-api-key'\r\n    };\r\n\r\n    describe('Special Data Types', () => {\r\n        let generator: SchemaGenerator;\r\n\r\n        beforeEach(() => {\r\n            generator = json.createSchemaGenerator({\r\n                useAI: true,\r\n                deepseek: mockConfig\r\n            });\r\n        });\r\n\r\n        it('should handle empty objects and arrays', async () => {\r\n            const testData = {\r\n                emptyObject: {},\r\n                emptyArray: [],\r\n                nullValue: null,\r\n                undefinedValue: undefined\r\n            };\r\n\r\n            const schema = await generator.generateSchema(testData);\r\n            const parsedSchema = JSON.parse(schema);\r\n\r\n            expect(parsedSchema.properties.emptyObject.type).toBe('object');\r\n            expect(parsedSchema.properties.emptyArray.type).toBe('array');\r\n            expect(parsedSchema.properties.nullValue.type).toBe('null');\r\n            expect(parsedSchema.properties.undefinedValue).toBeUndefined();\r\n        });\r\n\r\n        it('should handle special characters in field names', async () => {\r\n            const testData = {\r\n                '@special': 'value',\r\n                'field.with.dots': 123,\r\n                'field-with-dashes': true,\r\n                'field with spaces': 'test',\r\n                '123numeric': 456,\r\n                '$special&chars#': 'test'\r\n            };\r\n\r\n            const schema = await generator.generateSchema(testData);\r\n            const parsedSchema = JSON.parse(schema);\r\n\r\n            Object.keys(testData).forEach(key => {\r\n                expect(parsedSchema.properties[key]).toBeDefined();\r\n            });\r\n        });\r\n\r\n        it('should handle circular references', async () => {\r\n            const circular: any = {\r\n                name: 'test'\r\n            };\r\n            circular.self = circular;\r\n\r\n            await expect(generator.generateSchema(circular))\r\n                .rejects.toThrow(/circular/i);\r\n        });\r\n\r\n        it('should handle very long field names and values', async () => {\r\n            const longString = 'a'.repeat(1000);\r\n            const testData = {\r\n                [longString]: longString,\r\n                normalField: 'value'\r\n            };\r\n\r\n            const schema = await generator.generateSchema(testData);\r\n            const parsedSchema = JSON.parse(schema);\r\n\r\n            expect(parsedSchema.properties[longString]).toBeDefined();\r\n            expect(parsedSchema.properties[longString].type).toBe('string');\r\n        });\r\n    });\r\n\r\n    describe('Data Format Edge Cases', () => {\r\n        let service: DeepSeekService;\r\n\r\n        beforeEach(() => {\r\n            service = new DeepSeekService(mockConfig);\r\n        });\r\n\r\n        it('should handle various date formats', async () => {\r\n            const testData = {\r\n                iso: '2025-01-16T14:36:07+08:00',\r\n                shortDate: '2025-01-16',\r\n                timestamp: 1705387767000,\r\n                invalidDate: 'not-a-date'\r\n            };\r\n\r\n            const schema = await service.generateSchema(testData);\r\n            const parsedSchema = JSON.parse(schema);\r\n\r\n            expect(parsedSchema.properties.iso.format).toBe('date-time');\r\n            expect(parsedSchema.properties.shortDate.format).toBe('date');\r\n            expect(parsedSchema.properties.timestamp.type).toBe('integer');\r\n            expect(parsedSchema.properties.invalidDate.type).toBe('string');\r\n        });\r\n\r\n        it('should handle various number formats', async () => {\r\n            const testData = {\r\n                integer: 42,\r\n                float: 3.14,\r\n                scientific: 1.23e-4,\r\n                infinity: Infinity,\r\n                nan: NaN,\r\n                negZero: -0\r\n            };\r\n\r\n            const schema = await service.generateSchema(testData);\r\n            const parsedSchema = JSON.parse(schema);\r\n\r\n            expect(parsedSchema.properties.integer.type).toBe('integer');\r\n            expect(parsedSchema.properties.float.type).toBe('number');\r\n            expect(parsedSchema.properties.scientific.type).toBe('number');\r\n        });\r\n\r\n        it('should handle binary and buffer data', async () => {\r\n            const testData = {\r\n                buffer: Buffer.from('test'),\r\n                base64: 'SGVsbG8gV29ybGQ=',\r\n                binary: '0b1010'\r\n            };\r\n\r\n            const schema = await service.generateSchema(testData);\r\n            const parsedSchema = JSON.parse(schema);\r\n\r\n            expect(parsedSchema.properties.buffer).toBeDefined();\r\n            expect(parsedSchema.properties.base64.format).toBe('byte');\r\n            expect(parsedSchema.properties.binary.type).toBe('string');\r\n        });\r\n    });\r\n\r\n    describe('Error Handling Edge Cases', () => {\r\n        let service: DeepSeekService;\r\n\r\n        beforeEach(() => {\r\n            service = new DeepSeekService(mockConfig);\r\n        });\r\n\r\n        it('should handle malformed JSON input', async () => {\r\n            const malformedJson = '{name: \"test\",}';  // 无效的 JSON\r\n            await expect(service.generateSchema(malformedJson))\r\n                .rejects.toThrow(/invalid json/i);\r\n        });\r\n\r\n        it('should handle extremely nested structures', async () => {\r\n            let deeplyNested: any = { value: 1 };\r\n            for (let i = 0; i < 100; i++) {\r\n                deeplyNested = { nested: deeplyNested };\r\n            }\r\n\r\n            await expect(service.generateSchema(deeplyNested))\r\n                .rejects.toThrow(/maximum depth exceeded/i);\r\n        });\r\n\r\n        it('should handle invalid API responses', async () => {\r\n            // 模拟 API 返回无效响应\r\n            const mockData = {\r\n                test: 'data'\r\n            };\r\n\r\n            // 注入错误响应\r\n            jest.spyOn(service as any, 'client').mockImplementationOnce(() => ({\r\n                createChatCompletion: async () => ({\r\n                    choices: [{\r\n                        message: {\r\n                            content: 'not a valid schema'\r\n                        }\r\n                    }]\r\n                })\r\n            }));\r\n\r\n            await expect(service.generateSchema(mockData))\r\n                .rejects.toThrow(/invalid schema/i);\r\n        });\r\n    });\r\n\r\n    describe('Schema Validation Edge Cases', () => {\r\n        let generator: SchemaGenerator;\r\n\r\n        beforeEach(() => {\r\n            generator = json.createSchemaGenerator({\r\n                useAI: true,\r\n                deepseek: mockConfig\r\n            });\r\n        });\r\n\r\n        it('should handle custom formats', async () => {\r\n            const testData = {\r\n                email: 'test@example.com',\r\n                uri: 'https://example.com',\r\n                uuid: '123e4567-e89b-12d3-a456-426614174000',\r\n                hostname: 'example.com'\r\n            };\r\n\r\n            const schema = await generator.generateSchema(testData);\r\n            const parsedSchema = JSON.parse(schema);\r\n\r\n            expect(parsedSchema.properties.email.format).toBe('email');\r\n            expect(parsedSchema.properties.uri.format).toBe('uri');\r\n            expect(parsedSchema.properties.uuid.format).toBe('uuid');\r\n            expect(parsedSchema.properties.hostname.format).toBe('hostname');\r\n        });\r\n\r\n        it('should handle regex patterns', async () => {\r\n            const testData = {\r\n                phone: '123-456-7890',\r\n                zipCode: '12345',\r\n                custom: 'ABC123'\r\n            };\r\n\r\n            const schema = await generator.generateSchema(testData, {\r\n                patterns: {\r\n                    phone: '^\\\\d{3}-\\\\d{3}-\\\\d{4}$',\r\n                    zipCode: '^\\\\d{5}$',\r\n                    custom: '^[A-Z]{3}\\\\d{3}$'\r\n                }\r\n            });\r\n\r\n            const parsedSchema = JSON.parse(schema);\r\n            expect(parsedSchema.properties.phone.pattern).toBeDefined();\r\n            expect(parsedSchema.properties.zipCode.pattern).toBeDefined();\r\n            expect(parsedSchema.properties.custom.pattern).toBeDefined();\r\n        });\r\n    });\r\n});\r\n"],"version":3}
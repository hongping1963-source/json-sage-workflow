{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\test\\JsonSageAI.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\test\\JsonSageAI.test.ts"],"sourcesContent":["import { JsonSageAI } from '../src';\nimport { json } from '@zhanghongping/json-sage-workflow';\n\n// Mock json-sage-workflow\njest.mock('@zhanghongping/json-sage-workflow', () => ({\n  json: {\n    createWorkflow: jest.fn()\n  }\n}));\n\ndescribe('JsonSageAI Integration Tests', () => {\n  let ai: JsonSageAI;\n  let mockWorkflow: any;\n\n  beforeEach(() => {\n    // Clear all mocks\n    jest.clearAllMocks();\n\n    // Setup mock workflow\n    mockWorkflow = {\n      generateSchema: jest.fn(),\n      deepseek: {\n        generateFieldDescriptions: jest.fn(),\n        generateExamples: jest.fn()\n      }\n    };\n\n    (json.createWorkflow as jest.Mock).mockReturnValue(mockWorkflow);\n\n    // Create new instance\n    ai = JsonSageAI.create({\n      deepseekApiKey: 'test-api-key',\n      model: 'test-model',\n      temperature: 0.7\n    });\n  });\n\n  describe('generateSchema', () => {\n    it('should generate complete schema with descriptions and examples', async () => {\n      const testData = {\n        user: {\n          name: \"张三\",\n          age: 25,\n          email: \"zhangsan@example.com\"\n        }\n      };\n\n      const mockSchema = {\n        type: 'object',\n        properties: {\n          user: {\n            type: 'object',\n            properties: {\n              name: { type: 'string' },\n              age: { type: 'number' },\n              email: { type: 'string', format: 'email' }\n            }\n          }\n        }\n      };\n\n      const mockDescriptions = {\n        'user.name': '用户的姓名',\n        'user.age': '用户的年龄',\n        'user.email': '用户的电子邮件地址'\n      };\n\n      const mockExamples = {\n        user: {\n          name: \"李四\",\n          age: 30,\n          email: \"lisi@example.com\"\n        }\n      };\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce(mockSchema);\n      mockWorkflow.deepseek.generateFieldDescriptions.mockResolvedValueOnce(mockDescriptions);\n      mockWorkflow.deepseek.generateExamples.mockResolvedValueOnce(mockExamples);\n\n      const result = await ai.generateSchema({\n        jsonData: testData,\n        options: {\n          includeDescriptions: true,\n          includeExamples: true\n        }\n      });\n\n      expect(result.schema).toEqual(mockSchema);\n      expect(result.descriptions).toEqual(mockDescriptions);\n      expect(result.examples).toEqual(mockExamples);\n      expect(result.metadata.steps).toContain('Generating Schema');\n    });\n\n    it('should skip descriptions when not requested', async () => {\n      const testData = { test: 'data' };\n      const mockSchema = {\n        type: 'object',\n        properties: {\n          test: { type: 'string' }\n        }\n      };\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce(mockSchema);\n\n      const result = await ai.generateSchema({\n        jsonData: testData,\n        options: {\n          includeDescriptions: false,\n          includeExamples: false\n        }\n      });\n\n      expect(result.schema).toEqual(mockSchema);\n      expect(result.descriptions).toBeUndefined();\n      expect(result.examples).toBeUndefined();\n      expect(mockWorkflow.deepseek.generateFieldDescriptions).not.toHaveBeenCalled();\n      expect(mockWorkflow.deepseek.generateExamples).not.toHaveBeenCalled();\n    });\n\n    it('should handle complex nested objects', async () => {\n      const testData = {\n        order: {\n          id: \"ORD001\",\n          customer: {\n            id: \"CUST001\",\n            details: {\n              name: \"张三\",\n              contact: {\n                email: \"zhangsan@example.com\",\n                phone: \"13800138000\"\n              }\n            }\n          },\n          items: [\n            {\n              id: \"ITEM001\",\n              name: \"商品1\",\n              price: 99.99\n            }\n          ]\n        }\n      };\n\n      const mockSchema = {\n        type: 'object',\n        properties: {\n          order: {\n            type: 'object',\n            properties: {\n              id: { type: 'string' },\n              customer: {\n                type: 'object',\n                properties: {\n                  id: { type: 'string' },\n                  details: {\n                    type: 'object',\n                    properties: {\n                      name: { type: 'string' },\n                      contact: {\n                        type: 'object',\n                        properties: {\n                          email: { type: 'string', format: 'email' },\n                          phone: { type: 'string' }\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              items: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    id: { type: 'string' },\n                    name: { type: 'string' },\n                    price: { type: 'number' }\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce(mockSchema);\n\n      const result = await ai.generateSchema({\n        jsonData: testData,\n        options: {}\n      });\n\n      expect(result.schema).toEqual(mockSchema);\n      expect(mockWorkflow.generateSchema).toHaveBeenCalledWith(\n        testData,\n        expect.any(Object)\n      );\n    });\n\n    it('should handle errors in schema generation', async () => {\n      const testData = { test: 'data' };\n      const errorMessage = 'Schema generation failed';\n\n      mockWorkflow.generateSchema.mockRejectedValueOnce(new Error(errorMessage));\n\n      await expect(\n        ai.generateSchema({\n          jsonData: testData,\n          options: {}\n        })\n      ).rejects.toThrow(`Schema generation failed: ${errorMessage}`);\n    });\n\n    it('should handle errors in description generation', async () => {\n      const testData = { test: 'data' };\n      const mockSchema = {\n        type: 'object',\n        properties: {\n          test: { type: 'string' }\n        }\n      };\n      const errorMessage = 'Description generation failed';\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce(mockSchema);\n      mockWorkflow.deepseek.generateFieldDescriptions.mockRejectedValueOnce(\n        new Error(errorMessage)\n      );\n\n      const result = await ai.generateSchema({\n        jsonData: testData,\n        options: {\n          includeDescriptions: true,\n          includeExamples: false\n        }\n      });\n\n      expect(result.schema).toEqual(mockSchema);\n      expect(result.descriptions).toBeUndefined();\n      expect(result.metadata.errors).toContain(`Description generation failed: ${errorMessage}`);\n    });\n  });\n});\n"],"version":3}
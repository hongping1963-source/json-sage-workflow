0dd4031a342de5ff299d1576bedef239
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const JsonSageAI_1 = require("../src/agent/JsonSageAI");
const NLUParser_1 = require("../src/agent/NLUParser");
const SchemaGenerator_1 = require("../src/agent/SchemaGenerator");
describe('Product Schema Generation', () => {
    let agent;
    let nluParser;
    let schemaGenerator;
    beforeEach(() => {
        const config = {
            deepseekApiKey: 'test-key',
            model: 'test-model',
            maxTokens: 2000,
            temperature: 0.7
        };
        agent = new JsonSageAI_1.JsonSageAI(config);
        nluParser = new NLUParser_1.NLUParser();
        schemaGenerator = new SchemaGenerator_1.SchemaGenerator();
    });
    test('should generate product schema with name, price, and description', async () => {
        // 1. 测试用户输入
        const userInput = "为一个产品对象生成JSON Schema，包括名称、价格和描述。";
        // 2. 测试NLU解析
        const startTime = performance.now();
        const nluResult = await nluParser.parse(userInput);
        const nluTime = performance.now() - startTime;
        // 验证NLU解析结果
        expect(nluResult).toEqual({
            intent: "generate_schema",
            entity: "product",
            fields: [
                {
                    name: "名称",
                    type: "string"
                },
                {
                    name: "价格",
                    type: "number"
                },
                {
                    name: "描述",
                    type: "string"
                }
            ]
        });
        // 验证NLU解析时间
        expect(nluTime).toBeLessThan(200); // 应小于200ms
        // 3. 测试Schema生成
        const task = {
            jsonData: {
                name: "智能手表",
                price: 1299.99,
                description: "一款功能强大的智能手表，支持心率监测和运动追踪"
            },
            options: {
                includeDescriptions: true,
                includeExamples: true
            }
        };
        const schemaStartTime = performance.now();
        const result = await agent.generateSchema(task);
        const schemaTime = performance.now() - schemaStartTime;
        // 验证生成的Schema
        if (result.success) {
            expect(result.data.schema).toEqual({
                $schema: "http://json-schema.org/draft-07/schema#",
                type: "object",
                title: "产品对象",
                description: "描述产品的基本信息",
                properties: {
                    name: {
                        type: "string",
                        description: "产品名称",
                        minLength: 1
                    },
                    price: {
                        type: "number",
                        description: "产品价格",
                        minimum: 0
                    },
                    description: {
                        type: "string",
                        description: "产品描述",
                        minLength: 1
                    }
                },
                required: ["name", "price", "description"]
            });
            // 验证Schema生成时间
            expect(schemaTime).toBeLessThan(400); // 应小于400ms
            // 4. 验证示例数据
            const testData = {
                name: "智能手表",
                price: 1299.99,
                description: "一款功能强大的智能手表，支持心率监测和运动追踪"
            };
            const validateResult = agent.validateSchema(result.data.schema, testData);
            expect(validateResult.valid).toBe(true);
        }
        else {
            fail('Schema generation failed');
        }
    });
    test('should validate product data correctly', () => {
        const schema = {
            $schema: "http://json-schema.org/draft-07/schema#",
            type: "object",
            properties: {
                name: {
                    type: "string",
                    minLength: 1
                },
                price: {
                    type: "number",
                    minimum: 0
                },
                description: {
                    type: "string",
                    minLength: 1
                }
            },
            required: ["name", "price", "description"]
        };
        // 测试有效数据
        const validProduct = {
            name: "智能手表",
            price: 1299.99,
            description: "一款功能强大的智能手表"
        };
        expect(agent.validateSchema(schema, validProduct).valid).toBe(true);
        // 测试无效价格
        const invalidPrice = {
            name: "智能手表",
            price: -1,
            description: "一款功能强大的智能手表"
        };
        expect(agent.validateSchema(schema, invalidPrice).valid).toBe(false);
        // 测试空名称
        const emptyName = {
            name: "",
            price: 1299.99,
            description: "一款功能强大的智能手表"
        };
        expect(agent.validateSchema(schema, emptyName).valid).toBe(false);
    });
    test('should handle error cases gracefully', async () => {
        // 测试空输入
        await expect(nluParser.parse("")).rejects.toThrow();
        // 测试无效输入
        await expect(nluParser.parse("这是一个无效的输入")).rejects.toThrow();
        // 测试缺失字段
        const task = {
            jsonData: {
                name: "智能手表"
                // 缺少价格和描述
            },
            options: {}
        };
        const result = await agent.generateSchema(task);
        expect(result.success).toBe(false);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
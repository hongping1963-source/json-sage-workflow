{"version":3,"names":["cov_26et9mbbg","actualCoverage","s","SmartCache","constructor","options","b","f","cache","Map","totalSize","maxSize","ttl","smartPruning","set","key","value","size","calculateSize","console","warn","ensureCapacity","entry","timestamp","Date","now","accessCount","lastAccess","get","undefined","isExpired","delete","str","JSON","stringify","length","_a","requiredSize","smartPrune","simplePrune","scores","entries","timeFactor","accessFactor","Math","log","sizeFactor","score","sortedEntries","Array","from","sort","a","freedSpace","getStats","itemCount","utilization","averageAccessCount","calculateAverageAccessCount","total","values","exports"],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\cache.ts"],"sourcesContent":["interface CacheOptions {\r\n    maxSize?: number;        // 最大缓存条目数\r\n    ttl?: number;           // 缓存生存时间（毫秒）\r\n    smartPruning?: boolean; // 是否启用智能清理\r\n}\r\n\r\ninterface CacheEntry<T> {\r\n    value: T;\r\n    timestamp: number;\r\n    accessCount: number;\r\n    lastAccess: number;\r\n    size: number;\r\n}\r\n\r\nexport class SmartCache<T> {\r\n    private cache: Map<string, CacheEntry<T>> = new Map();\r\n    private options: Required<CacheOptions>;\r\n    private totalSize: number = 0;\r\n\r\n    constructor(options: CacheOptions = {}) {\r\n        this.options = {\r\n            maxSize: 1000,\r\n            ttl: 3600000, // 1小时\r\n            smartPruning: true,\r\n            ...options\r\n        };\r\n    }\r\n\r\n    set(key: string, value: T): void {\r\n        const size = this.calculateSize(value);\r\n        \r\n        // 如果新项目太大，直接返回\r\n        if (size > this.options.maxSize) {\r\n            console.warn(`Cache item too large: ${size} bytes`);\r\n            return;\r\n        }\r\n\r\n        // 确保有足够空间\r\n        this.ensureCapacity(size);\r\n\r\n        const entry: CacheEntry<T> = {\r\n            value,\r\n            timestamp: Date.now(),\r\n            accessCount: 0,\r\n            lastAccess: Date.now(),\r\n            size\r\n        };\r\n\r\n        this.cache.set(key, entry);\r\n        this.totalSize += size;\r\n    }\r\n\r\n    get(key: string): T | undefined {\r\n        const entry = this.cache.get(key);\r\n        \r\n        if (!entry) {\r\n            return undefined;\r\n        }\r\n\r\n        // 检查是否过期\r\n        if (this.isExpired(entry)) {\r\n            this.cache.delete(key);\r\n            this.totalSize -= entry.size;\r\n            return undefined;\r\n        }\r\n\r\n        // 更新访问统计\r\n        entry.accessCount++;\r\n        entry.lastAccess = Date.now();\r\n\r\n        return entry.value;\r\n    }\r\n\r\n    private calculateSize(value: T): number {\r\n        try {\r\n            const str = JSON.stringify(value);\r\n            return str.length * 2; // 假设每个字符占用2字节\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    private isExpired(entry: CacheEntry<T>): boolean {\r\n        return Date.now() - entry.timestamp > this.options.ttl;\r\n    }\r\n\r\n    private ensureCapacity(requiredSize: number): void {\r\n        if (this.totalSize + requiredSize <= this.options.maxSize) {\r\n            return;\r\n        }\r\n\r\n        if (this.options.smartPruning) {\r\n            this.smartPrune(requiredSize);\r\n        } else {\r\n            this.simplePrune(requiredSize);\r\n        }\r\n    }\r\n\r\n    private smartPrune(requiredSize: number): void {\r\n        // 计算每个条目的分数\r\n        const scores = new Map<string, number>();\r\n        \r\n        for (const [key, entry] of this.cache.entries()) {\r\n            // 分数计算考虑：\r\n            // 1. 访问频率\r\n            // 2. 最后访问时间\r\n            // 3. 条目大小\r\n            const timeFactor = (Date.now() - entry.lastAccess) / this.options.ttl;\r\n            const accessFactor = Math.log(entry.accessCount + 1);\r\n            const sizeFactor = entry.size / this.options.maxSize;\r\n\r\n            const score = (accessFactor / timeFactor) * (1 / sizeFactor);\r\n            scores.set(key, score);\r\n        }\r\n\r\n        // 按分数排序并删除低分条目\r\n        const sortedEntries = Array.from(scores.entries())\r\n            .sort((a, b) => a[1] - b[1]);\r\n\r\n        let freedSpace = 0;\r\n        for (const [key] of sortedEntries) {\r\n            const entry = this.cache.get(key)!;\r\n            this.cache.delete(key);\r\n            freedSpace += entry.size;\r\n            this.totalSize -= entry.size;\r\n\r\n            if (this.totalSize + requiredSize <= this.options.maxSize) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private simplePrune(requiredSize: number): void {\r\n        // 简单地删除最旧的条目\r\n        const entries = Array.from(this.cache.entries());\r\n        entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\r\n\r\n        for (const [key, entry] of entries) {\r\n            this.cache.delete(key);\r\n            this.totalSize -= entry.size;\r\n\r\n            if (this.totalSize + requiredSize <= this.options.maxSize) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 获取缓存统计信息\r\n    getStats() {\r\n        return {\r\n            totalSize: this.totalSize,\r\n            itemCount: this.cache.size,\r\n            maxSize: this.options.maxSize,\r\n            utilization: this.totalSize / this.options.maxSize,\r\n            averageAccessCount: this.calculateAverageAccessCount()\r\n        };\r\n    }\r\n\r\n    private calculateAverageAccessCount(): number {\r\n        if (this.cache.size === 0) return 0;\r\n        \r\n        let total = 0;\r\n        for (const entry of this.cache.values()) {\r\n            total += entry.accessCount;\r\n        }\r\n        return total / this.cache.size;\r\n    }\r\n}\r\n"],"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","ignoreList":[]}
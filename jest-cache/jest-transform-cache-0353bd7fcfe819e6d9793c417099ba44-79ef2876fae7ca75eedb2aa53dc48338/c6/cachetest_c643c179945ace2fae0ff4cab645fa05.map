{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\cache.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\cache.test.ts"],"sourcesContent":["import { SmartCache } from '../core/cache';\r\n\r\ndescribe('SmartCache', () => {\r\n    let cache: SmartCache<any>;\r\n\r\n    beforeEach(() => {\r\n        cache = new SmartCache({\r\n            maxSize: 1000,\r\n            ttl: 1000, // 1 second for testing\r\n            smartPruning: true\r\n        });\r\n    });\r\n\r\n    describe('Basic Operations', () => {\r\n        it('should store and retrieve values', () => {\r\n            const testData = { test: 'value' };\r\n            cache.set('key1', testData);\r\n            expect(cache.get('key1')).toEqual(testData);\r\n        });\r\n\r\n        it('should handle non-existent keys', () => {\r\n            expect(cache.get('nonexistent')).toBeUndefined();\r\n        });\r\n\r\n        it('should handle undefined and null values', () => {\r\n            cache.set('undefined', undefined);\r\n            cache.set('null', null);\r\n            \r\n            expect(cache.get('undefined')).toBeUndefined();\r\n            expect(cache.get('null')).toBeNull();\r\n        });\r\n    });\r\n\r\n    describe('TTL Functionality', () => {\r\n        it('should expire items after TTL', async () => {\r\n            const testData = { test: 'value' };\r\n            cache.set('expiring', testData);\r\n            \r\n            // Wait for TTL to expire\r\n            await new Promise(resolve => setTimeout(resolve, 1100));\r\n            \r\n            expect(cache.get('expiring')).toBeUndefined();\r\n        });\r\n\r\n        it('should reset TTL on access', async () => {\r\n            const testData = { test: 'value' };\r\n            cache.set('accessed', testData);\r\n            \r\n            // Access the item just before expiration\r\n            await new Promise(resolve => setTimeout(resolve, 900));\r\n            expect(cache.get('accessed')).toEqual(testData);\r\n            \r\n            // Wait another 900ms (total 1800ms, more than original TTL)\r\n            await new Promise(resolve => setTimeout(resolve, 900));\r\n            expect(cache.get('accessed')).toEqual(testData);\r\n        });\r\n    });\r\n\r\n    describe('Size Management', () => {\r\n        it('should handle large items', () => {\r\n            const largeData = { data: 'x'.repeat(2000) }; // Exceeds maxSize\r\n            cache.set('large', largeData);\r\n            expect(cache.get('large')).toBeUndefined();\r\n        });\r\n\r\n        it('should evict items when full', () => {\r\n            // Fill cache to capacity\r\n            for (let i = 0; i < 10; i++) {\r\n                cache.set(`key${i}`, { data: 'x'.repeat(90) });\r\n            }\r\n\r\n            // Add one more item\r\n            cache.set('newKey', { data: 'test' });\r\n\r\n            // Some old items should be evicted\r\n            let existingItems = 0;\r\n            for (let i = 0; i < 10; i++) {\r\n                if (cache.get(`key${i}`)) existingItems++;\r\n            }\r\n\r\n            expect(existingItems).toBeLessThan(10);\r\n            expect(cache.get('newKey')).toBeDefined();\r\n        });\r\n    });\r\n\r\n    describe('Smart Pruning', () => {\r\n        it('should prefer keeping frequently accessed items', () => {\r\n            // Add items\r\n            for (let i = 0; i < 5; i++) {\r\n                cache.set(`key${i}`, { data: 'x'.repeat(100) });\r\n            }\r\n\r\n            // Access some items frequently\r\n            for (let i = 0; i < 10; i++) {\r\n                cache.get('key0');\r\n                cache.get('key1');\r\n            }\r\n\r\n            // Fill cache to force eviction\r\n            for (let i = 5; i < 10; i++) {\r\n                cache.set(`key${i}`, { data: 'x'.repeat(100) });\r\n            }\r\n\r\n            // Frequently accessed items should still be there\r\n            expect(cache.get('key0')).toBeDefined();\r\n            expect(cache.get('key1')).toBeDefined();\r\n        });\r\n    });\r\n\r\n    describe('Statistics', () => {\r\n        it('should track cache statistics', () => {\r\n            cache.set('key1', 'value1');\r\n            cache.get('key1');\r\n            cache.get('key1');\r\n\r\n            const stats = cache.getStats();\r\n            expect(stats).toHaveProperty('totalSize');\r\n            expect(stats).toHaveProperty('itemCount');\r\n            expect(stats).toHaveProperty('utilization');\r\n            expect(stats).toHaveProperty('averageAccessCount');\r\n            expect(stats.itemCount).toBe(1);\r\n            expect(stats.averageAccessCount).toBe(2);\r\n        });\r\n    });\r\n\r\n    describe('Edge Cases', () => {\r\n        it('should handle circular references', () => {\r\n            const circular: any = { name: 'test' };\r\n            circular.self = circular;\r\n\r\n            expect(() => cache.set('circular', circular)).not.toThrow();\r\n        });\r\n\r\n        it('should handle various data types', () => {\r\n            const testCases = [\r\n                ['string', 'test string'],\r\n                ['number', 123],\r\n                ['boolean', true],\r\n                ['array', [1, 2, 3]],\r\n                ['date', new Date()],\r\n                ['regexp', /test/],\r\n                ['function', function() { return 'test'; }]\r\n            ];\r\n\r\n            testCases.forEach(([key, value]) => {\r\n                cache.set(key as string, value);\r\n                expect(cache.get(key as string)).toEqual(value);\r\n            });\r\n        });\r\n    });\r\n});\r\n"],"version":3}
{"version":3,"names":["cov_1am8lwm115","actualCoverage","s","TypeGenerator","constructor","options","b","interfaceName","exportType","strictNullChecks","f","generateTypeDefinitions","jsonSchema","exportKeyword","generateTypeFromSchema","schema","typeName","indent","type","properties","Object","entries","map","key","prop","isRequired","_a","required","includes","propertyType","getPropertyType","join","items","itemType","getPrimitiveType","nestedTypeName","Math","random","toString","substring","enum","value","typeMap","exports","generator"],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\typeGenerator.ts"],"sourcesContent":["import { JSONSchema7 } from 'json-schema';\r\n\r\ninterface TypeGeneratorOptions {\r\n    interfaceName?: string;\r\n    exportType?: boolean;\r\n    strictNullChecks?: boolean;\r\n}\r\n\r\nexport class TypeGenerator {\r\n    constructor(private options: TypeGeneratorOptions = {\r\n        interfaceName: 'GeneratedType',\r\n        exportType: true,\r\n        strictNullChecks: true\r\n    }) {}\r\n\r\n    generateTypeDefinitions(jsonSchema: JSONSchema7): string {\r\n        const { interfaceName = 'GeneratedType', exportType = true } = this.options;\r\n        const exportKeyword = exportType ? 'export ' : '';\r\n        \r\n        return this.generateTypeFromSchema(jsonSchema, interfaceName, exportKeyword);\r\n    }\r\n\r\n    private generateTypeFromSchema(\r\n        schema: JSONSchema7,\r\n        typeName: string,\r\n        exportKeyword: string,\r\n        indent: string = ''\r\n    ): string {\r\n        if (!schema) return 'any';\r\n\r\n        if (schema.type === 'object' && schema.properties) {\r\n            const properties = Object.entries(schema.properties)\r\n                .map(([key, prop]) => {\r\n                    const isRequired = schema.required?.includes(key);\r\n                    const propertyType = this.getPropertyType(prop as JSONSchema7);\r\n                    return `${indent}  ${key}${isRequired ? '' : '?'}: ${propertyType};`;\r\n                })\r\n                .join('\\n');\r\n\r\n            return `${exportKeyword}interface ${typeName} {\\n${properties}\\n${indent}}`;\r\n        }\r\n\r\n        if (schema.type === 'array' && schema.items) {\r\n            const itemType = this.getPropertyType(schema.items as JSONSchema7);\r\n            return `${itemType}[]`;\r\n        }\r\n\r\n        return this.getPrimitiveType(schema.type as string);\r\n    }\r\n\r\n    private getPropertyType(schema: JSONSchema7): string {\r\n        if (schema.type === 'object' && schema.properties) {\r\n            const nestedTypeName = 'Nested' + Math.random().toString(36).substring(7);\r\n            return this.generateTypeFromSchema(schema, nestedTypeName, '', '  ');\r\n        }\r\n\r\n        if (schema.type === 'array' && schema.items) {\r\n            return `${this.getPropertyType(schema.items as JSONSchema7)}[]`;\r\n        }\r\n\r\n        if (schema.enum) {\r\n            return schema.enum.map(value => {\r\n                if (typeof value === 'string') return `'${value}'`;\r\n                return value;\r\n            }).join(' | ');\r\n        }\r\n\r\n        return this.getPrimitiveType(schema.type as string);\r\n    }\r\n\r\n    private getPrimitiveType(type: string): string {\r\n        const typeMap: Record<string, string> = {\r\n            'string': 'string',\r\n            'number': 'number',\r\n            'integer': 'number',\r\n            'boolean': 'boolean',\r\n            'null': 'null',\r\n            'any': 'any'\r\n        };\r\n\r\n        return typeMap[type] || 'any';\r\n    }\r\n}\r\n\r\nexport const generateTypeDefinitions = async (\r\n    jsonSchema: JSONSchema7,\r\n    options?: TypeGeneratorOptions\r\n): Promise<string> => {\r\n    const generator = new TypeGenerator(options);\r\n    return generator.generateTypeDefinitions(jsonSchema);\r\n};\r\n"],"mappingsoBK;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AAZL,MAAaC,aAAa;EACtBC,YAAoBC,OAAA;EAAA;EAAA,CAAAL,cAAA,GAAAM,CAAA,UAAgC;IAChDC,aAAa,EAAE,eAAe;IAC9BC,UAAU,EAAE,IAAI;IAChBC,gBAAgB,EAAE;GACrB;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IAJmB,KAAAG,OAAO,GAAPA,OAAO;EAIvB;EAEJM,uBAAuBA,CAACC,UAAuB;IAAA;IAAAZ,cAAA,GAAAU,CAAA;IAC3C,MAAM;MAAEH,aAAa;MAAA;MAAA,CAAAP,cAAA,GAAAM,CAAA,UAAG,eAAe;MAAEE,UAAU;MAAA;MAAA,CAAAR,cAAA,GAAAM,CAAA,UAAG,IAAI;IAAA,CAAE;IAAA;IAAA,CAAAN,cAAA,GAAAE,CAAA,OAAG,IAAI,CAACG,OAAO;IAC3E,MAAMQ,aAAa;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,OAAGM,UAAU;IAAA;IAAA,CAAAR,cAAA,GAAAM,CAAA,UAAG,SAAS;IAAA;IAAA,CAAAN,cAAA,GAAAM,CAAA,UAAG,EAAE;IAAC;IAAAN,cAAA,GAAAE,CAAA;IAElD,OAAO,IAAI,CAACY,sBAAsB,CAACF,UAAU,EAAEL,aAAa,EAAEM,aAAa,CAAC;EAChF;EAEQC,sBAAsBA,CAC1BC,MAAmB,EACnBC,QAAgB,EAChBH,aAAqB,EACrBI,MAAA;EAAA;EAAA,CAAAjB,cAAA,GAAAM,CAAA,UAAiB,EAAE;IAAA;IAAAN,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IAEnB,IAAI,CAACa,MAAM,EAAE;MAAA;MAAAf,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MAAA,OAAO,KAAK;IAAA,CAAC;IAAA;IAAA;MAAAF,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAE1B;IAAI;IAAA,CAAAF,cAAA,GAAAM,CAAA,UAAAS,MAAM,CAACG,IAAI,KAAK,QAAQ;IAAA;IAAA,CAAAlB,cAAA,GAAAM,CAAA,UAAIS,MAAM,CAACI,UAAU,GAAE;MAAA;MAAAnB,cAAA,GAAAM,CAAA;MAC/C,MAAMa,UAAU;MAAA;MAAA,CAAAnB,cAAA,GAAAE,CAAA,OAAGkB,MAAM,CAACC,OAAO,CAACN,MAAM,CAACI,UAAU,CAAC,CAC/CG,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,IAAI,CAAC,KAAI;QAAA;QAAAxB,cAAA,GAAAU,CAAA;;QACjB,MAAMe,UAAU;QAAA;QAAA,CAAAzB,cAAA,GAAAE,CAAA;QAAG;QAAA,CAAAF,cAAA,GAAAM,CAAA,WAAAoB,EAAA,GAAAX,MAAM,CAACY,QAAQ;QAAA;QAAA,CAAA3B,cAAA,GAAAM,CAAA,UAAAoB,EAAA;QAAA;QAAA,CAAA1B,cAAA,GAAAM,CAAA;QAAA;QAAA,CAAAN,cAAA,GAAAM,CAAA,UAAAoB,EAAA,CAAEE,QAAQ,CAACL,GAAG,CAAC;QACjD,MAAMM,YAAY;QAAA;QAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,IAAI,CAAC4B,eAAe,CAACN,IAAmB,CAAC;QAAC;QAAAxB,cAAA,GAAAE,CAAA;QAC/D,OAAO,GAAGe,MAAM,KAAKM,GAAG,GAAGE,UAAU;QAAA;QAAA,CAAAzB,cAAA,GAAAM,CAAA,WAAG,EAAE;QAAA;QAAA,CAAAN,cAAA,GAAAM,CAAA,WAAG,GAAG,MAAKuB,YAAY,GAAG;MACxE,CAAC,CAAC,CACDE,IAAI,CAAC,IAAI,CAAC;MAAC;MAAA/B,cAAA,GAAAE,CAAA;MAEhB,OAAO,GAAGW,aAAa,aAAaG,QAAQ,OAAOG,UAAU,KAAKF,MAAM,GAAG;KAC9E;IAAA;IAAA;MAAAjB,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAED;IAAI;IAAA,CAAAF,cAAA,GAAAM,CAAA,WAAAS,MAAM,CAACG,IAAI,KAAK,OAAO;IAAA;IAAA,CAAAlB,cAAA,GAAAM,CAAA,WAAIS,MAAM,CAACiB,KAAK,GAAE;MAAA;MAAAhC,cAAA,GAAAM,CAAA;MACzC,MAAM2B,QAAQ;MAAA;MAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAG,IAAI,CAAC4B,eAAe,CAACf,MAAM,CAACiB,KAAoB,CAAC;MAAC;MAAAhC,cAAA,GAAAE,CAAA;MACnE,OAAO,GAAG+B,QAAQ,IAAI;KACzB;IAAA;IAAA;MAAAjC,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAED,OAAO,IAAI,CAACgC,gBAAgB,CAACnB,MAAM,CAACG,IAAc,CAAC;EACvD;EAEQY,eAAeA,CAACf,MAAmB;IAAA;IAAAf,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACvC;IAAI;IAAA,CAAAF,cAAA,GAAAM,CAAA,WAAAS,MAAM,CAACG,IAAI,KAAK,QAAQ;IAAA;IAAA,CAAAlB,cAAA,GAAAM,CAAA,WAAIS,MAAM,CAACI,UAAU,GAAE;MAAA;MAAAnB,cAAA,GAAAM,CAAA;MAC/C,MAAM6B,cAAc;MAAA;MAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAG,QAAQ,GAAGkC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC;MAAC;MAAAvC,cAAA,GAAAE,CAAA;MAC1E,OAAO,IAAI,CAACY,sBAAsB,CAACC,MAAM,EAAEoB,cAAc,EAAE,EAAE,EAAE,IAAI,CAAC;KACvE;IAAA;IAAA;MAAAnC,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAED;IAAI;IAAA,CAAAF,cAAA,GAAAM,CAAA,WAAAS,MAAM,CAACG,IAAI,KAAK,OAAO;IAAA;IAAA,CAAAlB,cAAA,GAAAM,CAAA,WAAIS,MAAM,CAACiB,KAAK,GAAE;MAAA;MAAAhC,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MACzC,OAAO,GAAG,IAAI,CAAC4B,eAAe,CAACf,MAAM,CAACiB,KAAoB,CAAC,IAAI;KAClE;IAAA;IAAA;MAAAhC,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAED,IAAIa,MAAM,CAACyB,IAAI,EAAE;MAAA;MAAAxC,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MACb,OAAOa,MAAM,CAACyB,IAAI,CAAClB,GAAG,CAACmB,KAAK,IAAG;QAAA;QAAAzC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAE,CAAA;QAC3B,IAAI,OAAOuC,KAAK,KAAK,QAAQ,EAAE;UAAA;UAAAzC,cAAA,GAAAM,CAAA;UAAAN,cAAA,GAAAE,CAAA;UAAA,OAAO,IAAIuC,KAAK,GAAG;QAAA,CAAC;QAAA;QAAA;UAAAzC,cAAA,GAAAM,CAAA;QAAA;QAAAN,cAAA,GAAAE,CAAA;QACnD,OAAOuC,KAAK;MAChB,CAAC,CAAC,CAACV,IAAI,CAAC,KAAK,CAAC;KACjB;IAAA;IAAA;MAAA/B,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAED,OAAO,IAAI,CAACgC,gBAAgB,CAACnB,MAAM,CAACG,IAAc,CAAC;EACvD;EAEQgB,gBAAgBA,CAAChB,IAAY;IAAA;IAAAlB,cAAA,GAAAU,CAAA;IACjC,MAAMgC,OAAO;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAA2B;MACpC,QAAQ,EAAE,QAAQ;MAClB,QAAQ,EAAE,QAAQ;MAClB,SAAS,EAAE,QAAQ;MACnB,SAAS,EAAE,SAAS;MACpB,MAAM,EAAE,MAAM;MACd,KAAK,EAAE;KACV;IAAC;IAAAF,cAAA,GAAAE,CAAA;IAEF,OAAO,2BAAAF,cAAA,GAAAM,CAAA,WAAAoC,OAAO,CAACxB,IAAI,CAAC;IAAA;IAAA,CAAAlB,cAAA,GAAAM,CAAA,WAAI,KAAK;EACjC;;AACH;AAAAN,cAAA,GAAAE,CAAA;AA1EDyC,OAAA,CAAAxC,aAAA,GAAAA,aAAA;AA0EC;AAAAH,cAAA,GAAAE,CAAA;AAEM,MAAMS,uBAAuB,GAAG,MAAAA,CACnCC,UAAuB,EACvBP,OAA8B,KACb;EAAA;EAAAL,cAAA,GAAAU,CAAA;EACjB,MAAMkC,SAAS;EAAA;EAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAG,IAAIC,aAAa,CAACE,OAAO,CAAC;EAAC;EAAAL,cAAA,GAAAE,CAAA;EAC7C,OAAO0C,SAAS,CAACjC,uBAAuB,CAACC,UAAU,CAAC;AACxD,CAAC;AAAC;AAAAZ,cAAA,GAAAE,CAAA;AANWyC,OAAA,CAAAhC,uBAAuB,GAAAA,uBAAA","ignoreList":[]}
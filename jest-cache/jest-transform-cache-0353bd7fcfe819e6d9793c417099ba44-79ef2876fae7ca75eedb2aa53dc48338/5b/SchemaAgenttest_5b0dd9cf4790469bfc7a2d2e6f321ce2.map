{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\test\\SchemaAgent.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\test\\SchemaAgent.test.ts"],"sourcesContent":["import { SchemaAgent } from '../src/agent/SchemaAgent';\nimport { json } from '@zhanghongping/json-sage-workflow';\n\n// Mock the json-sage-workflow\njest.mock('@zhanghongping/json-sage-workflow', () => ({\n  json: {\n    createWorkflow: jest.fn().mockReturnValue({\n      generateSchema: jest.fn()\n    })\n  }\n}));\n\ndescribe('SchemaAgent', () => {\n  let agent: SchemaAgent;\n  let mockWorkflow: any;\n\n  beforeEach(() => {\n    // Clear all mocks\n    jest.clearAllMocks();\n    \n    // Create a new instance of SchemaAgent\n    agent = new SchemaAgent({\n      deepseekApiKey: 'test-key',\n      model: 'test-model'\n    });\n\n    // Get the mock workflow instance\n    mockWorkflow = (json.createWorkflow as jest.Mock)();\n  });\n\n  describe('generateSchema', () => {\n    it('should generate schema for simple object', async () => {\n      const testData = {\n        name: 'John Doe',\n        age: 30,\n        isActive: true\n      };\n\n      const expectedSchema = {\n        type: 'object',\n        properties: {\n          name: { type: 'string' },\n          age: { type: 'number' },\n          isActive: { type: 'boolean' }\n        }\n      };\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);\n\n      const result = await agent.generateSchema({\n        jsonData: testData,\n        options: {}\n      });\n\n      expect(result.schema).toEqual(expectedSchema);\n      expect(mockWorkflow.generateSchema).toHaveBeenCalledWith(testData, expect.any(Object));\n    });\n\n    it('should generate schema for nested objects', async () => {\n      const testData = {\n        user: {\n          name: '张三',\n          address: {\n            city: '北京',\n            zipCode: '100000'\n          }\n        }\n      };\n\n      const expectedSchema = {\n        type: 'object',\n        properties: {\n          user: {\n            type: 'object',\n            properties: {\n              name: { type: 'string' },\n              address: {\n                type: 'object',\n                properties: {\n                  city: { type: 'string' },\n                  zipCode: { type: 'string' }\n                }\n              }\n            }\n          }\n        }\n      };\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);\n\n      const result = await agent.generateSchema({\n        jsonData: testData,\n        options: {}\n      });\n\n      expect(result.schema).toEqual(expectedSchema);\n    });\n\n    it('should generate schema for arrays', async () => {\n      const testData = {\n        tags: ['typescript', 'javascript'],\n        scores: [95, 87, 92]\n      };\n\n      const expectedSchema = {\n        type: 'object',\n        properties: {\n          tags: {\n            type: 'array',\n            items: { type: 'string' }\n          },\n          scores: {\n            type: 'array',\n            items: { type: 'number' }\n          }\n        }\n      };\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);\n\n      const result = await agent.generateSchema({\n        jsonData: testData,\n        options: {}\n      });\n\n      expect(result.schema).toEqual(expectedSchema);\n    });\n\n    it('should handle empty objects', async () => {\n      const testData = {};\n      const expectedSchema = {\n        type: 'object',\n        properties: {}\n      };\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);\n\n      const result = await agent.generateSchema({\n        jsonData: testData,\n        options: {}\n      });\n\n      expect(result.schema).toEqual(expectedSchema);\n    });\n\n    it('should handle null values', async () => {\n      const testData = {\n        name: null,\n        description: null\n      };\n\n      const expectedSchema = {\n        type: 'object',\n        properties: {\n          name: { type: 'null' },\n          description: { type: 'null' }\n        }\n      };\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);\n\n      const result = await agent.generateSchema({\n        jsonData: testData,\n        options: {}\n      });\n\n      expect(result.schema).toEqual(expectedSchema);\n    });\n\n    it('should handle errors gracefully', async () => {\n      const testData = { test: 'data' };\n      const errorMessage = 'Schema generation failed';\n\n      mockWorkflow.generateSchema.mockRejectedValueOnce(new Error(errorMessage));\n\n      await expect(\n        agent.generateSchema({\n          jsonData: testData,\n          options: {}\n        })\n      ).rejects.toThrow(`Schema generation failed: ${errorMessage}`);\n    });\n\n    it('should pass options to workflow', async () => {\n      const testData = { test: 'data' };\n      const options = {\n        format: 'draft-07',\n        additionalProperties: false\n      };\n\n      mockWorkflow.generateSchema.mockResolvedValueOnce({\n        type: 'object',\n        properties: { test: { type: 'string' } }\n      });\n\n      await agent.generateSchema({\n        jsonData: testData,\n        options\n      });\n\n      expect(mockWorkflow.generateSchema).toHaveBeenCalledWith(\n        testData,\n        expect.objectContaining(options)\n      );\n    });\n  });\n});\n"],"version":3}
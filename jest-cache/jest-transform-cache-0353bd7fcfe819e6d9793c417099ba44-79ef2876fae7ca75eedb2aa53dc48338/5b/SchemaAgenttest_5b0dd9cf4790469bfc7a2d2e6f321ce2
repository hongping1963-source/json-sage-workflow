4d3e7dd629437183fcdcf47091104bbf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the json-sage-workflow
jest.mock('@zhanghongping/json-sage-workflow', () => ({
    json: {
        createWorkflow: jest.fn().mockReturnValue({
            generateSchema: jest.fn()
        })
    }
}));
const SchemaAgent_1 = require("../src/agent/SchemaAgent");
const json_sage_workflow_1 = require("@zhanghongping/json-sage-workflow");
describe('SchemaAgent', () => {
    let agent;
    let mockWorkflow;
    beforeEach(() => {
        // Clear all mocks
        jest.clearAllMocks();
        // Create a new instance of SchemaAgent
        agent = new SchemaAgent_1.SchemaAgent({
            deepseekApiKey: 'test-key',
            model: 'test-model'
        });
        // Get the mock workflow instance
        mockWorkflow = json_sage_workflow_1.json.createWorkflow();
    });
    describe('generateSchema', () => {
        it('should generate schema for simple object', async () => {
            const testData = {
                name: 'John Doe',
                age: 30,
                isActive: true
            };
            const expectedSchema = {
                type: 'object',
                properties: {
                    name: { type: 'string' },
                    age: { type: 'number' },
                    isActive: { type: 'boolean' }
                }
            };
            mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);
            const result = await agent.generateSchema({
                jsonData: testData,
                options: {}
            });
            expect(result.schema).toEqual(expectedSchema);
            expect(mockWorkflow.generateSchema).toHaveBeenCalledWith(testData, expect.any(Object));
        });
        it('should generate schema for nested objects', async () => {
            const testData = {
                user: {
                    name: '张三',
                    address: {
                        city: '北京',
                        zipCode: '100000'
                    }
                }
            };
            const expectedSchema = {
                type: 'object',
                properties: {
                    user: {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            address: {
                                type: 'object',
                                properties: {
                                    city: { type: 'string' },
                                    zipCode: { type: 'string' }
                                }
                            }
                        }
                    }
                }
            };
            mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);
            const result = await agent.generateSchema({
                jsonData: testData,
                options: {}
            });
            expect(result.schema).toEqual(expectedSchema);
        });
        it('should generate schema for arrays', async () => {
            const testData = {
                tags: ['typescript', 'javascript'],
                scores: [95, 87, 92]
            };
            const expectedSchema = {
                type: 'object',
                properties: {
                    tags: {
                        type: 'array',
                        items: { type: 'string' }
                    },
                    scores: {
                        type: 'array',
                        items: { type: 'number' }
                    }
                }
            };
            mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);
            const result = await agent.generateSchema({
                jsonData: testData,
                options: {}
            });
            expect(result.schema).toEqual(expectedSchema);
        });
        it('should handle empty objects', async () => {
            const testData = {};
            const expectedSchema = {
                type: 'object',
                properties: {}
            };
            mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);
            const result = await agent.generateSchema({
                jsonData: testData,
                options: {}
            });
            expect(result.schema).toEqual(expectedSchema);
        });
        it('should handle null values', async () => {
            const testData = {
                name: null,
                description: null
            };
            const expectedSchema = {
                type: 'object',
                properties: {
                    name: { type: 'null' },
                    description: { type: 'null' }
                }
            };
            mockWorkflow.generateSchema.mockResolvedValueOnce(expectedSchema);
            const result = await agent.generateSchema({
                jsonData: testData,
                options: {}
            });
            expect(result.schema).toEqual(expectedSchema);
        });
        it('should handle errors gracefully', async () => {
            const testData = { test: 'data' };
            const errorMessage = 'Schema generation failed';
            mockWorkflow.generateSchema.mockRejectedValueOnce(new Error(errorMessage));
            await expect(agent.generateSchema({
                jsonData: testData,
                options: {}
            })).rejects.toThrow(`Schema generation failed: ${errorMessage}`);
        });
        it('should pass options to workflow', async () => {
            const testData = { test: 'data' };
            const options = {
                format: 'draft-07',
                additionalProperties: false
            };
            mockWorkflow.generateSchema.mockResolvedValueOnce({
                type: 'object',
                properties: { test: { type: 'string' } }
            });
            await agent.generateSchema({
                jsonData: testData,
                options
            });
            expect(mockWorkflow.generateSchema).toHaveBeenCalledWith(testData, expect.objectContaining(options));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
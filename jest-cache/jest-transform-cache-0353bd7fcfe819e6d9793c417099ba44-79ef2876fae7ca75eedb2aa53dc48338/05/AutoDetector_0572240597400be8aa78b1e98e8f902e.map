{"version":3,"names":["cov_2mjws1kevv","actualCoverage","s","fs_1","require","path_1","analyzer_1","typeGenerator_1","JsonSageAutoDetector","constructor","options","b","generateTypes","f","watchPaths","Set","typeCache","Map","watchDirectories","directories","forEach","dir","has","add","initializeWatcher","directory","watch","recursive","eventType","filename","endsWith","fullPath","join","processJsonFile","filePath","structure","analyzeJsonStructure","typeDefinition","generateTypeDefinitions","set","typePath","replace","writeTypeDefinition","error","console","path","content","getTypeDefinition","get","exports"],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\core\\AutoDetector.ts"],"sourcesContent":["import { watch } from 'fs';\r\nimport { join } from 'path';\r\nimport { analyzeJsonStructure } from './analyzer';\r\nimport { generateTypeDefinitions } from './typeGenerator';\r\n\r\nexport class JsonSageAutoDetector {\r\n    private watchPaths: Set<string> = new Set();\r\n    private typeCache: Map<string, any> = new Map();\r\n\r\n    constructor(private options = { generateTypes: true }) {}\r\n\r\n    public watchDirectories(directories: string[]) {\r\n        directories.forEach(dir => {\r\n            if (!this.watchPaths.has(dir)) {\r\n                this.watchPaths.add(dir);\r\n                this.initializeWatcher(dir);\r\n            }\r\n        });\r\n    }\r\n\r\n    private initializeWatcher(directory: string) {\r\n        watch(directory, { recursive: true }, async (eventType, filename) => {\r\n            if (filename && filename.endsWith('.json')) {\r\n                const fullPath = join(directory, filename);\r\n                await this.processJsonFile(fullPath);\r\n            }\r\n        });\r\n    }\r\n\r\n    private async processJsonFile(filePath: string) {\r\n        try {\r\n            // 分析JSON结构\r\n            const structure = await analyzeJsonStructure(filePath);\r\n            \r\n            // 生成类型定义\r\n            if (this.options.generateTypes) {\r\n                const typeDefinition = await generateTypeDefinitions(structure);\r\n                this.typeCache.set(filePath, typeDefinition);\r\n                \r\n                // 自动生成.d.ts文件\r\n                const typePath = filePath.replace('.json', '.d.ts');\r\n                await this.writeTypeDefinition(typePath, typeDefinition);\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error processing ${filePath}:`, error);\r\n        }\r\n    }\r\n\r\n    private async writeTypeDefinition(path: string, content: string) {\r\n        // 实现类型定义文件的写入逻辑\r\n    }\r\n\r\n    public getTypeDefinition(filePath: string) {\r\n        return this.typeCache.get(filePath);\r\n    }\r\n}\r\n"],"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","ignoreList":[]}
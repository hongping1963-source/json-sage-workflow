{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\deepseek\\schema.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\deepseek\\schema.test.ts"],"sourcesContent":["import { SchemaService } from '../../core/deepseek/SchemaService';\r\nimport { DeepSeekClient } from '../../core/deepseek/DeepSeekClient';\r\n\r\njest.mock('../../core/deepseek/DeepSeekClient');\r\n\r\ndescribe('SchemaService', () => {\r\n    const mockConfig = {\r\n        apiKey: 'test-api-key',\r\n        model: 'test-model'\r\n    };\r\n\r\n    const mockJsonData = {\r\n        name: 'John Doe',\r\n        age: 30,\r\n        email: 'john@example.com'\r\n    };\r\n\r\n    const mockSchemaResponse = {\r\n        id: 'test-id',\r\n        choices: [{\r\n            message: {\r\n                content: JSON.stringify({\r\n                    $schema: 'http://json-schema.org/draft-07/schema#',\r\n                    type: 'object',\r\n                    properties: {\r\n                        name: { type: 'string' },\r\n                        age: { type: 'integer' },\r\n                        email: { type: 'string', format: 'email' }\r\n                    }\r\n                })\r\n            }\r\n        }]\r\n    };\r\n\r\n    beforeEach(() => {\r\n        jest.clearAllMocks();\r\n        (DeepSeekClient as jest.Mock).mockClear();\r\n    });\r\n\r\n    describe('generateSchema', () => {\r\n        it('should generate schema successfully', async () => {\r\n            const mockCreateChatCompletion = jest.fn().mockResolvedValue(mockSchemaResponse);\r\n            (DeepSeekClient as jest.Mock).mockImplementation(() => ({\r\n                createChatCompletion: mockCreateChatCompletion\r\n            }));\r\n\r\n            const service = new SchemaService(mockConfig);\r\n            const schema = await service.generateSchema(mockJsonData);\r\n\r\n            expect(schema).toBeDefined();\r\n            const parsedSchema = JSON.parse(schema);\r\n            expect(parsedSchema.$schema).toBe('http://json-schema.org/draft-07/schema#');\r\n            expect(parsedSchema.properties).toBeDefined();\r\n            expect(mockCreateChatCompletion).toHaveBeenCalled();\r\n        });\r\n\r\n        it('should handle invalid JSON response', async () => {\r\n            const mockCreateChatCompletion = jest.fn().mockResolvedValue({\r\n                choices: [{\r\n                    message: {\r\n                        content: 'invalid json'\r\n                    }\r\n                }]\r\n            });\r\n            (DeepSeekClient as jest.Mock).mockImplementation(() => ({\r\n                createChatCompletion: mockCreateChatCompletion\r\n            }));\r\n\r\n            const service = new SchemaService(mockConfig);\r\n            await expect(service.generateSchema(mockJsonData))\r\n                .rejects.toThrow('Generated schema is not valid JSON');\r\n        });\r\n\r\n        it('should handle empty response', async () => {\r\n            const mockCreateChatCompletion = jest.fn().mockResolvedValue({\r\n                choices: []\r\n            });\r\n            (DeepSeekClient as jest.Mock).mockImplementation(() => ({\r\n                createChatCompletion: mockCreateChatCompletion\r\n            }));\r\n\r\n            const service = new SchemaService(mockConfig);\r\n            await expect(service.generateSchema(mockJsonData))\r\n                .rejects.toThrow('Failed to generate schema: Empty response from API');\r\n        });\r\n\r\n        it('should pass correct options to API', async () => {\r\n            const mockCreateChatCompletion = jest.fn().mockResolvedValue(mockSchemaResponse);\r\n            (DeepSeekClient as jest.Mock).mockImplementation(() => ({\r\n                createChatCompletion: mockCreateChatCompletion\r\n            }));\r\n\r\n            const service = new SchemaService(mockConfig);\r\n            await service.generateSchema(mockJsonData, {\r\n                format: 'draft-07',\r\n                temperature: 0.5,\r\n                maxTokens: 1000\r\n            });\r\n\r\n            expect(mockCreateChatCompletion).toHaveBeenCalledWith(\r\n                expect.objectContaining({\r\n                    temperature: 0.5,\r\n                    max_tokens: 1000\r\n                })\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('generateFieldDescriptions', () => {\r\n        const mockDescriptionsResponse = {\r\n            choices: [{\r\n                message: {\r\n                    content: JSON.stringify({\r\n                        name: 'Full name of the user',\r\n                        age: 'Age in years',\r\n                        email: 'Email address for contact'\r\n                    })\r\n                }\r\n            }]\r\n        };\r\n\r\n        it('should generate field descriptions successfully', async () => {\r\n            const mockCreateChatCompletion = jest.fn().mockResolvedValue(mockDescriptionsResponse);\r\n            (DeepSeekClient as jest.Mock).mockImplementation(() => ({\r\n                createChatCompletion: mockCreateChatCompletion\r\n            }));\r\n\r\n            const service = new SchemaService(mockConfig);\r\n            const descriptions = await service.generateFieldDescriptions(mockJsonData);\r\n\r\n            expect(descriptions).toBeDefined();\r\n            expect(descriptions.name).toBe('Full name of the user');\r\n            expect(descriptions.age).toBe('Age in years');\r\n            expect(descriptions.email).toBe('Email address for contact');\r\n        });\r\n\r\n        it('should handle invalid descriptions response', async () => {\r\n            const mockCreateChatCompletion = jest.fn().mockResolvedValue({\r\n                choices: [{\r\n                    message: {\r\n                        content: 'invalid json'\r\n                    }\r\n                }]\r\n            });\r\n            (DeepSeekClient as jest.Mock).mockImplementation(() => ({\r\n                createChatCompletion: mockCreateChatCompletion\r\n            }));\r\n\r\n            const service = new SchemaService(mockConfig);\r\n            await expect(service.generateFieldDescriptions(mockJsonData))\r\n                .rejects.toThrow('Generated descriptions are not valid JSON');\r\n        });\r\n    });\r\n\r\n    describe('generateExamples', () => {\r\n        const mockSchema = {\r\n            type: 'object',\r\n            properties: {\r\n                name: { type: 'string' },\r\n                age: { type: 'integer' },\r\n                email: { type: 'string', format: 'email' }\r\n            }\r\n        };\r\n\r\n        const mockExamplesResponse = {\r\n            choices: [{\r\n                message: {\r\n                    content: JSON.stringify({\r\n                        name: 'Jane Smith',\r\n                        age: 25,\r\n                        email: 'jane@example.com'\r\n                    })\r\n                }\r\n            }]\r\n        };\r\n\r\n        it('should generate examples successfully', async () => {\r\n            const mockCreateChatCompletion = jest.fn().mockResolvedValue(mockExamplesResponse);\r\n            (DeepSeekClient as jest.Mock).mockImplementation(() => ({\r\n                createChatCompletion: mockCreateChatCompletion\r\n            }));\r\n\r\n            const service = new SchemaService(mockConfig);\r\n            const examples = await service.generateExamples(mockSchema);\r\n\r\n            expect(examples).toBeDefined();\r\n            expect(examples.name).toBe('Jane Smith');\r\n            expect(examples.age).toBe(25);\r\n            expect(examples.email).toBe('jane@example.com');\r\n        });\r\n\r\n        it('should handle invalid examples response', async () => {\r\n            const mockCreateChatCompletion = jest.fn().mockResolvedValue({\r\n                choices: [{\r\n                    message: {\r\n                        content: 'invalid json'\r\n                    }\r\n                }]\r\n            });\r\n            (DeepSeekClient as jest.Mock).mockImplementation(() => ({\r\n                createChatCompletion: mockCreateChatCompletion\r\n            }));\r\n\r\n            const service = new SchemaService(mockConfig);\r\n            await expect(service.generateExamples(mockSchema))\r\n                .rejects.toThrow('Generated examples are not valid JSON');\r\n        });\r\n    });\r\n});\r\n"],"version":3}
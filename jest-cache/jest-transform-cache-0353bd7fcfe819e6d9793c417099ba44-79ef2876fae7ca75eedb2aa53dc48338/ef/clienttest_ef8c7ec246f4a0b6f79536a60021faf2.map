{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\deepseek\\client.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\deepseek\\client.test.ts"],"sourcesContent":["import { DeepSeekClient, ChatMessage } from '../../core/deepseek/DeepSeekClient';\r\nimport axios from 'axios';\r\n\r\njest.mock('axios');\r\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\r\n\r\ndescribe('DeepSeekClient', () => {\r\n    const mockConfig = {\r\n        apiKey: 'test-api-key',\r\n        model: 'test-model',\r\n        temperature: 0.7\r\n    };\r\n\r\n    beforeEach(() => {\r\n        jest.clearAllMocks();\r\n        mockedAxios.create.mockReturnValue(mockedAxios as any);\r\n    });\r\n\r\n    describe('constructor', () => {\r\n        it('should create instance with default values', () => {\r\n            const client = new DeepSeekClient(mockConfig);\r\n            expect(mockedAxios.create).toHaveBeenCalledWith({\r\n                baseURL: 'https://api.deepseek.com/v1',\r\n                headers: {\r\n                    'Authorization': 'Bearer test-api-key',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                timeout: 30000\r\n            });\r\n        });\r\n\r\n        it('should use custom baseURL when provided', () => {\r\n            const client = new DeepSeekClient({\r\n                ...mockConfig,\r\n                apiBaseUrl: 'https://custom.api.com'\r\n            });\r\n            expect(mockedAxios.create).toHaveBeenCalledWith(\r\n                expect.objectContaining({\r\n                    baseURL: 'https://custom.api.com'\r\n                })\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('createChatCompletion', () => {\r\n        const mockMessages: ChatMessage[] = [\r\n            { role: 'system', content: 'You are a helper' },\r\n            { role: 'user', content: 'Hello' }\r\n        ];\r\n\r\n        const mockResponse = {\r\n            data: {\r\n                id: 'test-id',\r\n                object: 'chat.completion',\r\n                created: Date.now(),\r\n                model: 'test-model',\r\n                choices: [\r\n                    {\r\n                        index: 0,\r\n                        message: {\r\n                            role: 'assistant',\r\n                            content: 'Hello! How can I help you?'\r\n                        },\r\n                        finish_reason: 'stop'\r\n                    }\r\n                ],\r\n                usage: {\r\n                    prompt_tokens: 10,\r\n                    completion_tokens: 20,\r\n                    total_tokens: 30\r\n                }\r\n            }\r\n        };\r\n\r\n        it('should make successful API call', async () => {\r\n            mockedAxios.post.mockResolvedValueOnce(mockResponse);\r\n\r\n            const client = new DeepSeekClient(mockConfig);\r\n            const result = await client.createChatCompletion({ messages: mockMessages });\r\n\r\n            expect(mockedAxios.post).toHaveBeenCalledWith(\r\n                '/chat/completions',\r\n                expect.objectContaining({\r\n                    messages: mockMessages,\r\n                    model: 'test-model',\r\n                    temperature: 0.7\r\n                })\r\n            );\r\n            expect(result).toEqual(mockResponse.data);\r\n        });\r\n\r\n        it('should handle API errors', async () => {\r\n            const errorResponse = {\r\n                response: {\r\n                    status: 401,\r\n                    data: {\r\n                        error: {\r\n                            message: 'Invalid API key'\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            mockedAxios.post.mockRejectedValueOnce(errorResponse);\r\n\r\n            const client = new DeepSeekClient(mockConfig);\r\n            await expect(\r\n                client.createChatCompletion({ messages: mockMessages })\r\n            ).rejects.toThrow('Invalid API key');\r\n        });\r\n\r\n        it('should handle network errors', async () => {\r\n            const networkError = {\r\n                request: {},\r\n                message: 'Network Error'\r\n            };\r\n            mockedAxios.post.mockRejectedValueOnce(networkError);\r\n\r\n            const client = new DeepSeekClient(mockConfig);\r\n            await expect(\r\n                client.createChatCompletion({ messages: mockMessages })\r\n            ).rejects.toThrow('Failed to connect to DeepSeek API');\r\n        });\r\n\r\n        it('should use default values when not provided', async () => {\r\n            mockedAxios.post.mockResolvedValueOnce(mockResponse);\r\n\r\n            const client = new DeepSeekClient({ apiKey: 'test-api-key' });\r\n            await client.createChatCompletion({ messages: mockMessages });\r\n\r\n            expect(mockedAxios.post).toHaveBeenCalledWith(\r\n                '/chat/completions',\r\n                expect.objectContaining({\r\n                    model: 'deepseek-chat',\r\n                    temperature: 0.7,\r\n                    max_tokens: 2000\r\n                })\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('prompt generation', () => {\r\n        it('should generate correct system prompt', () => {\r\n            const prompt = DeepSeekClient.generateSystemPrompt('draft-07');\r\n            expect(prompt).toContain('JSON Schema draft-07');\r\n            expect(prompt).toContain('detailed descriptions');\r\n            expect(prompt).toContain('appropriate examples');\r\n        });\r\n\r\n        it('should generate correct user prompt', () => {\r\n            const json = '{\"name\": \"test\"}';\r\n            const prompt = DeepSeekClient.generateUserPrompt(json);\r\n            expect(prompt).toContain(json);\r\n            expect(prompt).toContain('generate a JSON Schema');\r\n        });\r\n    });\r\n});\r\n"],"version":3}
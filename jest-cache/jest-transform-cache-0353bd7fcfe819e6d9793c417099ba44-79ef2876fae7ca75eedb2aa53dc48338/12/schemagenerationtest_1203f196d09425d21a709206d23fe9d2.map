{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\test\\schema-generation.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\test\\schema-generation.test.ts"],"sourcesContent":["import { JsonSageAI } from '../src/agent/JsonSageAI';\nimport { NLUParser } from '../src/agent/NLUParser';\nimport { SchemaGenerator } from '../src/agent/SchemaGenerator';\nimport { AgentConfig, SchemaGenerationTask, NLUResult } from '../src/types';\n\ndescribe('JSON Schema Generation', () => {\n    let agent: JsonSageAI;\n    let nluParser: NLUParser;\n    let schemaGenerator: SchemaGenerator;\n\n    beforeEach(() => {\n        const config: AgentConfig = {\n            deepseekApiKey: 'test-key',\n            model: 'test-model',\n            maxTokens: 2000,\n            temperature: 0.7\n        };\n        agent = new JsonSageAI(config);\n        nluParser = new NLUParser();\n        schemaGenerator = new SchemaGenerator();\n    });\n\n    test('should correctly parse user input and generate schema', async () => {\n        // 1. 测试用户输入\n        const userInput = \"帮我创建一个 JSON Schema，用于描述一个用户对象，包括姓名、年龄和邮箱。\";\n\n        // 2. 测试NLU解析\n        const startTime = performance.now();\n        const nluResult = await nluParser.parse(userInput);\n        const nluTime = performance.now() - startTime;\n\n        // 验证NLU解析结果\n        expect(nluResult).toEqual({\n            intent: \"generate_schema\",\n            entity: \"user\",\n            fields: [\n                {\n                    name: \"姓名\",\n                    type: \"string\"\n                },\n                {\n                    name: \"年龄\",\n                    type: \"number\"\n                },\n                {\n                    name: \"邮箱\",\n                    type: \"string\",\n                    format: \"email\"\n                }\n            ]\n        } as NLUResult);\n\n        // 验证NLU解析时间\n        expect(nluTime).toBeLessThan(200); // 应小于200ms\n\n        // 3. 测试Schema生成\n        const task: SchemaGenerationTask = {\n            jsonData: {\n                name: \"张三\",\n                age: 25,\n                email: \"zhangsan@example.com\"\n            },\n            options: {\n                includeDescriptions: true,\n                includeExamples: true\n            }\n        };\n\n        const schemaStartTime = performance.now();\n        const result = await agent.generateSchema(task);\n        const schemaTime = performance.now() - schemaStartTime;\n\n        // 验证生成的Schema\n        if (result.success) {\n            expect(result.data.schema).toEqual({\n                $schema: \"http://json-schema.org/draft-07/schema#\",\n                type: \"object\",\n                title: \"用户对象\",\n                description: \"描述用户的基本信息\",\n                properties: {\n                    name: {\n                        type: \"string\",\n                        description: \"用户姓名\"\n                    },\n                    age: {\n                        type: \"integer\",\n                        description: \"用户年龄\",\n                        minimum: 0\n                    },\n                    email: {\n                        type: \"string\",\n                        format: \"email\",\n                        description: \"用户邮箱地址\"\n                    }\n                },\n                required: [\"name\", \"age\", \"email\"]\n            });\n\n            // 验证Schema生成时间\n            expect(schemaTime).toBeLessThan(400); // 应小于400ms\n\n            // 4. 验证示例数据\n            const testData = {\n                name: \"张三\",\n                age: 25,\n                email: \"zhangsan@example.com\"\n            };\n\n            const validateResult = agent.validateSchema(result.data.schema, testData);\n            expect(validateResult.valid).toBe(true);\n        } else {\n            fail('Schema generation failed');\n        }\n    });\n\n    test('should handle field validation correctly', () => {\n        const schema = {\n            $schema: \"http://json-schema.org/draft-07/schema#\",\n            type: \"object\",\n            properties: {\n                name: { type: \"string\" },\n                age: { type: \"integer\", minimum: 0 },\n                email: { type: \"string\", format: \"email\" }\n            },\n            required: [\"name\", \"age\", \"email\"]\n        };\n\n        // 测试有效数据\n        const validData = {\n            name: \"张三\",\n            age: 25,\n            email: \"zhangsan@example.com\"\n        };\n        expect(agent.validateSchema(schema, validData).valid).toBe(true);\n\n        // 测试无效年龄\n        const invalidAge = {\n            name: \"张三\",\n            age: -1,\n            email: \"zhangsan@example.com\"\n        };\n        expect(agent.validateSchema(schema, invalidAge).valid).toBe(false);\n\n        // 测试无效邮箱\n        const invalidEmail = {\n            name: \"张三\",\n            age: 25,\n            email: \"invalid-email\"\n        };\n        expect(agent.validateSchema(schema, invalidEmail).valid).toBe(false);\n    });\n\n    test('should handle error cases gracefully', async () => {\n        // 测试空输入\n        await expect(nluParser.parse(\"\")).rejects.toThrow();\n\n        // 测试无效输入\n        await expect(nluParser.parse(\"这是一个无效的输入\")).rejects.toThrow();\n\n        // 测试缺失字段\n        const task: SchemaGenerationTask = {\n            jsonData: {},\n            options: {}\n        };\n        const result = await agent.generateSchema(task);\n        expect(result.success).toBe(false);\n    });\n});\n"],"version":3}
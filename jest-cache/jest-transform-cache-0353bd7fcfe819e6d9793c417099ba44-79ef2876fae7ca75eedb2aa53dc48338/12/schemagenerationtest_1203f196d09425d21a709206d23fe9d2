e7a08798383d76905ec4f9200cab763c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const JsonSageAI_1 = require("../src/agent/JsonSageAI");
const NLUParser_1 = require("../src/agent/NLUParser");
const SchemaGenerator_1 = require("../src/agent/SchemaGenerator");
describe('JSON Schema Generation', () => {
    let agent;
    let nluParser;
    let schemaGenerator;
    beforeEach(() => {
        const config = {
            deepseekApiKey: 'test-key',
            model: 'test-model',
            maxTokens: 2000,
            temperature: 0.7
        };
        agent = new JsonSageAI_1.JsonSageAI(config);
        nluParser = new NLUParser_1.NLUParser();
        schemaGenerator = new SchemaGenerator_1.SchemaGenerator();
    });
    test('should correctly parse user input and generate schema', async () => {
        // 1. 测试用户输入
        const userInput = "帮我创建一个 JSON Schema，用于描述一个用户对象，包括姓名、年龄和邮箱。";
        // 2. 测试NLU解析
        const startTime = performance.now();
        const nluResult = await nluParser.parse(userInput);
        const nluTime = performance.now() - startTime;
        // 验证NLU解析结果
        expect(nluResult).toEqual({
            intent: "generate_schema",
            entity: "user",
            fields: [
                {
                    name: "姓名",
                    type: "string"
                },
                {
                    name: "年龄",
                    type: "number"
                },
                {
                    name: "邮箱",
                    type: "string",
                    format: "email"
                }
            ]
        });
        // 验证NLU解析时间
        expect(nluTime).toBeLessThan(200); // 应小于200ms
        // 3. 测试Schema生成
        const task = {
            jsonData: {
                name: "张三",
                age: 25,
                email: "zhangsan@example.com"
            },
            options: {
                includeDescriptions: true,
                includeExamples: true
            }
        };
        const schemaStartTime = performance.now();
        const result = await agent.generateSchema(task);
        const schemaTime = performance.now() - schemaStartTime;
        // 验证生成的Schema
        if (result.success) {
            expect(result.data.schema).toEqual({
                $schema: "http://json-schema.org/draft-07/schema#",
                type: "object",
                title: "用户对象",
                description: "描述用户的基本信息",
                properties: {
                    name: {
                        type: "string",
                        description: "用户姓名"
                    },
                    age: {
                        type: "integer",
                        description: "用户年龄",
                        minimum: 0
                    },
                    email: {
                        type: "string",
                        format: "email",
                        description: "用户邮箱地址"
                    }
                },
                required: ["name", "age", "email"]
            });
            // 验证Schema生成时间
            expect(schemaTime).toBeLessThan(400); // 应小于400ms
            // 4. 验证示例数据
            const testData = {
                name: "张三",
                age: 25,
                email: "zhangsan@example.com"
            };
            const validateResult = agent.validateSchema(result.data.schema, testData);
            expect(validateResult.valid).toBe(true);
        }
        else {
            fail('Schema generation failed');
        }
    });
    test('should handle field validation correctly', () => {
        const schema = {
            $schema: "http://json-schema.org/draft-07/schema#",
            type: "object",
            properties: {
                name: { type: "string" },
                age: { type: "integer", minimum: 0 },
                email: { type: "string", format: "email" }
            },
            required: ["name", "age", "email"]
        };
        // 测试有效数据
        const validData = {
            name: "张三",
            age: 25,
            email: "zhangsan@example.com"
        };
        expect(agent.validateSchema(schema, validData).valid).toBe(true);
        // 测试无效年龄
        const invalidAge = {
            name: "张三",
            age: -1,
            email: "zhangsan@example.com"
        };
        expect(agent.validateSchema(schema, invalidAge).valid).toBe(false);
        // 测试无效邮箱
        const invalidEmail = {
            name: "张三",
            age: 25,
            email: "invalid-email"
        };
        expect(agent.validateSchema(schema, invalidEmail).valid).toBe(false);
    });
    test('should handle error cases gracefully', async () => {
        // 测试空输入
        await expect(nluParser.parse("")).rejects.toThrow();
        // 测试无效输入
        await expect(nluParser.parse("这是一个无效的输入")).rejects.toThrow();
        // 测试缺失字段
        const task = {
            jsonData: {},
            options: {}
        };
        const result = await agent.generateSchema(task);
        expect(result.success).toBe(false);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
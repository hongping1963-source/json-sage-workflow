{"version":3,"names":["cov_qkguq3bdj","actualCoverage","HealthChecker","constructor","f","s","components","Map","history","maxHistorySize","registerComponent","name","checkFn","b","Error","has","set","unregisterComponent","delete","hasComponent","check","status","healthy","lastCheck","Date","toISOString","isHealthy","error","message","addToHistory","checkAsync","timeout","checks","Array","from","entries","map","checkPromise","Promise","resolve","timeoutPromise","_","reject","setTimeout","race","all","push","timestamp","length","slice","getHistory","clearHistory","getStatus","module","exports"],"sources":["healthCheck.js"],"sourcesContent":["class HealthChecker {\r\n    constructor() {\r\n        this.components = new Map();\r\n        this.history = [];\r\n        this.maxHistorySize = 10;\r\n    }\r\n\r\n    registerComponent(name, checkFn) {\r\n        if (typeof checkFn !== 'function') {\r\n            throw new Error('Check function must be a function');\r\n        }\r\n\r\n        if (this.components.has(name)) {\r\n            throw new Error(`Component ${name} is already registered`);\r\n        }\r\n\r\n        this.components.set(name, checkFn);\r\n    }\r\n\r\n    unregisterComponent(name) {\r\n        this.components.delete(name);\r\n    }\r\n\r\n    hasComponent(name) {\r\n        return this.components.has(name);\r\n    }\r\n\r\n    check() {\r\n        const status = {\r\n            healthy: true,\r\n            components: {},\r\n            lastCheck: new Date().toISOString()\r\n        };\r\n\r\n        for (const [name, checkFn] of this.components) {\r\n            try {\r\n                const isHealthy = checkFn();\r\n                status.components[name] = {\r\n                    healthy: isHealthy\r\n                };\r\n                if (!isHealthy) {\r\n                    status.healthy = false;\r\n                }\r\n            } catch (error) {\r\n                status.components[name] = {\r\n                    healthy: false,\r\n                    error: error.message\r\n                };\r\n                status.healthy = false;\r\n            }\r\n        }\r\n\r\n        this.addToHistory(status);\r\n        return status;\r\n    }\r\n\r\n    async checkAsync(timeout = 5000) {\r\n        const status = {\r\n            healthy: true,\r\n            components: {},\r\n            lastCheck: new Date().toISOString()\r\n        };\r\n\r\n        const checks = Array.from(this.components.entries()).map(async ([name, checkFn]) => {\r\n            try {\r\n                const checkPromise = Promise.resolve(checkFn());\r\n                const timeoutPromise = new Promise((_, reject) =>\r\n                    setTimeout(() => reject(new Error('Check timed out')), timeout)\r\n                );\r\n\r\n                const isHealthy = await Promise.race([checkPromise, timeoutPromise]);\r\n                status.components[name] = {\r\n                    healthy: isHealthy\r\n                };\r\n                if (!isHealthy) {\r\n                    status.healthy = false;\r\n                }\r\n            } catch (error) {\r\n                status.components[name] = {\r\n                    healthy: false,\r\n                    error: error.message\r\n                };\r\n                status.healthy = false;\r\n            }\r\n        });\r\n\r\n        await Promise.all(checks);\r\n        this.addToHistory(status);\r\n        return status;\r\n    }\r\n\r\n    addToHistory(status) {\r\n        this.history.push({\r\n            timestamp: new Date().toISOString(),\r\n            status\r\n        });\r\n\r\n        // 保持历史记录在限制范围内\r\n        if (this.history.length > this.maxHistorySize) {\r\n            this.history = this.history.slice(-this.maxHistorySize);\r\n        }\r\n    }\r\n\r\n    getHistory() {\r\n        return this.history;\r\n    }\r\n\r\n    clearHistory() {\r\n        this.history = [];\r\n    }\r\n\r\n    isHealthy() {\r\n        return this.check().healthy;\r\n    }\r\n\r\n    getStatus() {\r\n        return this.check();\r\n    }\r\n}\r\n\r\nmodule.exports = { HealthChecker };\r\n"],"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","ignoreList":[]}
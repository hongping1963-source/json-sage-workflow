{"version":3,"names":["cov_132bprdynw","actualCoverage","s","ConfigManager","constructor","config","f","lastAdaptation","adaptationHistory","validateAndNormalizeConfig","DEFAULT_CONFIG","adaptConfig","metrics","now","Date","b","changes","reasons","complexityChanges","adaptToComplexity","Object","assign","push","reason","tokenChanges","adaptTokenLimit","temperatureChanges","adaptTemperature","cacheChanges","adaptCacheStrategy","keys","length","timestamp","filter","Boolean","join","complexityScore","calculateComplexityScore","temperature","Math","max","min","estimatedTokens","estimateRequiredTokens","currentLimit","maxTokens","getModelConfig","ceil","qualityScore","calculateQualityScore","shouldCache","evaluateCacheability","caching","depthScore","depth","arrayDepthScore","arrayDepth","fieldCountScore","fieldCount","baseTokens","depthMultiplier","pow","nullRatio","nullCount","mixedTypeRatio","mixedTypes","nullScore","typeScore","isSimple","isHighQuality","MODEL_CONFIGS","model","modelConfig","clamp","default","value","getConfig","getAdaptationHistory","resetConfig","deepseekApiKey","exports"],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\agent\\ConfigManager.ts"],"sourcesContent":["import { AgentConfig, JsonMetrics, ModelConfig, CacheConfig } from '../types';\n\nexport class ConfigManager {\n    private static readonly DEFAULT_CONFIG: Partial<AgentConfig> = {\n        model: 'deepseek-chat',\n        maxTokens: 2000,\n        temperature: 0.7,\n        caching: true\n    };\n\n    private static readonly MODEL_CONFIGS: Record<string, ModelConfig> = {\n        'deepseek-chat': {\n            maxTokens: {\n                min: 1000,\n                max: 4000,\n                default: 2000\n            },\n            temperature: {\n                min: 0.1,\n                max: 1.0,\n                default: 0.7\n            }\n        }\n    };\n\n    private config: AgentConfig;\n    private metrics?: JsonMetrics;\n    private lastAdaptation: number = 0;\n    private adaptationHistory: Array<{\n        timestamp: number;\n        changes: Partial<AgentConfig>;\n        reason: string;\n    }> = [];\n\n    constructor(config: AgentConfig) {\n        this.config = this.validateAndNormalizeConfig({\n            ...ConfigManager.DEFAULT_CONFIG,\n            ...config\n        });\n    }\n\n    /**\n     * 根据JSON数据特征自适应调整配置\n     */\n    adaptConfig(metrics: JsonMetrics): void {\n        this.metrics = metrics;\n        const now = Date.now();\n\n        // 避免过于频繁的适配\n        if (now - this.lastAdaptation < 5000) {\n            return;\n        }\n\n        const changes: Partial<AgentConfig> = {};\n        const reasons: string[] = [];\n\n        // 1. 根据数据复杂度调整模型参数\n        const complexityChanges = this.adaptToComplexity(metrics);\n        Object.assign(changes, complexityChanges.changes);\n        reasons.push(complexityChanges.reason);\n\n        // 2. 根据数据大小调整token限制\n        const tokenChanges = this.adaptTokenLimit(metrics);\n        Object.assign(changes, tokenChanges.changes);\n        reasons.push(tokenChanges.reason);\n\n        // 3. 根据数据质量调整temperature\n        const temperatureChanges = this.adaptTemperature(metrics);\n        Object.assign(changes, temperatureChanges.changes);\n        reasons.push(temperatureChanges.reason);\n\n        // 4. 根据数据特征调整缓存策略\n        const cacheChanges = this.adaptCacheStrategy(metrics);\n        Object.assign(changes, cacheChanges.changes);\n        reasons.push(cacheChanges.reason);\n\n        // 应用更改\n        if (Object.keys(changes).length > 0) {\n            this.config = this.validateAndNormalizeConfig({\n                ...this.config,\n                ...changes\n            });\n\n            this.adaptationHistory.push({\n                timestamp: now,\n                changes,\n                reason: reasons.filter(Boolean).join('; ')\n            });\n\n            this.lastAdaptation = now;\n        }\n    }\n\n    /**\n     * 根据数据复杂度调整配置\n     */\n    private adaptToComplexity(metrics: JsonMetrics): {\n        changes: Partial<AgentConfig>;\n        reason: string;\n    } {\n        const changes: Partial<AgentConfig> = {};\n        let reason = '';\n\n        // 复杂度评分 (0-1)\n        const complexityScore = this.calculateComplexityScore(metrics);\n\n        if (complexityScore > 0.8) {\n            // 高复杂度：使用更保守的配置\n            changes.temperature = Math.max(0.3, (this.config.temperature || 0.7) - 0.2);\n            reason = '数据结构复杂，降低temperature以提高准确性';\n        } else if (complexityScore < 0.3) {\n            // 低复杂度：可以使用更灵活的配置\n            changes.temperature = Math.min(0.9, (this.config.temperature || 0.7) + 0.1);\n            reason = '数据结构简单，提高temperature以增加多样性';\n        }\n\n        return { changes, reason };\n    }\n\n    /**\n     * 根据数据大小调整token限制\n     */\n    private adaptTokenLimit(metrics: JsonMetrics): {\n        changes: Partial<AgentConfig>;\n        reason: string;\n    } {\n        const changes: Partial<AgentConfig> = {};\n        let reason = '';\n\n        // 估算所需token数量\n        const estimatedTokens = this.estimateRequiredTokens(metrics);\n        const currentLimit = this.config.maxTokens || 2000;\n\n        if (estimatedTokens > currentLimit * 0.8) {\n            changes.maxTokens = Math.min(\n                this.getModelConfig().maxTokens.max,\n                Math.ceil(currentLimit * 1.5)\n            );\n            reason = '数据量较大，增加token限制';\n        } else if (estimatedTokens < currentLimit * 0.3) {\n            changes.maxTokens = Math.max(\n                this.getModelConfig().maxTokens.min,\n                Math.ceil(currentLimit * 0.7)\n            );\n            reason = '数据量较小，减少token限制以优化性能';\n        }\n\n        return { changes, reason };\n    }\n\n    /**\n     * 根据数据质量调整temperature\n     */\n    private adaptTemperature(metrics: JsonMetrics): {\n        changes: Partial<AgentConfig>;\n        reason: string;\n    } {\n        const changes: Partial<AgentConfig> = {};\n        let reason = '';\n\n        // 数据质量评分 (0-1)\n        const qualityScore = this.calculateQualityScore(metrics);\n\n        if (qualityScore < 0.5) {\n            // 低质量数据：使用更保守的配置\n            changes.temperature = Math.max(0.2, (this.config.temperature || 0.7) - 0.3);\n            reason = '数据质量较低，降低temperature以提高可靠性';\n        } else if (qualityScore > 0.8) {\n            // 高质量数据：可以使用更灵活的配置\n            changes.temperature = Math.min(0.8, (this.config.temperature || 0.7) + 0.1);\n            reason = '数据质量良好，适当提高temperature';\n        }\n\n        return { changes, reason };\n    }\n\n    /**\n     * 根据数据特征调整缓存策略\n     */\n    private adaptCacheStrategy(metrics: JsonMetrics): {\n        changes: Partial<AgentConfig>;\n        reason: string;\n    } {\n        const changes: Partial<AgentConfig> = {};\n        let reason = '';\n\n        // 评估是否适合缓存\n        const shouldCache = this.evaluateCacheability(metrics);\n\n        if (shouldCache && !this.config.caching) {\n            changes.caching = true;\n            reason = '数据特征适合缓存，启用缓存以提高性能';\n        } else if (!shouldCache && this.config.caching) {\n            changes.caching = false;\n            reason = '数据变化频繁，禁用缓存以保持准确性';\n        }\n\n        return { changes, reason };\n    }\n\n    /**\n     * 计算数据复杂度评分\n     */\n    private calculateComplexityScore(metrics: JsonMetrics): number {\n        const depthScore = Math.min(metrics.depth / 10, 1);\n        const arrayDepthScore = Math.min(metrics.arrayDepth / 5, 1);\n        const fieldCountScore = Math.min(metrics.fieldCount / 100, 1);\n\n        return (depthScore + arrayDepthScore + fieldCountScore) / 3;\n    }\n\n    /**\n     * 估算所需的token数量\n     */\n    private estimateRequiredTokens(metrics: JsonMetrics): number {\n        // 粗略估算：每个字段平均4个token，嵌套层级每层翻倍\n        const baseTokens = metrics.fieldCount * 4;\n        const depthMultiplier = Math.pow(2, metrics.depth - 1);\n        return baseTokens * depthMultiplier;\n    }\n\n    /**\n     * 计算数据质量评分\n     */\n    private calculateQualityScore(metrics: JsonMetrics): number {\n        const nullRatio = metrics.nullCount / metrics.fieldCount;\n        const mixedTypeRatio = metrics.mixedTypes.length / metrics.fieldCount;\n        \n        const nullScore = 1 - Math.min(nullRatio, 1);\n        const typeScore = 1 - Math.min(mixedTypeRatio, 1);\n\n        return (nullScore + typeScore) / 2;\n    }\n\n    /**\n     * 评估数据是否适合缓存\n     */\n    private evaluateCacheability(metrics: JsonMetrics): boolean {\n        // 简单的数据更适合缓存\n        const isSimple = this.calculateComplexityScore(metrics) < 0.5;\n        // 高质量的数据更适合缓存\n        const isHighQuality = this.calculateQualityScore(metrics) > 0.7;\n        \n        return isSimple && isHighQuality;\n    }\n\n    /**\n     * 获取当前模型的配置限制\n     */\n    private getModelConfig(): ModelConfig {\n        return (\n            ConfigManager.MODEL_CONFIGS[this.config.model || 'deepseek-chat'] ||\n            ConfigManager.MODEL_CONFIGS['deepseek-chat']\n        );\n    }\n\n    /**\n     * 验证并规范化配置\n     */\n    private validateAndNormalizeConfig(config: AgentConfig): AgentConfig {\n        const modelConfig = this.getModelConfig();\n\n        return {\n            ...config,\n            temperature: this.clamp(\n                config.temperature || modelConfig.temperature.default,\n                modelConfig.temperature.min,\n                modelConfig.temperature.max\n            ),\n            maxTokens: this.clamp(\n                config.maxTokens || modelConfig.maxTokens.default,\n                modelConfig.maxTokens.min,\n                modelConfig.maxTokens.max\n            )\n        };\n    }\n\n    /**\n     * 限制数值在指定范围内\n     */\n    private clamp(value: number, min: number, max: number): number {\n        return Math.max(min, Math.min(max, value));\n    }\n\n    /**\n     * 获取当前配置\n     */\n    getConfig(): AgentConfig {\n        return { ...this.config };\n    }\n\n    /**\n     * 获取配置调整历史\n     */\n    getAdaptationHistory(): Array<{\n        timestamp: number;\n        changes: Partial<AgentConfig>;\n        reason: string;\n    }> {\n        return [...this.adaptationHistory];\n    }\n\n    /**\n     * 重置配置到默认值\n     */\n    resetConfig(): void {\n        this.config = this.validateAndNormalizeConfig({\n            ...ConfigManager.DEFAULT_CONFIG,\n            deepseekApiKey: this.config.deepseekApiKey\n        });\n        this.adaptationHistory = [];\n        this.lastAdaptation = 0;\n    }\n}\n"],"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","ignoreList":[]}
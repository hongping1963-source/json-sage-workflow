{"file":"C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\compression.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\hongping\\CascadeProjects\\json-sage-ai-agent\\src\\__tests__\\compression.test.ts"],"sourcesContent":["import { JsonCompressor } from '../core/compression';\r\n\r\ndescribe('JsonCompressor', () => {\r\n    let compressor: JsonCompressor;\r\n\r\n    beforeEach(() => {\r\n        compressor = new JsonCompressor({\r\n            threshold: 100,  // 设置较小的阈值以便测试\r\n            level: 6,\r\n            memoryLimit: 100\r\n        });\r\n    });\r\n\r\n    describe('Compression Tests', () => {\r\n        it('should not compress small data below threshold', () => {\r\n            const smallData = { test: 'small' };\r\n            const result = compressor.compress(smallData);\r\n            expect(typeof result).toBe('string');\r\n            expect(JSON.parse(result as string)).toEqual(smallData);\r\n        });\r\n\r\n        it('should compress large data above threshold', () => {\r\n            const largeData = {\r\n                text: 'test'.repeat(100),\r\n                array: Array(100).fill('test')\r\n            };\r\n            const result = compressor.compress(largeData);\r\n            expect(result instanceof Uint8Array).toBe(true);\r\n        });\r\n\r\n        it('should handle special characters correctly', () => {\r\n            const specialData = {\r\n                unicode: '你好，世界！',\r\n                symbols: '!@#$%^&*()',\r\n                emoji: '😀🌍🌞'\r\n            };\r\n            const result = compressor.compress(specialData);\r\n            const decompressed = compressor.decompress(result);\r\n            expect(decompressed).toEqual(specialData);\r\n        });\r\n\r\n        it('should handle nested objects', () => {\r\n            const nestedData = {\r\n                level1: {\r\n                    level2: {\r\n                        level3: {\r\n                            data: 'test'.repeat(50)\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            const result = compressor.compress(nestedData);\r\n            const decompressed = compressor.decompress(result);\r\n            expect(decompressed).toEqual(nestedData);\r\n        });\r\n    });\r\n\r\n    describe('Decompression Tests', () => {\r\n        it('should decompress compressed data correctly', () => {\r\n            const originalData = { test: 'data'.repeat(100) };\r\n            const compressed = compressor.compress(originalData);\r\n            const decompressed = compressor.decompress(compressed);\r\n            expect(decompressed).toEqual(originalData);\r\n        });\r\n\r\n        it('should handle regular JSON strings', () => {\r\n            const jsonString = '{\"test\":\"value\"}';\r\n            const result = compressor.decompress(jsonString);\r\n            expect(result).toEqual({ test: 'value' });\r\n        });\r\n\r\n        it('should throw error for invalid compressed data', () => {\r\n            const invalidData = new Uint8Array([1, 2, 3]);\r\n            expect(() => compressor.decompress(invalidData)).toThrow();\r\n        });\r\n    });\r\n\r\n    describe('Performance Analysis', () => {\r\n        it('should provide compression analysis', () => {\r\n            const testData = {\r\n                array: Array(1000).fill('test'),\r\n                text: 'sample'.repeat(1000)\r\n            };\r\n            const analysis = compressor.analyzeCompression(testData);\r\n            \r\n            expect(analysis).toHaveProperty('originalSize');\r\n            expect(analysis).toHaveProperty('compressedSize');\r\n            expect(analysis).toHaveProperty('compressionRatio');\r\n            expect(analysis).toHaveProperty('compressionSavings');\r\n            expect(analysis.compressionSavings).toBeGreaterThan(0);\r\n        });\r\n\r\n        it('should handle different compression levels', () => {\r\n            const testData = { text: 'test'.repeat(1000) };\r\n            \r\n            const lowCompressor = new JsonCompressor({ level: 1 });\r\n            const highCompressor = new JsonCompressor({ level: 9 });\r\n            \r\n            const lowAnalysis = lowCompressor.analyzeCompression(testData);\r\n            const highAnalysis = highCompressor.analyzeCompression(testData);\r\n            \r\n            // 高压缩级别应该产生更小的压缩大小\r\n            expect(highAnalysis.compressedSize).toBeLessThanOrEqual(lowAnalysis.compressedSize);\r\n        });\r\n    });\r\n\r\n    describe('Edge Cases', () => {\r\n        it('should handle empty objects', () => {\r\n            const emptyData = {};\r\n            const result = compressor.compress(emptyData);\r\n            const decompressed = compressor.decompress(result);\r\n            expect(decompressed).toEqual(emptyData);\r\n        });\r\n\r\n        it('should handle null values', () => {\r\n            const nullData = { test: null };\r\n            const result = compressor.compress(nullData);\r\n            const decompressed = compressor.decompress(result);\r\n            expect(decompressed).toEqual(nullData);\r\n        });\r\n\r\n        it('should handle arrays with mixed types', () => {\r\n            const mixedData = {\r\n                array: [1, 'string', null, { nested: true }, [1, 2, 3]]\r\n            };\r\n            const result = compressor.compress(mixedData);\r\n            const decompressed = compressor.decompress(result);\r\n            expect(decompressed).toEqual(mixedData);\r\n        });\r\n    });\r\n});\r\n"],"version":3}
94c75f3e5a51649be5c11dab2f35ed67
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const compression_1 = require("../core/compression");
describe('JsonCompressor', () => {
    let compressor;
    beforeEach(() => {
        compressor = new compression_1.JsonCompressor({
            threshold: 100,
            level: 6,
            memoryLimit: 100
        });
    });
    describe('Compression Tests', () => {
        it('should not compress small data below threshold', () => {
            const smallData = { test: 'small' };
            const result = compressor.compress(smallData);
            expect(typeof result).toBe('string');
            expect(JSON.parse(result)).toEqual(smallData);
        });
        it('should compress large data above threshold', () => {
            const largeData = {
                text: 'test'.repeat(100),
                array: Array(100).fill('test')
            };
            const result = compressor.compress(largeData);
            expect(result instanceof Uint8Array).toBe(true);
        });
        it('should handle special characters correctly', () => {
            const specialData = {
                unicode: '你好，世界！',
                symbols: '!@#$%^&*()',
                emoji: '😀🌍🌞'
            };
            const result = compressor.compress(specialData);
            const decompressed = compressor.decompress(result);
            expect(decompressed).toEqual(specialData);
        });
        it('should handle nested objects', () => {
            const nestedData = {
                level1: {
                    level2: {
                        level3: {
                            data: 'test'.repeat(50)
                        }
                    }
                }
            };
            const result = compressor.compress(nestedData);
            const decompressed = compressor.decompress(result);
            expect(decompressed).toEqual(nestedData);
        });
    });
    describe('Decompression Tests', () => {
        it('should decompress compressed data correctly', () => {
            const originalData = { test: 'data'.repeat(100) };
            const compressed = compressor.compress(originalData);
            const decompressed = compressor.decompress(compressed);
            expect(decompressed).toEqual(originalData);
        });
        it('should handle regular JSON strings', () => {
            const jsonString = '{"test":"value"}';
            const result = compressor.decompress(jsonString);
            expect(result).toEqual({ test: 'value' });
        });
        it('should throw error for invalid compressed data', () => {
            const invalidData = new Uint8Array([1, 2, 3]);
            expect(() => compressor.decompress(invalidData)).toThrow();
        });
    });
    describe('Performance Analysis', () => {
        it('should provide compression analysis', () => {
            const testData = {
                array: Array(1000).fill('test'),
                text: 'sample'.repeat(1000)
            };
            const analysis = compressor.analyzeCompression(testData);
            expect(analysis).toHaveProperty('originalSize');
            expect(analysis).toHaveProperty('compressedSize');
            expect(analysis).toHaveProperty('compressionRatio');
            expect(analysis).toHaveProperty('compressionSavings');
            expect(analysis.compressionSavings).toBeGreaterThan(0);
        });
        it('should handle different compression levels', () => {
            const testData = { text: 'test'.repeat(1000) };
            const lowCompressor = new compression_1.JsonCompressor({ level: 1 });
            const highCompressor = new compression_1.JsonCompressor({ level: 9 });
            const lowAnalysis = lowCompressor.analyzeCompression(testData);
            const highAnalysis = highCompressor.analyzeCompression(testData);
            // 高压缩级别应该产生更小的压缩大小
            expect(highAnalysis.compressedSize).toBeLessThanOrEqual(lowAnalysis.compressedSize);
        });
    });
    describe('Edge Cases', () => {
        it('should handle empty objects', () => {
            const emptyData = {};
            const result = compressor.compress(emptyData);
            const decompressed = compressor.decompress(result);
            expect(decompressed).toEqual(emptyData);
        });
        it('should handle null values', () => {
            const nullData = { test: null };
            const result = compressor.compress(nullData);
            const decompressed = compressor.decompress(result);
            expect(decompressed).toEqual(nullData);
        });
        it('should handle arrays with mixed types', () => {
            const mixedData = {
                array: [1, 'string', null, { nested: true }, [1, 2, 3]]
            };
            const result = compressor.compress(mixedData);
            const decompressed = compressor.decompress(result);
            expect(decompressed).toEqual(mixedData);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxob25ncGluZ1xcQ2FzY2FkZVByb2plY3RzXFxqc29uLXNhZ2UtYWktYWdlbnRcXHNyY1xcX190ZXN0c19fXFxjb21wcmVzc2lvbi50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEscURBQXFEO0FBRXJELFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDNUIsSUFBSSxVQUEwQixDQUFDO0lBRS9CLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixVQUFVLEdBQUcsSUFBSSw0QkFBYyxDQUFDO1lBQzVCLFNBQVMsRUFBRSxHQUFHO1lBQ2QsS0FBSyxFQUFFLENBQUM7WUFDUixXQUFXLEVBQUUsR0FBRztTQUNuQixDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDL0IsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtZQUN0RCxNQUFNLFNBQVMsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztZQUNwQyxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFnQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNENBQTRDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE1BQU0sU0FBUyxHQUFHO2dCQUNkLElBQUksRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFDeEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2FBQ2pDLENBQUM7WUFDRixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsUUFB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RCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGhvbmdwaW5nXFxDYXNjYWRlUHJvamVjdHNcXGpzb24tc2FnZS1haS1hZ2VudFxcc3JjXFxfX3Rlc3RzX19cXGNvbXByZXNzaW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnNvbkNvbXByZXNzb3IgfSBmcm9tICcuLi9jb3JlL2NvbXByZXNzaW9uJztcclxuXHJcbmRlc2NyaWJlKCdKc29uQ29tcHJlc3NvcicsICgpID0+IHtcclxuICAgIGxldCBjb21wcmVzc29yOiBKc29uQ29tcHJlc3NvcjtcclxuXHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICBjb21wcmVzc29yID0gbmV3IEpzb25Db21wcmVzc29yKHtcclxuICAgICAgICAgICAgdGhyZXNob2xkOiAxMDAsICAvLyDorr7nva7ovoPlsI/nmoTpmIjlgLzku6Xkvr/mtYvor5VcclxuICAgICAgICAgICAgbGV2ZWw6IDYsXHJcbiAgICAgICAgICAgIG1lbW9yeUxpbWl0OiAxMDBcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdDb21wcmVzc2lvbiBUZXN0cycsICgpID0+IHtcclxuICAgICAgICBpdCgnc2hvdWxkIG5vdCBjb21wcmVzcyBzbWFsbCBkYXRhIGJlbG93IHRocmVzaG9sZCcsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc21hbGxEYXRhID0geyB0ZXN0OiAnc21hbGwnIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXByZXNzb3IuY29tcHJlc3Moc21hbGxEYXRhKTtcclxuICAgICAgICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQpLnRvQmUoJ3N0cmluZycpO1xyXG4gICAgICAgICAgICBleHBlY3QoSlNPTi5wYXJzZShyZXN1bHQgYXMgc3RyaW5nKSkudG9FcXVhbChzbWFsbERhdGEpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGNvbXByZXNzIGxhcmdlIGRhdGEgYWJvdmUgdGhyZXNob2xkJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsYXJnZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAndGVzdCcucmVwZWF0KDEwMCksXHJcbiAgICAgICAgICAgICAgICBhcnJheTogQXJyYXkoMTAwKS5maWxsKCd0ZXN0JylcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY29tcHJlc3Nvci5jb21wcmVzcyhsYXJnZURhdGEpO1xyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0IGluc3RhbmNlb2YgVWludDhBcnJheSkudG9CZSh0cnVlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc3BlY2lhbERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICB1bmljb2RlOiAn5L2g5aW977yM5LiW55WM77yBJyxcclxuICAgICAgICAgICAgICAgIHN5bWJvbHM6ICchQCMkJV4mKigpJyxcclxuICAgICAgICAgICAgICAgIGVtb2ppOiAn8J+YgPCfjI3wn4yeJ1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjb21wcmVzc29yLmNvbXByZXNzKHNwZWNpYWxEYXRhKTtcclxuICAgICAgICAgICAgY29uc3QgZGVjb21wcmVzc2VkID0gY29tcHJlc3Nvci5kZWNvbXByZXNzKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChkZWNvbXByZXNzZWQpLnRvRXF1YWwoc3BlY2lhbERhdGEpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSBuZXN0ZWQgb2JqZWN0cycsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmVzdGVkRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGxldmVsMToge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsMjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6ICd0ZXN0Jy5yZXBlYXQoNTApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXByZXNzb3IuY29tcHJlc3MobmVzdGVkRGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY29tcHJlc3NlZCA9IGNvbXByZXNzb3IuZGVjb21wcmVzcyhyZXN1bHQpO1xyXG4gICAgICAgICAgICBleHBlY3QoZGVjb21wcmVzc2VkKS50b0VxdWFsKG5lc3RlZERhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoJ0RlY29tcHJlc3Npb24gVGVzdHMnLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBkZWNvbXByZXNzIGNvbXByZXNzZWQgZGF0YSBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsRGF0YSA9IHsgdGVzdDogJ2RhdGEnLnJlcGVhdCgxMDApIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXByZXNzZWQgPSBjb21wcmVzc29yLmNvbXByZXNzKG9yaWdpbmFsRGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY29tcHJlc3NlZCA9IGNvbXByZXNzb3IuZGVjb21wcmVzcyhjb21wcmVzc2VkKTtcclxuICAgICAgICAgICAgZXhwZWN0KGRlY29tcHJlc3NlZCkudG9FcXVhbChvcmlnaW5hbERhdGEpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSByZWd1bGFyIEpTT04gc3RyaW5ncycsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QganNvblN0cmluZyA9ICd7XCJ0ZXN0XCI6XCJ2YWx1ZVwifSc7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXByZXNzb3IuZGVjb21wcmVzcyhqc29uU3RyaW5nKTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7IHRlc3Q6ICd2YWx1ZScgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIGludmFsaWQgY29tcHJlc3NlZCBkYXRhJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbnZhbGlkRGF0YSA9IG5ldyBVaW50OEFycmF5KFsxLCAyLCAzXSk7XHJcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wcmVzc29yLmRlY29tcHJlc3MoaW52YWxpZERhdGEpKS50b1Rocm93KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgQW5hbHlzaXMnLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBwcm92aWRlIGNvbXByZXNzaW9uIGFuYWx5c2lzJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGFycmF5OiBBcnJheSgxMDAwKS5maWxsKCd0ZXN0JyksXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnc2FtcGxlJy5yZXBlYXQoMTAwMClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgYW5hbHlzaXMgPSBjb21wcmVzc29yLmFuYWx5emVDb21wcmVzc2lvbih0ZXN0RGF0YSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBleHBlY3QoYW5hbHlzaXMpLnRvSGF2ZVByb3BlcnR5KCdvcmlnaW5hbFNpemUnKTtcclxuICAgICAgICAgICAgZXhwZWN0KGFuYWx5c2lzKS50b0hhdmVQcm9wZXJ0eSgnY29tcHJlc3NlZFNpemUnKTtcclxuICAgICAgICAgICAgZXhwZWN0KGFuYWx5c2lzKS50b0hhdmVQcm9wZXJ0eSgnY29tcHJlc3Npb25SYXRpbycpO1xyXG4gICAgICAgICAgICBleHBlY3QoYW5hbHlzaXMpLnRvSGF2ZVByb3BlcnR5KCdjb21wcmVzc2lvblNhdmluZ3MnKTtcclxuICAgICAgICAgICAgZXhwZWN0KGFuYWx5c2lzLmNvbXByZXNzaW9uU2F2aW5ncykudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSBkaWZmZXJlbnQgY29tcHJlc3Npb24gbGV2ZWxzJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0RGF0YSA9IHsgdGV4dDogJ3Rlc3QnLnJlcGVhdCgxMDAwKSB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgbG93Q29tcHJlc3NvciA9IG5ldyBKc29uQ29tcHJlc3Nvcih7IGxldmVsOiAxIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBoaWdoQ29tcHJlc3NvciA9IG5ldyBKc29uQ29tcHJlc3Nvcih7IGxldmVsOiA5IH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgbG93QW5hbHlzaXMgPSBsb3dDb21wcmVzc29yLmFuYWx5emVDb21wcmVzc2lvbih0ZXN0RGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhpZ2hBbmFseXNpcyA9IGhpZ2hDb21wcmVzc29yLmFuYWx5emVDb21wcmVzc2lvbih0ZXN0RGF0YSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDpq5jljovnvKnnuqfliKvlupTor6XkuqfnlJ/mm7TlsI/nmoTljovnvKnlpKflsI9cclxuICAgICAgICAgICAgZXhwZWN0KGhpZ2hBbmFseXNpcy5jb21wcmVzc2VkU2l6ZSkudG9CZUxlc3NUaGFuT3JFcXVhbChsb3dBbmFseXNpcy5jb21wcmVzc2VkU2l6ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZSgnRWRnZSBDYXNlcycsICgpID0+IHtcclxuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBvYmplY3RzJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbXB0eURhdGEgPSB7fTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY29tcHJlc3Nvci5jb21wcmVzcyhlbXB0eURhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWNvbXByZXNzZWQgPSBjb21wcmVzc29yLmRlY29tcHJlc3MocmVzdWx0KTtcclxuICAgICAgICAgICAgZXhwZWN0KGRlY29tcHJlc3NlZCkudG9FcXVhbChlbXB0eURhdGEpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSBudWxsIHZhbHVlcycsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbnVsbERhdGEgPSB7IHRlc3Q6IG51bGwgfTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY29tcHJlc3Nvci5jb21wcmVzcyhudWxsRGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY29tcHJlc3NlZCA9IGNvbXByZXNzb3IuZGVjb21wcmVzcyhyZXN1bHQpO1xyXG4gICAgICAgICAgICBleHBlY3QoZGVjb21wcmVzc2VkKS50b0VxdWFsKG51bGxEYXRhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgYXJyYXlzIHdpdGggbWl4ZWQgdHlwZXMnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1peGVkRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGFycmF5OiBbMSwgJ3N0cmluZycsIG51bGwsIHsgbmVzdGVkOiB0cnVlIH0sIFsxLCAyLCAzXV1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY29tcHJlc3Nvci5jb21wcmVzcyhtaXhlZERhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWNvbXByZXNzZWQgPSBjb21wcmVzc29yLmRlY29tcHJlc3MocmVzdWx0KTtcclxuICAgICAgICAgICAgZXhwZWN0KGRlY29tcHJlc3NlZCkudG9FcXVhbChtaXhlZERhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=